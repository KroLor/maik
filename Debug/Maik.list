
Maik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008024  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  080081c8  080081c8  000091c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008650  08008650  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008650  08008650  00009650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008658  08008658  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008658  08008658  00009658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800865c  0800865c  0000965c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008660  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  200001d4  08008834  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08008834  0000a584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f099  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251a  00000000  00000000  0001929d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  0001b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a99  00000000  00000000  0001c560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bff  00000000  00000000  0001cff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105f7  00000000  00000000  00034bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091283  00000000  00000000  000451ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6472  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b94  00000000  00000000  000d64b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003b  00000000  00000000  000db04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081ac 	.word	0x080081ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080081ac 	.word	0x080081ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9a0 	b.w	8000fa0 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff33 	bl	8000aec <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc2a 	bl	8000514 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fca0 	bl	8000608 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fae2 	bl	8000298 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	460c      	mov	r4, r1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14e      	bne.n	8000d8e <__udivmoddi4+0xaa>
 8000cf0:	4694      	mov	ip, r2
 8000cf2:	458c      	cmp	ip, r1
 8000cf4:	4686      	mov	lr, r0
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	d962      	bls.n	8000dc2 <__udivmoddi4+0xde>
 8000cfc:	b14a      	cbz	r2, 8000d12 <__udivmoddi4+0x2e>
 8000cfe:	f1c2 0320 	rsb	r3, r2, #32
 8000d02:	4091      	lsls	r1, r2
 8000d04:	fa20 f303 	lsr.w	r3, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	4319      	orrs	r1, r3
 8000d0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f f68c 	uxth.w	r6, ip
 8000d1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb07 1114 	mls	r1, r7, r4, r1
 8000d26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2a:	fb04 f106 	mul.w	r1, r4, r6
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x64>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3a:	f080 8112 	bcs.w	8000f62 <__udivmoddi4+0x27e>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 810f 	bls.w	8000f62 <__udivmoddi4+0x27e>
 8000d44:	3c02      	subs	r4, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a59      	subs	r1, r3, r1
 8000d4a:	fa1f f38e 	uxth.w	r3, lr
 8000d4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d52:	fb07 1110 	mls	r1, r7, r0, r1
 8000d56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5a:	fb00 f606 	mul.w	r6, r0, r6
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x94>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6a:	f080 80fc 	bcs.w	8000f66 <__udivmoddi4+0x282>
 8000d6e:	429e      	cmp	r6, r3
 8000d70:	f240 80f9 	bls.w	8000f66 <__udivmoddi4+0x282>
 8000d74:	4463      	add	r3, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	1b9b      	subs	r3, r3, r6
 8000d7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11d      	cbz	r5, 8000d8a <__udivmoddi4+0xa6>
 8000d82:	40d3      	lsrs	r3, r2
 8000d84:	2200      	movs	r2, #0
 8000d86:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d905      	bls.n	8000d9e <__udivmoddi4+0xba>
 8000d92:	b10d      	cbz	r5, 8000d98 <__udivmoddi4+0xb4>
 8000d94:	e9c5 0100 	strd	r0, r1, [r5]
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e7f5      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000d9e:	fab3 f183 	clz	r1, r3
 8000da2:	2900      	cmp	r1, #0
 8000da4:	d146      	bne.n	8000e34 <__udivmoddi4+0x150>
 8000da6:	42a3      	cmp	r3, r4
 8000da8:	d302      	bcc.n	8000db0 <__udivmoddi4+0xcc>
 8000daa:	4290      	cmp	r0, r2
 8000dac:	f0c0 80f0 	bcc.w	8000f90 <__udivmoddi4+0x2ac>
 8000db0:	1a86      	subs	r6, r0, r2
 8000db2:	eb64 0303 	sbc.w	r3, r4, r3
 8000db6:	2001      	movs	r0, #1
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d0e6      	beq.n	8000d8a <__udivmoddi4+0xa6>
 8000dbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc0:	e7e3      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x204>
 8000dc8:	eba1 040c 	sub.w	r4, r1, ip
 8000dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd0:	fa1f f78c 	uxth.w	r7, ip
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dde:	fb08 4416 	mls	r4, r8, r6, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb07 f006 	mul.w	r0, r7, r6
 8000dea:	4298      	cmp	r0, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x11c>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x11a>
 8000df8:	4298      	cmp	r0, r3
 8000dfa:	f200 80cd 	bhi.w	8000f98 <__udivmoddi4+0x2b4>
 8000dfe:	4626      	mov	r6, r4
 8000e00:	1a1c      	subs	r4, r3, r0
 8000e02:	fa1f f38e 	uxth.w	r3, lr
 8000e06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e12:	fb00 f707 	mul.w	r7, r0, r7
 8000e16:	429f      	cmp	r7, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x148>
 8000e1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x146>
 8000e24:	429f      	cmp	r7, r3
 8000e26:	f200 80b0 	bhi.w	8000f8a <__udivmoddi4+0x2a6>
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	1bdb      	subs	r3, r3, r7
 8000e2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e32:	e7a5      	b.n	8000d80 <__udivmoddi4+0x9c>
 8000e34:	f1c1 0620 	rsb	r6, r1, #32
 8000e38:	408b      	lsls	r3, r1
 8000e3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e3e:	431f      	orrs	r7, r3
 8000e40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e44:	fa04 f301 	lsl.w	r3, r4, r1
 8000e48:	ea43 030c 	orr.w	r3, r3, ip
 8000e4c:	40f4      	lsrs	r4, r6
 8000e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e52:	0c38      	lsrs	r0, r7, #16
 8000e54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e58:	fbb4 fef0 	udiv	lr, r4, r0
 8000e5c:	fa1f fc87 	uxth.w	ip, r7
 8000e60:	fb00 441e 	mls	r4, r0, lr, r4
 8000e64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e68:	fb0e f90c 	mul.w	r9, lr, ip
 8000e6c:	45a1      	cmp	r9, r4
 8000e6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e72:	d90a      	bls.n	8000e8a <__udivmoddi4+0x1a6>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7a:	f080 8084 	bcs.w	8000f86 <__udivmoddi4+0x2a2>
 8000e7e:	45a1      	cmp	r9, r4
 8000e80:	f240 8081 	bls.w	8000f86 <__udivmoddi4+0x2a2>
 8000e84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	eba4 0409 	sub.w	r4, r4, r9
 8000e8e:	fa1f f983 	uxth.w	r9, r3
 8000e92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e96:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x1d2>
 8000ea6:	193c      	adds	r4, r7, r4
 8000ea8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eac:	d267      	bcs.n	8000f7e <__udivmoddi4+0x29a>
 8000eae:	45a4      	cmp	ip, r4
 8000eb0:	d965      	bls.n	8000f7e <__udivmoddi4+0x29a>
 8000eb2:	3b02      	subs	r3, #2
 8000eb4:	443c      	add	r4, r7
 8000eb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eba:	fba0 9302 	umull	r9, r3, r0, r2
 8000ebe:	eba4 040c 	sub.w	r4, r4, ip
 8000ec2:	429c      	cmp	r4, r3
 8000ec4:	46ce      	mov	lr, r9
 8000ec6:	469c      	mov	ip, r3
 8000ec8:	d351      	bcc.n	8000f6e <__udivmoddi4+0x28a>
 8000eca:	d04e      	beq.n	8000f6a <__udivmoddi4+0x286>
 8000ecc:	b155      	cbz	r5, 8000ee4 <__udivmoddi4+0x200>
 8000ece:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ed6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eda:	40cb      	lsrs	r3, r1
 8000edc:	431e      	orrs	r6, r3
 8000ede:	40cc      	lsrs	r4, r1
 8000ee0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e750      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ef8:	4094      	lsls	r4, r2
 8000efa:	430c      	orrs	r4, r1
 8000efc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f04:	fa1f f78c 	uxth.w	r7, ip
 8000f08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f10:	0c23      	lsrs	r3, r4, #16
 8000f12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f16:	fb00 f107 	mul.w	r1, r0, r7
 8000f1a:	4299      	cmp	r1, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x24c>
 8000f1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f26:	d22c      	bcs.n	8000f82 <__udivmoddi4+0x29e>
 8000f28:	4299      	cmp	r1, r3
 8000f2a:	d92a      	bls.n	8000f82 <__udivmoddi4+0x29e>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f38:	fb08 3311 	mls	r3, r8, r1, r3
 8000f3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f40:	fb01 f307 	mul.w	r3, r1, r7
 8000f44:	42a3      	cmp	r3, r4
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x276>
 8000f48:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f50:	d213      	bcs.n	8000f7a <__udivmoddi4+0x296>
 8000f52:	42a3      	cmp	r3, r4
 8000f54:	d911      	bls.n	8000f7a <__udivmoddi4+0x296>
 8000f56:	3902      	subs	r1, #2
 8000f58:	4464      	add	r4, ip
 8000f5a:	1ae4      	subs	r4, r4, r3
 8000f5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f60:	e739      	b.n	8000dd6 <__udivmoddi4+0xf2>
 8000f62:	4604      	mov	r4, r0
 8000f64:	e6f0      	b.n	8000d48 <__udivmoddi4+0x64>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e706      	b.n	8000d78 <__udivmoddi4+0x94>
 8000f6a:	45c8      	cmp	r8, r9
 8000f6c:	d2ae      	bcs.n	8000ecc <__udivmoddi4+0x1e8>
 8000f6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7a8      	b.n	8000ecc <__udivmoddi4+0x1e8>
 8000f7a:	4631      	mov	r1, r6
 8000f7c:	e7ed      	b.n	8000f5a <__udivmoddi4+0x276>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	e799      	b.n	8000eb6 <__udivmoddi4+0x1d2>
 8000f82:	4630      	mov	r0, r6
 8000f84:	e7d4      	b.n	8000f30 <__udivmoddi4+0x24c>
 8000f86:	46d6      	mov	lr, sl
 8000f88:	e77f      	b.n	8000e8a <__udivmoddi4+0x1a6>
 8000f8a:	4463      	add	r3, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e74d      	b.n	8000e2c <__udivmoddi4+0x148>
 8000f90:	4606      	mov	r6, r0
 8000f92:	4623      	mov	r3, r4
 8000f94:	4608      	mov	r0, r1
 8000f96:	e70f      	b.n	8000db8 <__udivmoddi4+0xd4>
 8000f98:	3e02      	subs	r6, #2
 8000f9a:	4463      	add	r3, ip
 8000f9c:	e730      	b.n	8000e00 <__udivmoddi4+0x11c>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <buzzer_set_freq>:
#include "tim.h"
#include "buzzer.h"

void buzzer_set_freq(uint32_t freq_hz) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    uint32_t clock = HAL_RCC_GetPCLK1Freq();
 8000fac:	f001 ff68 	bl	8002e80 <HAL_RCC_GetPCLK1Freq>
 8000fb0:	6178      	str	r0, [r7, #20]
    uint32_t prescaler = htim2.Instance->PSC;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <buzzer_set_freq+0x54>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb8:	613b      	str	r3, [r7, #16]
    uint32_t period = (clock / ((prescaler + 1) * freq_hz)) - 1;
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	fb02 f303 	mul.w	r3, r2, r3
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_PRESCALER(&htim2, prescaler);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <buzzer_set_freq+0x54>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <buzzer_set_freq+0x54>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fde:	4a06      	ldr	r2, [pc, #24]	@ (8000ff8 <buzzer_set_freq+0x54>)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, period / 2);
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <buzzer_set_freq+0x54>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	0852      	lsrs	r2, r2, #1
 8000fec:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000030c 	.word	0x2000030c

08000ffc <buzzer_start>:

void buzzer_start() {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001000:	2104      	movs	r1, #4
 8001002:	4802      	ldr	r0, [pc, #8]	@ (800100c <buzzer_start+0x10>)
 8001004:	f002 f89e 	bl	8003144 <HAL_TIM_PWM_Start>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000030c 	.word	0x2000030c

08001010 <buzzer_stop>:

void buzzer_stop() {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001014:	2104      	movs	r1, #4
 8001016:	4802      	ldr	r0, [pc, #8]	@ (8001020 <buzzer_stop+0x10>)
 8001018:	f002 f944 	bl	80032a4 <HAL_TIM_PWM_Stop>
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000030c 	.word	0x2000030c

08001024 <GNSS_UART_Callback>:
    gnss_index = 0;
    memset(&gnss_data, 0, sizeof(gnss_data));
    HAL_UART_Receive_IT(&huart2, &gnss_rx_buffer[gnss_index], 1);
}

void GNSS_UART_Callback(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    if (gnss_index >= GNSS_BUFFER_SIZE - 1) gnss_index = 0;
 8001028:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <GNSS_UART_Callback+0x5c>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	2bfe      	cmp	r3, #254	@ 0xfe
 800102e:	d902      	bls.n	8001036 <GNSS_UART_Callback+0x12>
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <GNSS_UART_Callback+0x5c>)
 8001032:	2200      	movs	r2, #0
 8001034:	801a      	strh	r2, [r3, #0]
    
    // Проверка конца строки
    if (gnss_rx_buffer[gnss_index] == '\n') {
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <GNSS_UART_Callback+0x5c>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <GNSS_UART_Callback+0x60>)
 800103e:	5c9b      	ldrb	r3, [r3, r2]
 8001040:	2b0a      	cmp	r3, #10
 8001042:	d10b      	bne.n	800105c <GNSS_UART_Callback+0x38>
        gnss_rx_buffer[gnss_index + 1] = '\0';
 8001044:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <GNSS_UART_Callback+0x5c>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	4a0e      	ldr	r2, [pc, #56]	@ (8001084 <GNSS_UART_Callback+0x60>)
 800104c:	2100      	movs	r1, #0
 800104e:	54d1      	strb	r1, [r2, r3]
        GNSS_Process();
 8001050:	f000 f81e 	bl	8001090 <GNSS_Process>
        gnss_index = 0;
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <GNSS_UART_Callback+0x5c>)
 8001056:	2200      	movs	r2, #0
 8001058:	801a      	strh	r2, [r3, #0]
 800105a:	e005      	b.n	8001068 <GNSS_UART_Callback+0x44>
    } else {
        gnss_index++;
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <GNSS_UART_Callback+0x5c>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <GNSS_UART_Callback+0x5c>)
 8001066:	801a      	strh	r2, [r3, #0]
    }
    
    HAL_UART_Receive_IT(&huart2, &gnss_rx_buffer[gnss_index], 1);
 8001068:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <GNSS_UART_Callback+0x5c>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <GNSS_UART_Callback+0x60>)
 8001070:	4413      	add	r3, r2
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	4804      	ldr	r0, [pc, #16]	@ (8001088 <GNSS_UART_Callback+0x64>)
 8001078:	f003 f8e6 	bl	8004248 <HAL_UART_Receive_IT>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000308 	.word	0x20000308
 8001084:	20000208 	.word	0x20000208
 8001088:	200003e4 	.word	0x200003e4
 800108c:	00000000 	.word	0x00000000

08001090 <GNSS_Process>:

void GNSS_Process(void) {
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b094      	sub	sp, #80	@ 0x50
 8001094:	af00      	add	r7, sp, #0
    char* nmea = (char*)gnss_rx_buffer;
 8001096:	4b96      	ldr	r3, [pc, #600]	@ (80012f0 <GNSS_Process+0x260>)
 8001098:	647b      	str	r3, [r7, #68]	@ 0x44
    
    // Проверка заголовка GGA
    if (strstr(nmea, "$GPGGA")) {
 800109a:	4996      	ldr	r1, [pc, #600]	@ (80012f4 <GNSS_Process+0x264>)
 800109c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800109e:	f005 f86f 	bl	8006180 <strstr>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 811a 	beq.w	80012de <GNSS_Process+0x24e>
        char* tokens[15];
        uint8_t token_count = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        
        // Разбивка на токены
        char* token = strtok(nmea, ",");
 80010b0:	4991      	ldr	r1, [pc, #580]	@ (80012f8 <GNSS_Process+0x268>)
 80010b2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80010b4:	f005 f808 	bl	80060c8 <strtok>
 80010b8:	64b8      	str	r0, [r7, #72]	@ 0x48
        while (token && token_count < 15) {
 80010ba:	e00f      	b.n	80010dc <GNSS_Process+0x4c>
            tokens[token_count++] = token;
 80010bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	f887 204f 	strb.w	r2, [r7, #79]	@ 0x4f
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	3350      	adds	r3, #80	@ 0x50
 80010ca:	443b      	add	r3, r7
 80010cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80010ce:	f843 2c4c 	str.w	r2, [r3, #-76]
            token = strtok(NULL, ",");
 80010d2:	4989      	ldr	r1, [pc, #548]	@ (80012f8 <GNSS_Process+0x268>)
 80010d4:	2000      	movs	r0, #0
 80010d6:	f004 fff7 	bl	80060c8 <strtok>
 80010da:	64b8      	str	r0, [r7, #72]	@ 0x48
        while (token && token_count < 15) {
 80010dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <GNSS_Process+0x5a>
 80010e2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80010e6:	2b0e      	cmp	r3, #14
 80010e8:	d9e8      	bls.n	80010bc <GNSS_Process+0x2c>
        }

        if (token_count < 10) return;
 80010ea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80010ee:	2b09      	cmp	r3, #9
 80010f0:	f240 80f4 	bls.w	80012dc <GNSS_Process+0x24c>

        // Парсинг времени
        if (strlen(tokens[1]) >= 6) {
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f872 	bl	80001e0 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b05      	cmp	r3, #5
 8001100:	d932      	bls.n	8001168 <GNSS_Process+0xd8>
            char time_buf[3] = {0};
 8001102:	4b7e      	ldr	r3, [pc, #504]	@ (80012fc <GNSS_Process+0x26c>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800110a:	2300      	movs	r3, #0
 800110c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
            memcpy(time_buf, tokens[1], 2);
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	b29b      	uxth	r3, r3
 8001116:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            gnss_data.hour = atoi(time_buf);
 800111a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800111e:	4618      	mov	r0, r3
 8001120:	f004 f81b 	bl	800515a <atoi>
 8001124:	4603      	mov	r3, r0
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b75      	ldr	r3, [pc, #468]	@ (8001300 <GNSS_Process+0x270>)
 800112a:	711a      	strb	r2, [r3, #4]
            memcpy(time_buf, tokens[1] + 2, 2);
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	3302      	adds	r3, #2
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	b29b      	uxth	r3, r3
 8001134:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            gnss_data.minute = atoi(time_buf);
 8001138:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800113c:	4618      	mov	r0, r3
 800113e:	f004 f80c 	bl	800515a <atoi>
 8001142:	4603      	mov	r3, r0
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b6e      	ldr	r3, [pc, #440]	@ (8001300 <GNSS_Process+0x270>)
 8001148:	715a      	strb	r2, [r3, #5]
            memcpy(time_buf, tokens[1] + 4, 2);
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	3304      	adds	r3, #4
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	b29b      	uxth	r3, r3
 8001152:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            gnss_data.second = atoi(time_buf);
 8001156:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800115a:	4618      	mov	r0, r3
 800115c:	f003 fffd 	bl	800515a <atoi>
 8001160:	4603      	mov	r3, r0
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b66      	ldr	r3, [pc, #408]	@ (8001300 <GNSS_Process+0x270>)
 8001166:	719a      	strb	r2, [r3, #6]
        }

        // Парсинг координат
        if (strlen(tokens[2]) > 0 && strlen(tokens[4]) > 0) {
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 809b 	beq.w	80012a8 <GNSS_Process+0x218>
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8096 	beq.w	80012a8 <GNSS_Process+0x218>
            gnss_data.latitude = atof(tokens[2]);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4618      	mov	r0, r3
 8001180:	f003 ffe8 	bl	8005154 <atof>
 8001184:	ec53 2b10 	vmov	r2, r3, d0
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fd0c 	bl	8000ba8 <__aeabi_d2f>
 8001190:	4603      	mov	r3, r0
 8001192:	4a5b      	ldr	r2, [pc, #364]	@ (8001300 <GNSS_Process+0x270>)
 8001194:	6093      	str	r3, [r2, #8]
            gnss_data.longitude = atof(tokens[4]);
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	4618      	mov	r0, r3
 800119a:	f003 ffdb 	bl	8005154 <atof>
 800119e:	ec53 2b10 	vmov	r2, r3, d0
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fcff 	bl	8000ba8 <__aeabi_d2f>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a54      	ldr	r2, [pc, #336]	@ (8001300 <GNSS_Process+0x270>)
 80011ae:	60d3      	str	r3, [r2, #12]
            
            // Конвертация формата DDMM.MMMM -> DD.DDDD
            gnss_data.latitude = (int)(gnss_data.latitude / 100) + 
 80011b0:	4b53      	ldr	r3, [pc, #332]	@ (8001300 <GNSS_Process+0x270>)
 80011b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80011b6:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8001304 <GNSS_Process+0x274>
 80011ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c2:	ee17 0a90 	vmov	r0, s15
 80011c6:	f7ff f9b5 	bl	8000534 <__aeabi_i2d>
 80011ca:	4604      	mov	r4, r0
 80011cc:	460d      	mov	r5, r1
                                fmod(gnss_data.latitude, 100) / 60;
 80011ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001300 <GNSS_Process+0x270>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9c0 	bl	8000558 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 80012e8 <GNSS_Process+0x258>
 80011e0:	ec43 2b10 	vmov	d0, r2, r3
 80011e4:	f006 feaa 	bl	8007f3c <fmod>
 80011e8:	ec51 0b10 	vmov	r0, r1, d0
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b45      	ldr	r3, [pc, #276]	@ (8001308 <GNSS_Process+0x278>)
 80011f2:	f7ff fb33 	bl	800085c <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
            gnss_data.latitude = (int)(gnss_data.latitude / 100) + 
 80011fa:	4620      	mov	r0, r4
 80011fc:	4629      	mov	r1, r5
 80011fe:	f7ff f84d 	bl	800029c <__adddf3>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fccd 	bl	8000ba8 <__aeabi_d2f>
 800120e:	4603      	mov	r3, r0
 8001210:	4a3b      	ldr	r2, [pc, #236]	@ (8001300 <GNSS_Process+0x270>)
 8001212:	6093      	str	r3, [r2, #8]
            gnss_data.longitude = (int)(gnss_data.longitude / 100) + 
 8001214:	4b3a      	ldr	r3, [pc, #232]	@ (8001300 <GNSS_Process+0x270>)
 8001216:	ed93 7a03 	vldr	s14, [r3, #12]
 800121a:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8001304 <GNSS_Process+0x274>
 800121e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001226:	ee17 0a90 	vmov	r0, s15
 800122a:	f7ff f983 	bl	8000534 <__aeabi_i2d>
 800122e:	4604      	mov	r4, r0
 8001230:	460d      	mov	r5, r1
                                 fmod(gnss_data.longitude, 100) / 60;
 8001232:	4b33      	ldr	r3, [pc, #204]	@ (8001300 <GNSS_Process+0x270>)
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f98e 	bl	8000558 <__aeabi_f2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 80012e8 <GNSS_Process+0x258>
 8001244:	ec43 2b10 	vmov	d0, r2, r3
 8001248:	f006 fe78 	bl	8007f3c <fmod>
 800124c:	ec51 0b10 	vmov	r0, r1, d0
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b2c      	ldr	r3, [pc, #176]	@ (8001308 <GNSS_Process+0x278>)
 8001256:	f7ff fb01 	bl	800085c <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
            gnss_data.longitude = (int)(gnss_data.longitude / 100) + 
 800125e:	4620      	mov	r0, r4
 8001260:	4629      	mov	r1, r5
 8001262:	f7ff f81b 	bl	800029c <__adddf3>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fc9b 	bl	8000ba8 <__aeabi_d2f>
 8001272:	4603      	mov	r3, r0
 8001274:	4a22      	ldr	r2, [pc, #136]	@ (8001300 <GNSS_Process+0x270>)
 8001276:	60d3      	str	r3, [r2, #12]
            
            // Коррекция полушарий
            if (tokens[3][0] == 'S') gnss_data.latitude *= -1;
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b53      	cmp	r3, #83	@ 0x53
 800127e:	d107      	bne.n	8001290 <GNSS_Process+0x200>
 8001280:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <GNSS_Process+0x270>)
 8001282:	edd3 7a02 	vldr	s15, [r3, #8]
 8001286:	eef1 7a67 	vneg.f32	s15, s15
 800128a:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <GNSS_Process+0x270>)
 800128c:	edc3 7a02 	vstr	s15, [r3, #8]
            if (tokens[5][0] == 'W') gnss_data.longitude *= -1;
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b57      	cmp	r3, #87	@ 0x57
 8001296:	d107      	bne.n	80012a8 <GNSS_Process+0x218>
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <GNSS_Process+0x270>)
 800129a:	edd3 7a03 	vldr	s15, [r3, #12]
 800129e:	eef1 7a67 	vneg.f32	s15, s15
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <GNSS_Process+0x270>)
 80012a4:	edc3 7a03 	vstr	s15, [r3, #12]
        }

        // Количество спутников
        gnss_data.satellites = atoi(tokens[7]);
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 ff55 	bl	800515a <atoi>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <GNSS_Process+0x270>)
 80012b6:	741a      	strb	r2, [r3, #16]
        
        // Высота
        if (strlen(tokens[9]) > 0) {
 80012b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00e      	beq.n	80012de <GNSS_Process+0x24e>
            gnss_data.altitude = atof(tokens[9]);
 80012c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 ff46 	bl	8005154 <atof>
 80012c8:	ec53 2b10 	vmov	r2, r3, d0
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fc6a 	bl	8000ba8 <__aeabi_d2f>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <GNSS_Process+0x270>)
 80012d8:	6153      	str	r3, [r2, #20]
 80012da:	e000      	b.n	80012de <GNSS_Process+0x24e>
        if (token_count < 10) return;
 80012dc:	bf00      	nop
               gnss_data.hour, gnss_data.minute, gnss_data.second,
               gnss_data.latitude, gnss_data.longitude,
               gnss_data.satellites, gnss_data.altitude);
        #endif
    }
 80012de:	3750      	adds	r7, #80	@ 0x50
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bdb0      	pop	{r4, r5, r7, pc}
 80012e4:	f3af 8000 	nop.w
 80012e8:	00000000 	.word	0x00000000
 80012ec:	40590000 	.word	0x40590000
 80012f0:	20000208 	.word	0x20000208
 80012f4:	080081c8 	.word	0x080081c8
 80012f8:	080081d0 	.word	0x080081d0
 80012fc:	080081d4 	.word	0x080081d4
 8001300:	200001f0 	.word	0x200001f0
 8001304:	42c80000 	.word	0x42c80000
 8001308:	404e0000 	.word	0x404e0000

0800130c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	db0b      	blt.n	8001336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f003 021f 	and.w	r2, r3, #31
 8001324:	4907      	ldr	r1, [pc, #28]	@ (8001344 <__NVIC_EnableIRQ+0x38>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	2001      	movs	r0, #1
 800132e:	fa00 f202 	lsl.w	r2, r0, r2
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000e100 	.word	0xe000e100

08001348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134e:	f000 fd8f 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001352:	f000 f863 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001356:	f000 f9e5 	bl	8001724 <MX_GPIO_Init>
  MX_TIM2_Init();
 800135a:	f000 f8c7 	bl	80014ec <MX_TIM2_Init>
  MX_TIM3_Init();
 800135e:	f000 f93b 	bl	80015d8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001362:	f000 f98b 	bl	800167c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001366:	f000 f9b3 	bl	80016d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  buzzer_set_freq(2000);
 800136a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800136e:	f7ff fe19 	bl	8000fa4 <buzzer_set_freq>

  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8001372:	4b25      	ldr	r3, [pc, #148]	@ (8001408 <main+0xc0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_SR_UIF);
 800137a:	4b23      	ldr	r3, [pc, #140]	@ (8001408 <main+0xc0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f06f 0201 	mvn.w	r2, #1
 8001382:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim3);
 8001384:	4820      	ldr	r0, [pc, #128]	@ (8001408 <main+0xc0>)
 8001386:	f001 fdf3 	bl	8002f70 <HAL_TIM_Base_Start_IT>

  // MX_USART2_UART_Init();
  // GNSS_Init();  
  E220_Init();
 800138a:	f000 fa91 	bl	80018b0 <E220_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (sys_status == INIT) {
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <main+0xc4>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10d      	bne.n	80013b2 <main+0x6a>
      // Статус радиo
      if (E220_CheckStatus()) {
 8001396:	f000 fa41 	bl	800181c <E220_CheckStatus>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <main+0x64>
        HAL_GPIO_WritePin(GPIOB, RADIO, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013a6:	481a      	ldr	r0, [pc, #104]	@ (8001410 <main+0xc8>)
 80013a8:	f001 f920 	bl	80025ec <HAL_GPIO_WritePin>
      /* // Статус GPS
      if (...) {
        HAL_GPIO_WritePin(GPIOA, GPS, GPIO_PIN_SET);
      } */
      
      sys_status = WHILE;
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <main+0xc4>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
    }

    if (sys_status == WHILE) {
 80013b2:	4b16      	ldr	r3, [pc, #88]	@ (800140c <main+0xc4>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d109      	bne.n	80013ce <main+0x86>
      // Проверяем радио
      if (E220_ReceiveHandler() == "landing") {
 80013ba:	f000 fab5 	bl	8001928 <E220_ReceiveHandler>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <main+0xcc>)
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d102      	bne.n	80013ce <main+0x86>
        sys_status = RUN;
 80013c8:	4b10      	ldr	r3, [pc, #64]	@ (800140c <main+0xc4>)
 80013ca:	2202      	movs	r2, #2
 80013cc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (sys_status == RUN) {
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <main+0xc4>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d1db      	bne.n	800138e <main+0x46>
      buzzer_start();
 80013d6:	f7ff fe11 	bl	8000ffc <buzzer_start>
      HAL_Delay(2000);
 80013da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013de:	f000 fdb9 	bl	8001f54 <HAL_Delay>
      buzzer_stop();
 80013e2:	f7ff fe15 	bl	8001010 <buzzer_stop>
      HAL_Delay(2000);
 80013e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013ea:	f000 fdb3 	bl	8001f54 <HAL_Delay>

      // GPS
      float latitude = gnss_data.latitude;  // Широта в градусах
 80013ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <main+0xd0>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	60fb      	str	r3, [r7, #12]
      float longitude = gnss_data.longitude; // Долгота в градусах
 80013f4:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <main+0xd0>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
      float altitude = gnss_data.altitude;  // Высота в метрах
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <main+0xd0>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	607b      	str	r3, [r7, #4]
      uint8_t sats = gnss_data.satellites; // Количество спутников, с которыми работает GPS-модуль
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <main+0xd0>)
 8001402:	7c1b      	ldrb	r3, [r3, #16]
 8001404:	70fb      	strb	r3, [r7, #3]
    if (sys_status == INIT) {
 8001406:	e7c2      	b.n	800138e <main+0x46>
 8001408:	20000354 	.word	0x20000354
 800140c:	2000042c 	.word	0x2000042c
 8001410:	40020400 	.word	0x40020400
 8001414:	080081d8 	.word	0x080081d8
 8001418:	200001f0 	.word	0x200001f0

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	@ 0x50
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	2230      	movs	r2, #48	@ 0x30
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f004 fe31 	bl	8006092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b27      	ldr	r3, [pc, #156]	@ (80014e4 <SystemClock_Config+0xc8>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	4a26      	ldr	r2, [pc, #152]	@ (80014e4 <SystemClock_Config+0xc8>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001450:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <SystemClock_Config+0xc8>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b21      	ldr	r3, [pc, #132]	@ (80014e8 <SystemClock_Config+0xcc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a20      	ldr	r2, [pc, #128]	@ (80014e8 <SystemClock_Config+0xcc>)
 8001466:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b1e      	ldr	r3, [pc, #120]	@ (80014e8 <SystemClock_Config+0xcc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001478:	2302      	movs	r3, #2
 800147a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800147c:	2301      	movs	r3, #1
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001480:	2310      	movs	r3, #16
 8001482:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001484:	2302      	movs	r3, #2
 8001486:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001488:	2300      	movs	r3, #0
 800148a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800148c:	2308      	movs	r3, #8
 800148e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001490:	2354      	movs	r3, #84	@ 0x54
 8001492:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001494:	2302      	movs	r3, #2
 8001496:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001498:	2304      	movs	r3, #4
 800149a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 f8bd 	bl	8002620 <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014ac:	f000 f9b0 	bl	8001810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	230f      	movs	r3, #15
 80014b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b4:	2302      	movs	r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	2102      	movs	r1, #2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 fb1f 	bl	8002b10 <HAL_RCC_ClockConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014d8:	f000 f99a 	bl	8001810 <Error_Handler>
  }
}
 80014dc:	bf00      	nop
 80014de:	3750      	adds	r7, #80	@ 0x50
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40007000 	.word	0x40007000

080014ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08e      	sub	sp, #56	@ 0x38
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	615a      	str	r2, [r3, #20]
 800151a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800151c:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <MX_TIM2_Init+0xe8>)
 800151e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001522:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001524:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <MX_TIM2_Init+0xe8>)
 8001526:	2253      	movs	r2, #83	@ 0x53
 8001528:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b2a      	ldr	r3, [pc, #168]	@ (80015d4 <MX_TIM2_Init+0xe8>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001530:	4b28      	ldr	r3, [pc, #160]	@ (80015d4 <MX_TIM2_Init+0xe8>)
 8001532:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001536:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001538:	4b26      	ldr	r3, [pc, #152]	@ (80015d4 <MX_TIM2_Init+0xe8>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b25      	ldr	r3, [pc, #148]	@ (80015d4 <MX_TIM2_Init+0xe8>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001544:	4823      	ldr	r0, [pc, #140]	@ (80015d4 <MX_TIM2_Init+0xe8>)
 8001546:	f001 fcc3 	bl	8002ed0 <HAL_TIM_Base_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001550:	f000 f95e 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001558:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800155a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800155e:	4619      	mov	r1, r3
 8001560:	481c      	ldr	r0, [pc, #112]	@ (80015d4 <MX_TIM2_Init+0xe8>)
 8001562:	f002 f8b5 	bl	80036d0 <HAL_TIM_ConfigClockSource>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800156c:	f000 f950 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001570:	4818      	ldr	r0, [pc, #96]	@ (80015d4 <MX_TIM2_Init+0xe8>)
 8001572:	f001 fd8e 	bl	8003092 <HAL_TIM_PWM_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800157c:	f000 f948 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001588:	f107 0320 	add.w	r3, r7, #32
 800158c:	4619      	mov	r1, r3
 800158e:	4811      	ldr	r0, [pc, #68]	@ (80015d4 <MX_TIM2_Init+0xe8>)
 8001590:	f002 fc66 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800159a:	f000 f939 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159e:	2360      	movs	r3, #96	@ 0x60
 80015a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80015a2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80015a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2204      	movs	r2, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4807      	ldr	r0, [pc, #28]	@ (80015d4 <MX_TIM2_Init+0xe8>)
 80015b8:	f001 ffc8 	bl	800354c <HAL_TIM_PWM_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80015c2:	f000 f925 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015c6:	4803      	ldr	r0, [pc, #12]	@ (80015d4 <MX_TIM2_Init+0xe8>)
 80015c8:	f000 fa32 	bl	8001a30 <HAL_TIM_MspPostInit>

}
 80015cc:	bf00      	nop
 80015ce:	3738      	adds	r7, #56	@ 0x38
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000030c 	.word	0x2000030c

080015d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	463b      	mov	r3, r7
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <MX_TIM3_Init+0x9c>)
 80015f6:	4a20      	ldr	r2, [pc, #128]	@ (8001678 <MX_TIM3_Init+0xa0>)
 80015f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 80015fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <MX_TIM3_Init+0x9c>)
 80015fc:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001600:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <MX_TIM3_Init+0x9c>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8001608:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <MX_TIM3_Init+0x9c>)
 800160a:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800160e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001610:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <MX_TIM3_Init+0x9c>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001616:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <MX_TIM3_Init+0x9c>)
 8001618:	2280      	movs	r2, #128	@ 0x80
 800161a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800161c:	4815      	ldr	r0, [pc, #84]	@ (8001674 <MX_TIM3_Init+0x9c>)
 800161e:	f001 fc57 	bl	8002ed0 <HAL_TIM_Base_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001628:	f000 f8f2 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001630:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4619      	mov	r1, r3
 8001638:	480e      	ldr	r0, [pc, #56]	@ (8001674 <MX_TIM3_Init+0x9c>)
 800163a:	f002 f849 	bl	80036d0 <HAL_TIM_ConfigClockSource>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001644:	f000 f8e4 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001650:	463b      	mov	r3, r7
 8001652:	4619      	mov	r1, r3
 8001654:	4807      	ldr	r0, [pc, #28]	@ (8001674 <MX_TIM3_Init+0x9c>)
 8001656:	f002 fc03 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001660:	f000 f8d6 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  NVIC_EnableIRQ(TIM3_IRQn);
 8001664:	201d      	movs	r0, #29
 8001666:	f7ff fe51 	bl	800130c <__NVIC_EnableIRQ>

  /* USER CODE END TIM3_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000354 	.word	0x20000354
 8001678:	40000400 	.word	0x40000400

0800167c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001682:	4a12      	ldr	r2, [pc, #72]	@ (80016cc <MX_USART1_UART_Init+0x50>)
 8001684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001688:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800168c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016b4:	f002 fc56 	bl	8003f64 <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016be:	f000 f8a7 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000039c 	.word	0x2000039c
 80016cc:	40011000 	.word	0x40011000

080016d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	@ (8001720 <MX_USART2_UART_Init+0x50>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600 ;
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 80016dc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b09      	ldr	r3, [pc, #36]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_USART2_UART_Init+0x4c>)
 8001708:	f002 fc2c 	bl	8003f64 <HAL_UART_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001712:	f000 f87d 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200003e4 	.word	0x200003e4
 8001720:	40004400 	.word	0x40004400

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <MX_GPIO_Init+0xac>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a23      	ldr	r2, [pc, #140]	@ (80017d0 <MX_GPIO_Init+0xac>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <MX_GPIO_Init+0xac>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <MX_GPIO_Init+0xac>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a1c      	ldr	r2, [pc, #112]	@ (80017d0 <MX_GPIO_Init+0xac>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <MX_GPIO_Init+0xac>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|GPIO_PIN_15|GPIO_PIN_9, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 4132 	mov.w	r1, #45568	@ 0xb200
 8001778:	4816      	ldr	r0, [pc, #88]	@ (80017d4 <MX_GPIO_Init+0xb0>)
 800177a:	f000 ff37 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001784:	4814      	ldr	r0, [pc, #80]	@ (80017d8 <MX_GPIO_Init+0xb4>)
 8001786:	f000 ff31 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M0_Pin M1_Pin PB15 PB9 */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|GPIO_PIN_15|GPIO_PIN_9;
 800178a:	f44f 4332 	mov.w	r3, #45568	@ 0xb200
 800178e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4619      	mov	r1, r3
 80017a2:	480c      	ldr	r0, [pc, #48]	@ (80017d4 <MX_GPIO_Init+0xb0>)
 80017a4:	f000 fd9e 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <MX_GPIO_Init+0xb4>)
 80017c2:	f000 fd8f 	bl	80022e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c6:	bf00      	nop
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020400 	.word	0x40020400
 80017d8:	40020000 	.word	0x40020000

080017dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a06      	ldr	r2, [pc, #24]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d105      	bne.n	80017fa <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    HAL_TIM_Base_Stop_IT(&htim3);
 80017ee:	4806      	ldr	r0, [pc, #24]	@ (8001808 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80017f0:	f001 fc20 	bl	8003034 <HAL_TIM_Base_Stop_IT>
    // HAL_GPIO_WritePin(GPIOB, RADIO, GPIO_PIN_SET);

    sys_status = RUN;
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017f6:	2202      	movs	r2, #2
 80017f8:	701a      	strb	r2, [r3, #0]
  }
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40000400 	.word	0x40000400
 8001808:	20000354 	.word	0x20000354
 800180c:	2000042c 	.word	0x2000042c

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
}
 8001816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <Error_Handler+0x8>

0800181c <E220_CheckStatus>:
#include "main.h"
#include "stdbool.h"

bool E220_CheckStatus() {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
    // Переход в конфигурационный режим
    HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, GPIO_PIN_SET);
 8001822:	2201      	movs	r2, #1
 8001824:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001828:	481d      	ldr	r0, [pc, #116]	@ (80018a0 <E220_CheckStatus+0x84>)
 800182a:	f000 fedf 	bl	80025ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001834:	481a      	ldr	r0, [pc, #104]	@ (80018a0 <E220_CheckStatus+0x84>)
 8001836:	f000 fed9 	bl	80025ec <HAL_GPIO_WritePin>
    HAL_Delay(200);
 800183a:	20c8      	movs	r0, #200	@ 0xc8
 800183c:	f000 fb8a 	bl	8001f54 <HAL_Delay>
    
    // Отправка тестовой команды
    E220_SendCommand("AT\r\n");
 8001840:	4818      	ldr	r0, [pc, #96]	@ (80018a4 <E220_CheckStatus+0x88>)
 8001842:	f000 f85b 	bl	80018fc <E220_SendCommand>
    
    // Ожидание ответа
    uint8_t rx_buf[16] = {0};
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
    HAL_UART_Receive(&huart2, rx_buf, sizeof(rx_buf), 500);
 8001854:	4639      	mov	r1, r7
 8001856:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800185a:	2210      	movs	r2, #16
 800185c:	4812      	ldr	r0, [pc, #72]	@ (80018a8 <E220_CheckStatus+0x8c>)
 800185e:	f002 fc5c 	bl	800411a <HAL_UART_Receive>
    
    // Возврат в нормальный режим
    HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001868:	480d      	ldr	r0, [pc, #52]	@ (80018a0 <E220_CheckStatus+0x84>)
 800186a:	f000 febf 	bl	80025ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001874:	480a      	ldr	r0, [pc, #40]	@ (80018a0 <E220_CheckStatus+0x84>)
 8001876:	f000 feb9 	bl	80025ec <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800187a:	2032      	movs	r0, #50	@ 0x32
 800187c:	f000 fb6a 	bl	8001f54 <HAL_Delay>
    
    // Проверка ответа
    return (strstr((char*)rx_buf, "OK") != NULL);
 8001880:	463b      	mov	r3, r7
 8001882:	490a      	ldr	r1, [pc, #40]	@ (80018ac <E220_CheckStatus+0x90>)
 8001884:	4618      	mov	r0, r3
 8001886:	f004 fc7b 	bl	8006180 <strstr>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40020400 	.word	0x40020400
 80018a4:	080081e0 	.word	0x080081e0
 80018a8:	200003e4 	.word	0x200003e4
 80018ac:	080081e8 	.word	0x080081e8

080018b0 <E220_Init>:

// Инициализация E220
void E220_Init() {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  // Переход в Normal Mode (M0=0, M1=0)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);  // M1
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ba:	480d      	ldr	r0, [pc, #52]	@ (80018f0 <E220_Init+0x40>)
 80018bc:	f000 fe96 	bl	80025ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);  // M0
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018c6:	480a      	ldr	r0, [pc, #40]	@ (80018f0 <E220_Init+0x40>)
 80018c8:	f000 fe90 	bl	80025ec <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80018cc:	2064      	movs	r0, #100	@ 0x64
 80018ce:	f000 fb41 	bl	8001f54 <HAL_Delay>
  
  // Настройка модуля
  E220_SendCommand("AT+ADDRESS=1\r\n");
 80018d2:	4808      	ldr	r0, [pc, #32]	@ (80018f4 <E220_Init+0x44>)
 80018d4:	f000 f812 	bl	80018fc <E220_SendCommand>
  HAL_Delay(50);
 80018d8:	2032      	movs	r0, #50	@ 0x32
 80018da:	f000 fb3b 	bl	8001f54 <HAL_Delay>
  E220_SendCommand("AT+NETWORKID=5\r\n");
 80018de:	4806      	ldr	r0, [pc, #24]	@ (80018f8 <E220_Init+0x48>)
 80018e0:	f000 f80c 	bl	80018fc <E220_SendCommand>
  HAL_Delay(50);
 80018e4:	2032      	movs	r0, #50	@ 0x32
 80018e6:	f000 fb35 	bl	8001f54 <HAL_Delay>
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40020400 	.word	0x40020400
 80018f4:	080081ec 	.word	0x080081ec
 80018f8:	080081fc 	.word	0x080081fc

080018fc <E220_SendCommand>:

// Отправка команд
void E220_SendCommand(const char *cmd) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7fe fc6b 	bl	80001e0 <strlen>
 800190a:	4603      	mov	r3, r0
 800190c:	b29a      	uxth	r2, r3
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4803      	ldr	r0, [pc, #12]	@ (8001924 <E220_SendCommand+0x28>)
 8001916:	f002 fb75 	bl	8004004 <HAL_UART_Transmit>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200003e4 	.word	0x200003e4

08001928 <E220_ReceiveHandler>:

// Приём данных
uint8_t E220_ReceiveHandler() {
 8001928:	b580      	push	{r7, lr}
 800192a:	b0a0      	sub	sp, #128	@ 0x80
 800192c:	af00      	add	r7, sp, #0
  uint8_t rx_buffer[128];
  if (HAL_UART_Receive(&huart2, rx_buffer, sizeof(rx_buffer), 100) == HAL_OK) {
 800192e:	4639      	mov	r1, r7
 8001930:	2364      	movs	r3, #100	@ 0x64
 8001932:	2280      	movs	r2, #128	@ 0x80
 8001934:	4807      	ldr	r0, [pc, #28]	@ (8001954 <E220_ReceiveHandler+0x2c>)
 8001936:	f002 fbf0 	bl	800411a <HAL_UART_Receive>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <E220_ReceiveHandler+0x24>
    // Обработка данных
    rx_buffer[sizeof(rx_buffer)-1] = '\0';
 8001940:	2300      	movs	r3, #0
 8001942:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    return rx_buffer;
 8001946:	463b      	mov	r3, r7
 8001948:	b2db      	uxtb	r3, r3
 800194a:	e7ff      	b.n	800194c <E220_ReceiveHandler+0x24>
  }
 800194c:	4618      	mov	r0, r3
 800194e:	3780      	adds	r7, #128	@ 0x80
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200003e4 	.word	0x200003e4

08001958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <HAL_MspInit+0x4c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	4a0f      	ldr	r2, [pc, #60]	@ (80019a4 <HAL_MspInit+0x4c>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800196c:	6453      	str	r3, [r2, #68]	@ 0x44
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_MspInit+0x4c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_MspInit+0x4c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	4a08      	ldr	r2, [pc, #32]	@ (80019a4 <HAL_MspInit+0x4c>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	@ 0x40
 800198a:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_MspInit+0x4c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b8:	d116      	bne.n	80019e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <HAL_TIM_Base_MspInit+0x80>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	4a19      	ldr	r2, [pc, #100]	@ (8001a28 <HAL_TIM_Base_MspInit+0x80>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ca:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <HAL_TIM_Base_MspInit+0x80>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	201c      	movs	r0, #28
 80019dc:	f000 fbb9 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019e0:	201c      	movs	r0, #28
 80019e2:	f000 fbd2 	bl	800218a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019e6:	e01a      	b.n	8001a1e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0f      	ldr	r2, [pc, #60]	@ (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d115      	bne.n	8001a1e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <HAL_TIM_Base_MspInit+0x80>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001a28 <HAL_TIM_Base_MspInit+0x80>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <HAL_TIM_Base_MspInit+0x80>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	201d      	movs	r0, #29
 8001a14:	f000 fb9d 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a18:	201d      	movs	r0, #29
 8001a1a:	f000 fbb6 	bl	800218a <HAL_NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40000400 	.word	0x40000400

08001a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a50:	d11d      	bne.n	8001a8e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <HAL_TIM_MspPostInit+0x68>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a98 <HAL_TIM_MspPostInit+0x68>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a62:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <HAL_TIM_MspPostInit+0x68>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	4619      	mov	r1, r3
 8001a88:	4804      	ldr	r0, [pc, #16]	@ (8001a9c <HAL_TIM_MspPostInit+0x6c>)
 8001a8a:	f000 fc2b 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3720      	adds	r7, #32
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020000 	.word	0x40020000

08001aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	@ 0x30
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a3f      	ldr	r2, [pc, #252]	@ (8001bbc <HAL_UART_MspInit+0x11c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d13e      	bne.n	8001b40 <HAL_UART_MspInit+0xa0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc0 <HAL_UART_MspInit+0x120>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aca:	4a3d      	ldr	r2, [pc, #244]	@ (8001bc0 <HAL_UART_MspInit+0x120>)
 8001acc:	f043 0310 	orr.w	r3, r3, #16
 8001ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc0 <HAL_UART_MspInit+0x120>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	4b37      	ldr	r3, [pc, #220]	@ (8001bc0 <HAL_UART_MspInit+0x120>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	4a36      	ldr	r2, [pc, #216]	@ (8001bc0 <HAL_UART_MspInit+0x120>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aee:	4b34      	ldr	r3, [pc, #208]	@ (8001bc0 <HAL_UART_MspInit+0x120>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001afa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b0c:	2307      	movs	r3, #7
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	482b      	ldr	r0, [pc, #172]	@ (8001bc4 <HAL_UART_MspInit+0x124>)
 8001b18:	f000 fbe4 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b2e:	2307      	movs	r3, #7
 8001b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4822      	ldr	r0, [pc, #136]	@ (8001bc4 <HAL_UART_MspInit+0x124>)
 8001b3a:	f000 fbd3 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b3e:	e038      	b.n	8001bb2 <HAL_UART_MspInit+0x112>
  else if(huart->Instance==USART2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a20      	ldr	r2, [pc, #128]	@ (8001bc8 <HAL_UART_MspInit+0x128>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d133      	bne.n	8001bb2 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc0 <HAL_UART_MspInit+0x120>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <HAL_UART_MspInit+0x120>)
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5a:	4b19      	ldr	r3, [pc, #100]	@ (8001bc0 <HAL_UART_MspInit+0x120>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <HAL_UART_MspInit+0x120>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <HAL_UART_MspInit+0x120>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <HAL_UART_MspInit+0x120>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b82:	230c      	movs	r3, #12
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b92:	2307      	movs	r3, #7
 8001b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4809      	ldr	r0, [pc, #36]	@ (8001bc4 <HAL_UART_MspInit+0x124>)
 8001b9e:	f000 fba1 	bl	80022e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2026      	movs	r0, #38	@ 0x26
 8001ba8:	f000 fad3 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bac:	2026      	movs	r0, #38	@ 0x26
 8001bae:	f000 faec 	bl	800218a <HAL_NVIC_EnableIRQ>
}
 8001bb2:	bf00      	nop
 8001bb4:	3730      	adds	r7, #48	@ 0x30
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40011000 	.word	0x40011000
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40004400 	.word	0x40004400

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <HardFault_Handler+0x4>

08001bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <MemManage_Handler+0x4>

08001be4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <BusFault_Handler+0x4>

08001bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <UsageFault_Handler+0x4>

08001bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c22:	f000 f977 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <TIM2_IRQHandler+0x10>)
 8001c32:	f001 fb9b 	bl	800336c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000030c 	.word	0x2000030c

08001c40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <TIM3_IRQHandler+0x10>)
 8001c46:	f001 fb91 	bl	800336c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000354 	.word	0x20000354

08001c54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    extern void GNSS_UART_Callback(void);
    GNSS_UART_Callback();
 8001c58:	f7ff f9e4 	bl	8001024 <GNSS_UART_Callback>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c5c:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <USART2_IRQHandler+0x14>)
 8001c5e:	f002 fb19 	bl	8004294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200003e4 	.word	0x200003e4

08001c6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return 1;
 8001c70:	2301      	movs	r3, #1
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_kill>:

int _kill(int pid, int sig)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c86:	f004 fad7 	bl	8006238 <__errno>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2216      	movs	r2, #22
 8001c8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_exit>:

void _exit (int status)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ffe7 	bl	8001c7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cae:	bf00      	nop
 8001cb0:	e7fd      	b.n	8001cae <_exit+0x12>

08001cb2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	e00a      	b.n	8001cda <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cc4:	f3af 8000 	nop.w
 8001cc8:	4601      	mov	r1, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	60ba      	str	r2, [r7, #8]
 8001cd0:	b2ca      	uxtb	r2, r1
 8001cd2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	dbf0      	blt.n	8001cc4 <_read+0x12>
  }

  return len;
 8001ce2:	687b      	ldr	r3, [r7, #4]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	e009      	b.n	8001d12 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	60ba      	str	r2, [r7, #8]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	dbf1      	blt.n	8001cfe <_write+0x12>
  }
  return len;
 8001d1a:	687b      	ldr	r3, [r7, #4]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_close>:

int _close(int file)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d4c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_isatty>:

int _isatty(int file)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d64:	2301      	movs	r3, #1
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d94:	4a14      	ldr	r2, [pc, #80]	@ (8001de8 <_sbrk+0x5c>)
 8001d96:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <_sbrk+0x60>)
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da0:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <_sbrk+0x64>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	@ (8001df4 <_sbrk+0x68>)
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dae:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d207      	bcs.n	8001dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dbc:	f004 fa3c 	bl	8006238 <__errno>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	e009      	b.n	8001de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dcc:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	@ (8001df0 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a05      	ldr	r2, [pc, #20]	@ (8001df0 <_sbrk+0x64>)
 8001ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20020000 	.word	0x20020000
 8001dec:	00000400 	.word	0x00000400
 8001df0:	20000430 	.word	0x20000430
 8001df4:	20000588 	.word	0x20000588

08001df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <SystemInit+0x20>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e02:	4a05      	ldr	r2, [pc, #20]	@ (8001e18 <SystemInit+0x20>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e20:	f7ff ffea 	bl	8001df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e24:	480c      	ldr	r0, [pc, #48]	@ (8001e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e26:	490d      	ldr	r1, [pc, #52]	@ (8001e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e28:	4a0d      	ldr	r2, [pc, #52]	@ (8001e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f004 f9fb 	bl	8006244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4e:	f7ff fa7b 	bl	8001348 <main>
  bx  lr    
 8001e52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e60:	08008660 	.word	0x08008660
  ldr r2, =_sbss
 8001e64:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e68:	20000584 	.word	0x20000584

08001e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb0 <HAL_Init+0x40>)
 8001e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e80:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <HAL_Init+0x40>)
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a07      	ldr	r2, [pc, #28]	@ (8001eb0 <HAL_Init+0x40>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 f94f 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9e:	200f      	movs	r0, #15
 8001ea0:	f000 f808 	bl	8001eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea4:	f7ff fd58 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023c00 	.word	0x40023c00

08001eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_InitTick+0x54>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <HAL_InitTick+0x58>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f967 	bl	80021a6 <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f000 f92f 	bl	8002152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	@ (8001f10 <HAL_InitTick+0x5c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	@ (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000008 	.word	0x20000008
 8001f38:	20000434 	.word	0x20000434

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	@ (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000434 	.word	0x20000434

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff ffee 	bl	8001f3c <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffde 	bl	8001f3c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000008 	.word	0x20000008

08001f9c <__NVIC_SetPriorityGrouping>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	@ (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	@ (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	@ (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	@ 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff8e 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff29 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002164:	f7ff ff3e 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ff8e 	bl	8002090 <NVIC_EncodePriority>
 8002174:	4602      	mov	r2, r0
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff5d 	bl	800203c <__NVIC_SetPriority>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff31 	bl	8002000 <__NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffa2 	bl	80020f8 <SysTick_Config>
 80021b4:	4603      	mov	r3, r0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f7ff feb6 	bl	8001f3c <HAL_GetTick>
 80021d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d008      	beq.n	80021f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2280      	movs	r2, #128	@ 0x80
 80021e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e052      	b.n	8002296 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0216 	bic.w	r2, r2, #22
 80021fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800220e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d103      	bne.n	8002220 <HAL_DMA_Abort+0x62>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0208 	bic.w	r2, r2, #8
 800222e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002240:	e013      	b.n	800226a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002242:	f7ff fe7b 	bl	8001f3c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b05      	cmp	r3, #5
 800224e:	d90c      	bls.n	800226a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2203      	movs	r2, #3
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e015      	b.n	8002296 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1e4      	bne.n	8002242 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	223f      	movs	r2, #63	@ 0x3f
 800227e:	409a      	lsls	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d004      	beq.n	80022bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2280      	movs	r2, #128	@ 0x80
 80022b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e00c      	b.n	80022d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2205      	movs	r2, #5
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	e159      	b.n	80025b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002300:	2201      	movs	r2, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	f040 8148 	bne.w	80025ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d005      	beq.n	8002336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	2b02      	cmp	r3, #2
 8002334:	d130      	bne.n	8002398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 0201 	and.w	r2, r3, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d017      	beq.n	80023d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d123      	bne.n	8002428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	08da      	lsrs	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3208      	adds	r2, #8
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	69b9      	ldr	r1, [r7, #24]
 8002424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a2 	beq.w	80025ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b57      	ldr	r3, [pc, #348]	@ (80025cc <HAL_GPIO_Init+0x2e8>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	4a56      	ldr	r2, [pc, #344]	@ (80025cc <HAL_GPIO_Init+0x2e8>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002478:	6453      	str	r3, [r2, #68]	@ 0x44
 800247a:	4b54      	ldr	r3, [pc, #336]	@ (80025cc <HAL_GPIO_Init+0x2e8>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002486:	4a52      	ldr	r2, [pc, #328]	@ (80025d0 <HAL_GPIO_Init+0x2ec>)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	3302      	adds	r3, #2
 800248e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a49      	ldr	r2, [pc, #292]	@ (80025d4 <HAL_GPIO_Init+0x2f0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d019      	beq.n	80024e6 <HAL_GPIO_Init+0x202>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a48      	ldr	r2, [pc, #288]	@ (80025d8 <HAL_GPIO_Init+0x2f4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_GPIO_Init+0x1fe>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a47      	ldr	r2, [pc, #284]	@ (80025dc <HAL_GPIO_Init+0x2f8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00d      	beq.n	80024de <HAL_GPIO_Init+0x1fa>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a46      	ldr	r2, [pc, #280]	@ (80025e0 <HAL_GPIO_Init+0x2fc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d007      	beq.n	80024da <HAL_GPIO_Init+0x1f6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a45      	ldr	r2, [pc, #276]	@ (80025e4 <HAL_GPIO_Init+0x300>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_GPIO_Init+0x1f2>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e008      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024d6:	2307      	movs	r3, #7
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024da:	2303      	movs	r3, #3
 80024dc:	e004      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024de:	2302      	movs	r3, #2
 80024e0:	e002      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024e6:	2300      	movs	r3, #0
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	f002 0203 	and.w	r2, r2, #3
 80024ee:	0092      	lsls	r2, r2, #2
 80024f0:	4093      	lsls	r3, r2
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f8:	4935      	ldr	r1, [pc, #212]	@ (80025d0 <HAL_GPIO_Init+0x2ec>)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002506:	4b38      	ldr	r3, [pc, #224]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252a:	4a2f      	ldr	r2, [pc, #188]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002530:	4b2d      	ldr	r3, [pc, #180]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002554:	4a24      	ldr	r2, [pc, #144]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800255a:	4b23      	ldr	r3, [pc, #140]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257e:	4a1a      	ldr	r2, [pc, #104]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002584:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a8:	4a0f      	ldr	r2, [pc, #60]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b0f      	cmp	r3, #15
 80025b8:	f67f aea2 	bls.w	8002300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3724      	adds	r7, #36	@ 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40013800 	.word	0x40013800
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40020400 	.word	0x40020400
 80025dc:	40020800 	.word	0x40020800
 80025e0:	40020c00 	.word	0x40020c00
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025fc:	787b      	ldrb	r3, [r7, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002608:	e003      	b.n	8002612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	041a      	lsls	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	619a      	str	r2, [r3, #24]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e267      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d075      	beq.n	800272a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800263e:	4b88      	ldr	r3, [pc, #544]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b04      	cmp	r3, #4
 8002648:	d00c      	beq.n	8002664 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264a:	4b85      	ldr	r3, [pc, #532]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002652:	2b08      	cmp	r3, #8
 8002654:	d112      	bne.n	800267c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002656:	4b82      	ldr	r3, [pc, #520]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002662:	d10b      	bne.n	800267c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	4b7e      	ldr	r3, [pc, #504]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d05b      	beq.n	8002728 <HAL_RCC_OscConfig+0x108>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d157      	bne.n	8002728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e242      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002684:	d106      	bne.n	8002694 <HAL_RCC_OscConfig+0x74>
 8002686:	4b76      	ldr	r3, [pc, #472]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a75      	ldr	r2, [pc, #468]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e01d      	b.n	80026d0 <HAL_RCC_OscConfig+0xb0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x98>
 800269e:	4b70      	ldr	r3, [pc, #448]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0xb0>
 80026b8:	4b69      	ldr	r3, [pc, #420]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a68      	ldr	r2, [pc, #416]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b66      	ldr	r3, [pc, #408]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a65      	ldr	r2, [pc, #404]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d013      	beq.n	8002700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fc30 	bl	8001f3c <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff fc2c 	bl	8001f3c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	@ 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e207      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0xc0>
 80026fe:	e014      	b.n	800272a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff fc1c 	bl	8001f3c <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7ff fc18 	bl	8001f3c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	@ 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1f3      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271a:	4b51      	ldr	r3, [pc, #324]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0xe8>
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d063      	beq.n	80027fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002736:	4b4a      	ldr	r3, [pc, #296]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002742:	4b47      	ldr	r3, [pc, #284]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800274a:	2b08      	cmp	r3, #8
 800274c:	d11c      	bne.n	8002788 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274e:	4b44      	ldr	r3, [pc, #272]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d116      	bne.n	8002788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275a:	4b41      	ldr	r3, [pc, #260]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_RCC_OscConfig+0x152>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e1c7      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002772:	4b3b      	ldr	r3, [pc, #236]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4937      	ldr	r1, [pc, #220]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002786:	e03a      	b.n	80027fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002790:	4b34      	ldr	r3, [pc, #208]	@ (8002864 <HAL_RCC_OscConfig+0x244>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7ff fbd1 	bl	8001f3c <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279e:	f7ff fbcd 	bl	8001f3c <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e1a8      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b28      	ldr	r3, [pc, #160]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4925      	ldr	r1, [pc, #148]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
 80027d0:	e015      	b.n	80027fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d2:	4b24      	ldr	r3, [pc, #144]	@ (8002864 <HAL_RCC_OscConfig+0x244>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7ff fbb0 	bl	8001f3c <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e0:	f7ff fbac 	bl	8001f3c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e187      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d036      	beq.n	8002878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002812:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <HAL_RCC_OscConfig+0x248>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7ff fb90 	bl	8001f3c <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002820:	f7ff fb8c 	bl	8001f3c <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e167      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002832:	4b0b      	ldr	r3, [pc, #44]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x200>
 800283e:	e01b      	b.n	8002878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002840:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <HAL_RCC_OscConfig+0x248>)
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002846:	f7ff fb79 	bl	8001f3c <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	e00e      	b.n	800286c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284e:	f7ff fb75 	bl	8001f3c <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d907      	bls.n	800286c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e150      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
 8002860:	40023800 	.word	0x40023800
 8002864:	42470000 	.word	0x42470000
 8002868:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	4b88      	ldr	r3, [pc, #544]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ea      	bne.n	800284e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8097 	beq.w	80029b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288a:	4b81      	ldr	r3, [pc, #516]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10f      	bne.n	80028b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b2:	2301      	movs	r3, #1
 80028b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b6:	4b77      	ldr	r3, [pc, #476]	@ (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d118      	bne.n	80028f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c2:	4b74      	ldr	r3, [pc, #464]	@ (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a73      	ldr	r2, [pc, #460]	@ (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ce:	f7ff fb35 	bl	8001f3c <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d6:	f7ff fb31 	bl	8001f3c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e10c      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x2ea>
 80028fc:	4b64      	ldr	r3, [pc, #400]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002900:	4a63      	ldr	r2, [pc, #396]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6713      	str	r3, [r2, #112]	@ 0x70
 8002908:	e01c      	b.n	8002944 <HAL_RCC_OscConfig+0x324>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b05      	cmp	r3, #5
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x30c>
 8002912:	4b5f      	ldr	r3, [pc, #380]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002916:	4a5e      	ldr	r2, [pc, #376]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	6713      	str	r3, [r2, #112]	@ 0x70
 800291e:	4b5c      	ldr	r3, [pc, #368]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002922:	4a5b      	ldr	r2, [pc, #364]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6713      	str	r3, [r2, #112]	@ 0x70
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0x324>
 800292c:	4b58      	ldr	r3, [pc, #352]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002930:	4a57      	ldr	r2, [pc, #348]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	6713      	str	r3, [r2, #112]	@ 0x70
 8002938:	4b55      	ldr	r3, [pc, #340]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293c:	4a54      	ldr	r2, [pc, #336]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800293e:	f023 0304 	bic.w	r3, r3, #4
 8002942:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d015      	beq.n	8002978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7ff faf6 	bl	8001f3c <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	e00a      	b.n	800296a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7ff faf2 	bl	8001f3c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0cb      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296a:	4b49      	ldr	r3, [pc, #292]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0ee      	beq.n	8002954 <HAL_RCC_OscConfig+0x334>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002978:	f7ff fae0 	bl	8001f3c <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297e:	e00a      	b.n	8002996 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002980:	f7ff fadc 	bl	8001f3c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e0b5      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002996:	4b3e      	ldr	r3, [pc, #248]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1ee      	bne.n	8002980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d105      	bne.n	80029b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a8:	4b39      	ldr	r3, [pc, #228]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	4a38      	ldr	r2, [pc, #224]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a1 	beq.w	8002b00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029be:	4b34      	ldr	r3, [pc, #208]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d05c      	beq.n	8002a84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d141      	bne.n	8002a56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b31      	ldr	r3, [pc, #196]	@ (8002a98 <HAL_RCC_OscConfig+0x478>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7ff fab0 	bl	8001f3c <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7ff faac 	bl	8001f3c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e087      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	4b27      	ldr	r3, [pc, #156]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	3b01      	subs	r3, #1
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	061b      	lsls	r3, r3, #24
 8002a22:	491b      	ldr	r1, [pc, #108]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a28:	4b1b      	ldr	r3, [pc, #108]	@ (8002a98 <HAL_RCC_OscConfig+0x478>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7ff fa85 	bl	8001f3c <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a36:	f7ff fa81 	bl	8001f3c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e05c      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a48:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x416>
 8002a54:	e054      	b.n	8002b00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a56:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <HAL_RCC_OscConfig+0x478>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff fa6e 	bl	8001f3c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7ff fa6a 	bl	8001f3c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e045      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x444>
 8002a82:	e03d      	b.n	8002b00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e038      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40007000 	.word	0x40007000
 8002a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <HAL_RCC_OscConfig+0x4ec>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d028      	beq.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d121      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d11a      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002acc:	4013      	ands	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d111      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800

08002b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0cc      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b68      	ldr	r3, [pc, #416]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d90c      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b65      	ldr	r3, [pc, #404]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b63      	ldr	r3, [pc, #396]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0b8      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b64:	4b59      	ldr	r3, [pc, #356]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a58      	ldr	r2, [pc, #352]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b7c:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4a52      	ldr	r2, [pc, #328]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b50      	ldr	r3, [pc, #320]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	494d      	ldr	r1, [pc, #308]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d044      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b47      	ldr	r3, [pc, #284]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d119      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e07f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d003      	beq.n	8002bce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	4b3f      	ldr	r3, [pc, #252]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e06f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bde:	4b3b      	ldr	r3, [pc, #236]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e067      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bee:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4934      	ldr	r1, [pc, #208]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c00:	f7ff f99c 	bl	8001f3c <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c08:	f7ff f998 	bl	8001f3c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e04f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 020c 	and.w	r2, r3, #12
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1eb      	bne.n	8002c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b25      	ldr	r3, [pc, #148]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d20c      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b22      	ldr	r3, [pc, #136]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b20      	ldr	r3, [pc, #128]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e032      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c64:	4b19      	ldr	r3, [pc, #100]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4916      	ldr	r1, [pc, #88]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c82:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	490e      	ldr	r1, [pc, #56]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c96:	f000 f821 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	490a      	ldr	r1, [pc, #40]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca8:	5ccb      	ldrb	r3, [r1, r3]
 8002caa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cae:	4a09      	ldr	r2, [pc, #36]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cb2:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff f8fc 	bl	8001eb4 <HAL_InitTick>

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023c00 	.word	0x40023c00
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	08008210 	.word	0x08008210
 8002cd4:	20000000 	.word	0x20000000
 8002cd8:	20000004 	.word	0x20000004

08002cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce0:	b090      	sub	sp, #64	@ 0x40
 8002ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf4:	4b59      	ldr	r3, [pc, #356]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d00d      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x40>
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	f200 80a1 	bhi.w	8002e48 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0x34>
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d0e:	e09b      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d10:	4b53      	ldr	r3, [pc, #332]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d14:	e09b      	b.n	8002e4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d16:	4b53      	ldr	r3, [pc, #332]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d1a:	e098      	b.n	8002e4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d1c:	4b4f      	ldr	r3, [pc, #316]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d24:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d26:	4b4d      	ldr	r3, [pc, #308]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d028      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d32:	4b4a      	ldr	r3, [pc, #296]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	099b      	lsrs	r3, r3, #6
 8002d38:	2200      	movs	r2, #0
 8002d3a:	623b      	str	r3, [r7, #32]
 8002d3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d44:	2100      	movs	r1, #0
 8002d46:	4b47      	ldr	r3, [pc, #284]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d48:	fb03 f201 	mul.w	r2, r3, r1
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	fb00 f303 	mul.w	r3, r0, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	4a43      	ldr	r2, [pc, #268]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d56:	fba0 1202 	umull	r1, r2, r0, r2
 8002d5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d62:	4413      	add	r3, r2
 8002d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d68:	2200      	movs	r2, #0
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	61fa      	str	r2, [r7, #28]
 8002d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d76:	f7fd ff67 	bl	8000c48 <__aeabi_uldivmod>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4613      	mov	r3, r2
 8002d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d82:	e053      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d84:	4b35      	ldr	r3, [pc, #212]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	617a      	str	r2, [r7, #20]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d96:	f04f 0b00 	mov.w	fp, #0
 8002d9a:	4652      	mov	r2, sl
 8002d9c:	465b      	mov	r3, fp
 8002d9e:	f04f 0000 	mov.w	r0, #0
 8002da2:	f04f 0100 	mov.w	r1, #0
 8002da6:	0159      	lsls	r1, r3, #5
 8002da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dac:	0150      	lsls	r0, r2, #5
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	ebb2 080a 	subs.w	r8, r2, sl
 8002db6:	eb63 090b 	sbc.w	r9, r3, fp
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dce:	ebb2 0408 	subs.w	r4, r2, r8
 8002dd2:	eb63 0509 	sbc.w	r5, r3, r9
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	00eb      	lsls	r3, r5, #3
 8002de0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002de4:	00e2      	lsls	r2, r4, #3
 8002de6:	4614      	mov	r4, r2
 8002de8:	461d      	mov	r5, r3
 8002dea:	eb14 030a 	adds.w	r3, r4, sl
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	eb45 030b 	adc.w	r3, r5, fp
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e02:	4629      	mov	r1, r5
 8002e04:	028b      	lsls	r3, r1, #10
 8002e06:	4621      	mov	r1, r4
 8002e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	028a      	lsls	r2, r1, #10
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e16:	2200      	movs	r2, #0
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	60fa      	str	r2, [r7, #12]
 8002e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e20:	f7fd ff12 	bl	8000c48 <__aeabi_uldivmod>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4613      	mov	r3, r2
 8002e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	3301      	adds	r3, #1
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e46:	e002      	b.n	8002e4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e48:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3740      	adds	r7, #64	@ 0x40
 8002e54:	46bd      	mov	sp, r7
 8002e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	00f42400 	.word	0x00f42400
 8002e64:	017d7840 	.word	0x017d7840

08002e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e6c:	4b03      	ldr	r3, [pc, #12]	@ (8002e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000000 	.word	0x20000000

08002e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e84:	f7ff fff0 	bl	8002e68 <HAL_RCC_GetHCLKFreq>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	0a9b      	lsrs	r3, r3, #10
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	4903      	ldr	r1, [pc, #12]	@ (8002ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e96:	5ccb      	ldrb	r3, [r1, r3]
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	08008220 	.word	0x08008220

08002ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002eac:	f7ff ffdc 	bl	8002e68 <HAL_RCC_GetHCLKFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b05      	ldr	r3, [pc, #20]	@ (8002ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	0b5b      	lsrs	r3, r3, #13
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	4903      	ldr	r1, [pc, #12]	@ (8002ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	08008220 	.word	0x08008220

08002ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e041      	b.n	8002f66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fe fd56 	bl	80019a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4610      	mov	r0, r2
 8002f10:	f000 fcce 	bl	80038b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d001      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e044      	b.n	8003012 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8003020 <HAL_TIM_Base_Start_IT+0xb0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d018      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x6c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb2:	d013      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x6c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8003024 <HAL_TIM_Base_Start_IT+0xb4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00e      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x6c>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a19      	ldr	r2, [pc, #100]	@ (8003028 <HAL_TIM_Base_Start_IT+0xb8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x6c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a17      	ldr	r2, [pc, #92]	@ (800302c <HAL_TIM_Base_Start_IT+0xbc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x6c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a16      	ldr	r2, [pc, #88]	@ (8003030 <HAL_TIM_Base_Start_IT+0xc0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d111      	bne.n	8003000 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d010      	beq.n	8003010 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0201 	orr.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffe:	e007      	b.n	8003010 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40010000 	.word	0x40010000
 8003024:	40000400 	.word	0x40000400
 8003028:	40000800 	.word	0x40000800
 800302c:	40000c00 	.word	0x40000c00
 8003030:	40014000 	.word	0x40014000

08003034 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6a1a      	ldr	r2, [r3, #32]
 8003052:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10f      	bne.n	800307c <HAL_TIM_Base_Stop_IT+0x48>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6a1a      	ldr	r2, [r3, #32]
 8003062:	f240 4344 	movw	r3, #1092	@ 0x444
 8003066:	4013      	ands	r3, r2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d107      	bne.n	800307c <HAL_TIM_Base_Stop_IT+0x48>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0201 	bic.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e041      	b.n	8003128 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f839 	bl	8003130 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3304      	adds	r3, #4
 80030ce:	4619      	mov	r1, r3
 80030d0:	4610      	mov	r0, r2
 80030d2:	f000 fbed 	bl	80038b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_TIM_PWM_Start+0x24>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e022      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b04      	cmp	r3, #4
 800316c:	d109      	bne.n	8003182 <HAL_TIM_PWM_Start+0x3e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	bf14      	ite	ne
 800317a:	2301      	movne	r3, #1
 800317c:	2300      	moveq	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	e015      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d109      	bne.n	800319c <HAL_TIM_PWM_Start+0x58>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e008      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e068      	b.n	8003288 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_PWM_Start+0x82>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031c4:	e013      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start+0x92>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031d4:	e00b      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_PWM_Start+0xa2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031e4:	e003      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2201      	movs	r2, #1
 80031f4:	6839      	ldr	r1, [r7, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fe0c 	bl	8003e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a23      	ldr	r2, [pc, #140]	@ (8003290 <HAL_TIM_PWM_Start+0x14c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d107      	bne.n	8003216 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003214:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1d      	ldr	r2, [pc, #116]	@ (8003290 <HAL_TIM_PWM_Start+0x14c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d018      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003228:	d013      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a19      	ldr	r2, [pc, #100]	@ (8003294 <HAL_TIM_PWM_Start+0x150>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00e      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <HAL_TIM_PWM_Start+0x154>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d009      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a16      	ldr	r2, [pc, #88]	@ (800329c <HAL_TIM_PWM_Start+0x158>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d004      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a14      	ldr	r2, [pc, #80]	@ (80032a0 <HAL_TIM_PWM_Start+0x15c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d111      	bne.n	8003276 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b06      	cmp	r3, #6
 8003262:	d010      	beq.n	8003286 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	e007      	b.n	8003286 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40010000 	.word	0x40010000
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800
 800329c:	40000c00 	.word	0x40000c00
 80032a0:	40014000 	.word	0x40014000

080032a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2200      	movs	r2, #0
 80032b4:	6839      	ldr	r1, [r7, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fdac 	bl	8003e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a29      	ldr	r2, [pc, #164]	@ (8003368 <HAL_TIM_PWM_Stop+0xc4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d117      	bne.n	80032f6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a1a      	ldr	r2, [r3, #32]
 80032cc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10f      	bne.n	80032f6 <HAL_TIM_PWM_Stop+0x52>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6a1a      	ldr	r2, [r3, #32]
 80032dc:	f240 4344 	movw	r3, #1092	@ 0x444
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d107      	bne.n	80032f6 <HAL_TIM_PWM_Stop+0x52>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6a1a      	ldr	r2, [r3, #32]
 80032fc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <HAL_TIM_PWM_Stop+0x82>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a1a      	ldr	r2, [r3, #32]
 800330c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d107      	bne.n	8003326 <HAL_TIM_PWM_Stop+0x82>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d104      	bne.n	8003336 <HAL_TIM_PWM_Stop+0x92>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003334:	e013      	b.n	800335e <HAL_TIM_PWM_Stop+0xba>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b04      	cmp	r3, #4
 800333a:	d104      	bne.n	8003346 <HAL_TIM_PWM_Stop+0xa2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003344:	e00b      	b.n	800335e <HAL_TIM_PWM_Stop+0xba>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d104      	bne.n	8003356 <HAL_TIM_PWM_Stop+0xb2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003354:	e003      	b.n	800335e <HAL_TIM_PWM_Stop+0xba>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40010000 	.word	0x40010000

0800336c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d020      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01b      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0202 	mvn.w	r2, #2
 80033a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fa5b 	bl	8003872 <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fa4d 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fa5e 	bl	8003886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d020      	beq.n	800341c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01b      	beq.n	800341c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0204 	mvn.w	r2, #4
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2202      	movs	r2, #2
 80033f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa35 	bl	8003872 <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fa27 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fa38 	bl	8003886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d020      	beq.n	8003468 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01b      	beq.n	8003468 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0208 	mvn.w	r2, #8
 8003438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2204      	movs	r2, #4
 800343e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa0f 	bl	8003872 <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa01 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fa12 	bl	8003886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b00      	cmp	r3, #0
 8003470:	d020      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01b      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0210 	mvn.w	r2, #16
 8003484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2208      	movs	r2, #8
 800348a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f9e9 	bl	8003872 <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f9db 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f9ec 	bl	8003886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00c      	beq.n	80034d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d007      	beq.n	80034d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0201 	mvn.w	r2, #1
 80034d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fe f982 	bl	80017dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00c      	beq.n	80034fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fd2a 	bl	8003f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00c      	beq.n	8003520 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9bd 	bl	800389a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00c      	beq.n	8003544 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d007      	beq.n	8003544 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0220 	mvn.w	r2, #32
 800353c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fcfc 	bl	8003f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003566:	2302      	movs	r3, #2
 8003568:	e0ae      	b.n	80036c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b0c      	cmp	r3, #12
 8003576:	f200 809f 	bhi.w	80036b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800357a:	a201      	add	r2, pc, #4	@ (adr r2, 8003580 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	080035b5 	.word	0x080035b5
 8003584:	080036b9 	.word	0x080036b9
 8003588:	080036b9 	.word	0x080036b9
 800358c:	080036b9 	.word	0x080036b9
 8003590:	080035f5 	.word	0x080035f5
 8003594:	080036b9 	.word	0x080036b9
 8003598:	080036b9 	.word	0x080036b9
 800359c:	080036b9 	.word	0x080036b9
 80035a0:	08003637 	.word	0x08003637
 80035a4:	080036b9 	.word	0x080036b9
 80035a8:	080036b9 	.word	0x080036b9
 80035ac:	080036b9 	.word	0x080036b9
 80035b0:	08003677 	.word	0x08003677
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fa04 	bl	80039c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0208 	orr.w	r2, r2, #8
 80035ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0204 	bic.w	r2, r2, #4
 80035de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6999      	ldr	r1, [r3, #24]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	619a      	str	r2, [r3, #24]
      break;
 80035f2:	e064      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fa4a 	bl	8003a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800360e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800361e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6999      	ldr	r1, [r3, #24]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	021a      	lsls	r2, r3, #8
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	619a      	str	r2, [r3, #24]
      break;
 8003634:	e043      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fa95 	bl	8003b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0208 	orr.w	r2, r2, #8
 8003650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0204 	bic.w	r2, r2, #4
 8003660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69d9      	ldr	r1, [r3, #28]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	61da      	str	r2, [r3, #28]
      break;
 8003674:	e023      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fadf 	bl	8003c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69d9      	ldr	r1, [r3, #28]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	021a      	lsls	r2, r3, #8
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	61da      	str	r2, [r3, #28]
      break;
 80036b6:	e002      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	75fb      	strb	r3, [r7, #23]
      break;
 80036bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_TIM_ConfigClockSource+0x1c>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e0b4      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x186>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800370a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003724:	d03e      	beq.n	80037a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800372a:	f200 8087 	bhi.w	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003732:	f000 8086 	beq.w	8003842 <HAL_TIM_ConfigClockSource+0x172>
 8003736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800373a:	d87f      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800373c:	2b70      	cmp	r3, #112	@ 0x70
 800373e:	d01a      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0xa6>
 8003740:	2b70      	cmp	r3, #112	@ 0x70
 8003742:	d87b      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 8003744:	2b60      	cmp	r3, #96	@ 0x60
 8003746:	d050      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0x11a>
 8003748:	2b60      	cmp	r3, #96	@ 0x60
 800374a:	d877      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800374c:	2b50      	cmp	r3, #80	@ 0x50
 800374e:	d03c      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0xfa>
 8003750:	2b50      	cmp	r3, #80	@ 0x50
 8003752:	d873      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 8003754:	2b40      	cmp	r3, #64	@ 0x40
 8003756:	d058      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x13a>
 8003758:	2b40      	cmp	r3, #64	@ 0x40
 800375a:	d86f      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b30      	cmp	r3, #48	@ 0x30
 800375e:	d064      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003760:	2b30      	cmp	r3, #48	@ 0x30
 8003762:	d86b      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b20      	cmp	r3, #32
 8003766:	d060      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003768:	2b20      	cmp	r3, #32
 800376a:	d867      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05c      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003770:	2b10      	cmp	r3, #16
 8003772:	d05a      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003774:	e062      	b.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003786:	f000 fb25 	bl	8003dd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	609a      	str	r2, [r3, #8]
      break;
 80037a2:	e04f      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037b4:	f000 fb0e 	bl	8003dd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037c6:	609a      	str	r2, [r3, #8]
      break;
 80037c8:	e03c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d6:	461a      	mov	r2, r3
 80037d8:	f000 fa82 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2150      	movs	r1, #80	@ 0x50
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fadb 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 80037e8:	e02c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037f6:	461a      	mov	r2, r3
 80037f8:	f000 faa1 	bl	8003d3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2160      	movs	r1, #96	@ 0x60
 8003802:	4618      	mov	r0, r3
 8003804:	f000 facb 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 8003808:	e01c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003816:	461a      	mov	r2, r3
 8003818:	f000 fa62 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2140      	movs	r1, #64	@ 0x40
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fabb 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 8003828:	e00c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f000 fab2 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 800383a:	e003      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      break;
 8003840:	e000      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a3a      	ldr	r2, [pc, #232]	@ (80039ac <TIM_Base_SetConfig+0xfc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00f      	beq.n	80038e8 <TIM_Base_SetConfig+0x38>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ce:	d00b      	beq.n	80038e8 <TIM_Base_SetConfig+0x38>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a37      	ldr	r2, [pc, #220]	@ (80039b0 <TIM_Base_SetConfig+0x100>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_Base_SetConfig+0x38>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a36      	ldr	r2, [pc, #216]	@ (80039b4 <TIM_Base_SetConfig+0x104>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0x38>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a35      	ldr	r2, [pc, #212]	@ (80039b8 <TIM_Base_SetConfig+0x108>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d108      	bne.n	80038fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a2b      	ldr	r2, [pc, #172]	@ (80039ac <TIM_Base_SetConfig+0xfc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01b      	beq.n	800393a <TIM_Base_SetConfig+0x8a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003908:	d017      	beq.n	800393a <TIM_Base_SetConfig+0x8a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a28      	ldr	r2, [pc, #160]	@ (80039b0 <TIM_Base_SetConfig+0x100>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <TIM_Base_SetConfig+0x8a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a27      	ldr	r2, [pc, #156]	@ (80039b4 <TIM_Base_SetConfig+0x104>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00f      	beq.n	800393a <TIM_Base_SetConfig+0x8a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a26      	ldr	r2, [pc, #152]	@ (80039b8 <TIM_Base_SetConfig+0x108>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00b      	beq.n	800393a <TIM_Base_SetConfig+0x8a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a25      	ldr	r2, [pc, #148]	@ (80039bc <TIM_Base_SetConfig+0x10c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d007      	beq.n	800393a <TIM_Base_SetConfig+0x8a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a24      	ldr	r2, [pc, #144]	@ (80039c0 <TIM_Base_SetConfig+0x110>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d003      	beq.n	800393a <TIM_Base_SetConfig+0x8a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a23      	ldr	r2, [pc, #140]	@ (80039c4 <TIM_Base_SetConfig+0x114>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d108      	bne.n	800394c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a0e      	ldr	r2, [pc, #56]	@ (80039ac <TIM_Base_SetConfig+0xfc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d103      	bne.n	8003980 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b01      	cmp	r3, #1
 8003990:	d105      	bne.n	800399e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f023 0201 	bic.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	611a      	str	r2, [r3, #16]
  }
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40010000 	.word	0x40010000
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40000c00 	.word	0x40000c00
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40014400 	.word	0x40014400
 80039c4:	40014800 	.word	0x40014800

080039c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f023 0201 	bic.w	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f023 0302 	bic.w	r3, r3, #2
 8003a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a90 <TIM_OC1_SetConfig+0xc8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10c      	bne.n	8003a3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0308 	bic.w	r3, r3, #8
 8003a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 0304 	bic.w	r3, r3, #4
 8003a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a13      	ldr	r2, [pc, #76]	@ (8003a90 <TIM_OC1_SetConfig+0xc8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d111      	bne.n	8003a6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	621a      	str	r2, [r3, #32]
}
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	40010000 	.word	0x40010000

08003a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f023 0210 	bic.w	r2, r3, #16
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f023 0320 	bic.w	r3, r3, #32
 8003ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a1e      	ldr	r2, [pc, #120]	@ (8003b68 <TIM_OC2_SetConfig+0xd4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d10d      	bne.n	8003b10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a15      	ldr	r2, [pc, #84]	@ (8003b68 <TIM_OC2_SetConfig+0xd4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d113      	bne.n	8003b40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40010000 	.word	0x40010000

08003b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c3c <TIM_OC3_SetConfig+0xd0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10d      	bne.n	8003be6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a14      	ldr	r2, [pc, #80]	@ (8003c3c <TIM_OC3_SetConfig+0xd0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d113      	bne.n	8003c16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	621a      	str	r2, [r3, #32]
}
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40010000 	.word	0x40010000

08003c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	031b      	lsls	r3, r3, #12
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a10      	ldr	r2, [pc, #64]	@ (8003cdc <TIM_OC4_SetConfig+0x9c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d109      	bne.n	8003cb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	019b      	lsls	r3, r3, #6
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40010000 	.word	0x40010000

08003ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 030a 	bic.w	r3, r3, #10
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b087      	sub	sp, #28
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f023 0210 	bic.w	r2, r3, #16
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	031b      	lsls	r3, r3, #12
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f043 0307 	orr.w	r3, r3, #7
 8003dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	609a      	str	r2, [r3, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	609a      	str	r2, [r3, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	2201      	movs	r2, #1
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a1a      	ldr	r2, [r3, #32]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	401a      	ands	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1a      	ldr	r2, [r3, #32]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	621a      	str	r2, [r3, #32]
}
 8003e52:	bf00      	nop
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e050      	b.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d018      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec4:	d013      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a18      	ldr	r2, [pc, #96]	@ (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00e      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a16      	ldr	r2, [pc, #88]	@ (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d009      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a15      	ldr	r2, [pc, #84]	@ (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a13      	ldr	r2, [pc, #76]	@ (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d10c      	bne.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40000800 	.word	0x40000800
 8003f34:	40000c00 	.word	0x40000c00
 8003f38:	40014000 	.word	0x40014000

08003f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e042      	b.n	8003ffc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd fd88 	bl	8001aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2224      	movs	r2, #36	@ 0x24
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 fe5f 	bl	8004c6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	@ 0x28
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b20      	cmp	r3, #32
 8004022:	d175      	bne.n	8004110 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_UART_Transmit+0x2c>
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e06e      	b.n	8004112 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2221      	movs	r2, #33	@ 0x21
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004042:	f7fd ff7b 	bl	8001f3c <HAL_GetTick>
 8004046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	88fa      	ldrh	r2, [r7, #6]
 8004052:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800405c:	d108      	bne.n	8004070 <HAL_UART_Transmit+0x6c>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d104      	bne.n	8004070 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	e003      	b.n	8004078 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004074:	2300      	movs	r3, #0
 8004076:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004078:	e02e      	b.n	80040d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2200      	movs	r2, #0
 8004082:	2180      	movs	r1, #128	@ 0x80
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fbc1 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e03a      	b.n	8004112 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	3302      	adds	r3, #2
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	e007      	b.n	80040ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	3301      	adds	r3, #1
 80040c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1cb      	bne.n	800407a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2200      	movs	r2, #0
 80040ea:	2140      	movs	r1, #64	@ 0x40
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 fb8d 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e006      	b.n	8004112 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	e000      	b.n	8004112 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004110:	2302      	movs	r3, #2
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b08a      	sub	sp, #40	@ 0x28
 800411e:	af02      	add	r7, sp, #8
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	603b      	str	r3, [r7, #0]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b20      	cmp	r3, #32
 8004138:	f040 8081 	bne.w	800423e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <HAL_UART_Receive+0x2e>
 8004142:	88fb      	ldrh	r3, [r7, #6]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e079      	b.n	8004240 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2222      	movs	r2, #34	@ 0x22
 8004156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004160:	f7fd feec 	bl	8001f3c <HAL_GetTick>
 8004164:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	88fa      	ldrh	r2, [r7, #6]
 800416a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	88fa      	ldrh	r2, [r7, #6]
 8004170:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417a:	d108      	bne.n	800418e <HAL_UART_Receive+0x74>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d104      	bne.n	800418e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004184:	2300      	movs	r3, #0
 8004186:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	61bb      	str	r3, [r7, #24]
 800418c:	e003      	b.n	8004196 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004192:	2300      	movs	r3, #0
 8004194:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004196:	e047      	b.n	8004228 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2200      	movs	r2, #0
 80041a0:	2120      	movs	r1, #32
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fb32 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e042      	b.n	8004240 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10c      	bne.n	80041da <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	3302      	adds	r3, #2
 80041d6:	61bb      	str	r3, [r7, #24]
 80041d8:	e01f      	b.n	800421a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e2:	d007      	beq.n	80041f4 <HAL_UART_Receive+0xda>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <HAL_UART_Receive+0xe8>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d106      	bne.n	8004202 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	e008      	b.n	8004214 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800420e:	b2da      	uxtb	r2, r3
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	3301      	adds	r3, #1
 8004218:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1b2      	bne.n	8004198 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e000      	b.n	8004240 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
  }
}
 8004240:	4618      	mov	r0, r3
 8004242:	3720      	adds	r7, #32
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b20      	cmp	r3, #32
 8004260:	d112      	bne.n	8004288 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <HAL_UART_Receive_IT+0x26>
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e00b      	b.n	800428a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	461a      	mov	r2, r3
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 fb1d 	bl	80048be <UART_Start_Receive_IT>
 8004284:	4603      	mov	r3, r0
 8004286:	e000      	b.n	800428a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b0ba      	sub	sp, #232	@ 0xe8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80042d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <HAL_UART_IRQHandler+0x66>
 80042e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fbfc 	bl	8004af0 <UART_Receive_IT>
      return;
 80042f8:	e25b      	b.n	80047b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 80de 	beq.w	80044c0 <HAL_UART_IRQHandler+0x22c>
 8004304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d106      	bne.n	800431e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004314:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80d1 	beq.w	80044c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_UART_IRQHandler+0xae>
 800432a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800432e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433a:	f043 0201 	orr.w	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <HAL_UART_IRQHandler+0xd2>
 800434e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435e:	f043 0202 	orr.w	r2, r3, #2
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_UART_IRQHandler+0xf6>
 8004372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004382:	f043 0204 	orr.w	r2, r3, #4
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800438a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d011      	beq.n	80043ba <HAL_UART_IRQHandler+0x126>
 8004396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b2:	f043 0208 	orr.w	r2, r3, #8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 81f2 	beq.w	80047a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_UART_IRQHandler+0x14e>
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fb87 	bl	8004af0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ec:	2b40      	cmp	r3, #64	@ 0x40
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d103      	bne.n	800440e <HAL_UART_IRQHandler+0x17a>
 8004406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d04f      	beq.n	80044ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa8f 	bl	8004932 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441e:	2b40      	cmp	r3, #64	@ 0x40
 8004420:	d141      	bne.n	80044a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3314      	adds	r3, #20
 8004428:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004438:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800443c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3314      	adds	r3, #20
 800444a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800444e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004452:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800445a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1d9      	bne.n	8004422 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d013      	beq.n	800449e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447a:	4a7e      	ldr	r2, [pc, #504]	@ (8004674 <HAL_UART_IRQHandler+0x3e0>)
 800447c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd ff0b 	bl	800229e <HAL_DMA_Abort_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d016      	beq.n	80044bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004498:	4610      	mov	r0, r2
 800449a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449c:	e00e      	b.n	80044bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f99e 	bl	80047e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	e00a      	b.n	80044bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f99a 	bl	80047e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ac:	e006      	b.n	80044bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f996 	bl	80047e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80044ba:	e175      	b.n	80047a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044bc:	bf00      	nop
    return;
 80044be:	e173      	b.n	80047a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	f040 814f 	bne.w	8004768 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8148 	beq.w	8004768 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8141 	beq.w	8004768 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044e6:	2300      	movs	r3, #0
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004506:	2b40      	cmp	r3, #64	@ 0x40
 8004508:	f040 80b6 	bne.w	8004678 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004518:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8145 	beq.w	80047ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800452a:	429a      	cmp	r2, r3
 800452c:	f080 813e 	bcs.w	80047ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004536:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004542:	f000 8088 	beq.w	8004656 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	330c      	adds	r3, #12
 800454c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800455c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	330c      	adds	r3, #12
 800456e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004572:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004576:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800457e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800458a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1d9      	bne.n	8004546 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3314      	adds	r3, #20
 8004598:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e1      	bne.n	8004592 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3314      	adds	r3, #20
 80045d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3314      	adds	r3, #20
 80045ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e3      	bne.n	80045ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004624:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004626:	f023 0310 	bic.w	r3, r3, #16
 800462a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004638:	65ba      	str	r2, [r7, #88]	@ 0x58
 800463a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800463e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e3      	bne.n	8004614 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004650:	4618      	mov	r0, r3
 8004652:	f7fd fdb4 	bl	80021be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004664:	b29b      	uxth	r3, r3
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	b29b      	uxth	r3, r3
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f8c1 	bl	80047f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004672:	e09b      	b.n	80047ac <HAL_UART_IRQHandler+0x518>
 8004674:	080049f9 	.word	0x080049f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004680:	b29b      	uxth	r3, r3
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 808e 	beq.w	80047b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004694:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8089 	beq.w	80047b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	330c      	adds	r3, #12
 80046a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	330c      	adds	r3, #12
 80046be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80046c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80046c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e3      	bne.n	800469e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3314      	adds	r3, #20
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	623b      	str	r3, [r7, #32]
   return(result);
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	f023 0301 	bic.w	r3, r3, #1
 80046ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3314      	adds	r3, #20
 80046f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80046fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e3      	bne.n	80046d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	330c      	adds	r3, #12
 8004722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	e853 3f00 	ldrex	r3, [r3]
 800472a:	60fb      	str	r3, [r7, #12]
   return(result);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0310 	bic.w	r3, r3, #16
 8004732:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004740:	61fa      	str	r2, [r7, #28]
 8004742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	69b9      	ldr	r1, [r7, #24]
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	617b      	str	r3, [r7, #20]
   return(result);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e3      	bne.n	800471c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800475a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800475e:	4619      	mov	r1, r3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f847 	bl	80047f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004766:	e023      	b.n	80047b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800476c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004770:	2b00      	cmp	r3, #0
 8004772:	d009      	beq.n	8004788 <HAL_UART_IRQHandler+0x4f4>
 8004774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f94d 	bl	8004a20 <UART_Transmit_IT>
    return;
 8004786:	e014      	b.n	80047b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800478c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00e      	beq.n	80047b2 <HAL_UART_IRQHandler+0x51e>
 8004794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f98d 	bl	8004ac0 <UART_EndTransmit_IT>
    return;
 80047a6:	e004      	b.n	80047b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80047a8:	bf00      	nop
 80047aa:	e002      	b.n	80047b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80047b0:	bf00      	nop
  }
}
 80047b2:	37e8      	adds	r7, #232	@ 0xe8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481c:	e03b      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d037      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004826:	f7fd fb89 	bl	8001f3c <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	6a3a      	ldr	r2, [r7, #32]
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <UART_WaitOnFlagUntilTimeout+0x30>
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e03a      	b.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	d023      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0x8a>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b80      	cmp	r3, #128	@ 0x80
 8004852:	d020      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b40      	cmp	r3, #64	@ 0x40
 8004858:	d01d      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b08      	cmp	r3, #8
 8004866:	d116      	bne.n	8004896 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f857 	bl	8004932 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2208      	movs	r2, #8
 8004888:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e00f      	b.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4013      	ands	r3, r2
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d0b4      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048be:	b480      	push	{r7}
 80048c0:	b085      	sub	sp, #20
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	4613      	mov	r3, r2
 80048ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	88fa      	ldrh	r2, [r7, #6]
 80048d6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	88fa      	ldrh	r2, [r7, #6]
 80048dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2222      	movs	r2, #34	@ 0x22
 80048e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d007      	beq.n	8004904 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004902:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0220 	orr.w	r2, r2, #32
 8004922:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004932:	b480      	push	{r7}
 8004934:	b095      	sub	sp, #84	@ 0x54
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800494a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	330c      	adds	r3, #12
 8004958:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800495a:	643a      	str	r2, [r7, #64]	@ 0x40
 800495c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004960:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e5      	bne.n	800493a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3314      	adds	r3, #20
 8004974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	61fb      	str	r3, [r7, #28]
   return(result);
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f023 0301 	bic.w	r3, r3, #1
 8004984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3314      	adds	r3, #20
 800498c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800498e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004990:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e5      	bne.n	800496e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d119      	bne.n	80049de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f023 0310 	bic.w	r3, r3, #16
 80049c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	330c      	adds	r3, #12
 80049c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049ca:	61ba      	str	r2, [r7, #24]
 80049cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6979      	ldr	r1, [r7, #20]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	613b      	str	r3, [r7, #16]
   return(result);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e5      	bne.n	80049aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049ec:	bf00      	nop
 80049ee:	3754      	adds	r7, #84	@ 0x54
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f7ff fee4 	bl	80047e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b21      	cmp	r3, #33	@ 0x21
 8004a32:	d13e      	bne.n	8004ab2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a3c:	d114      	bne.n	8004a68 <UART_Transmit_IT+0x48>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d110      	bne.n	8004a68 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	1c9a      	adds	r2, r3, #2
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	621a      	str	r2, [r3, #32]
 8004a66:	e008      	b.n	8004a7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	1c59      	adds	r1, r3, #1
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6211      	str	r1, [r2, #32]
 8004a72:	781a      	ldrb	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	4619      	mov	r1, r3
 8004a88:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10f      	bne.n	8004aae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004aac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e000      	b.n	8004ab4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ab2:	2302      	movs	r3, #2
  }
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ad6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff fe69 	bl	80047b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08c      	sub	sp, #48	@ 0x30
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b22      	cmp	r3, #34	@ 0x22
 8004b02:	f040 80ae 	bne.w	8004c62 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b0e:	d117      	bne.n	8004b40 <UART_Receive_IT+0x50>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d113      	bne.n	8004b40 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b20:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	1c9a      	adds	r2, r3, #2
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b3e:	e026      	b.n	8004b8e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b52:	d007      	beq.n	8004b64 <UART_Receive_IT+0x74>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <UART_Receive_IT+0x82>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d106      	bne.n	8004b72 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	e008      	b.n	8004b84 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b82:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d15d      	bne.n	8004c5e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0220 	bic.w	r2, r2, #32
 8004bb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695a      	ldr	r2, [r3, #20]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0201 	bic.w	r2, r2, #1
 8004bd0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d135      	bne.n	8004c54 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f023 0310 	bic.w	r3, r3, #16
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0e:	623a      	str	r2, [r7, #32]
 8004c10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	69f9      	ldr	r1, [r7, #28]
 8004c14:	6a3a      	ldr	r2, [r7, #32]
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e5      	bne.n	8004bee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	d10a      	bne.n	8004c46 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff fdd1 	bl	80047f4 <HAL_UARTEx_RxEventCallback>
 8004c52:	e002      	b.n	8004c5a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff fdb9 	bl	80047cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e002      	b.n	8004c64 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e000      	b.n	8004c64 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c62:	2302      	movs	r3, #2
  }
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3730      	adds	r7, #48	@ 0x30
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c70:	b0c0      	sub	sp, #256	@ 0x100
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c88:	68d9      	ldr	r1, [r3, #12]
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	ea40 0301 	orr.w	r3, r0, r1
 8004c94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004cc4:	f021 010c 	bic.w	r1, r1, #12
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce6:	6999      	ldr	r1, [r3, #24]
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	ea40 0301 	orr.w	r3, r0, r1
 8004cf2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4b8f      	ldr	r3, [pc, #572]	@ (8004f38 <UART_SetConfig+0x2cc>)
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d005      	beq.n	8004d0c <UART_SetConfig+0xa0>
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4b8d      	ldr	r3, [pc, #564]	@ (8004f3c <UART_SetConfig+0x2d0>)
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d104      	bne.n	8004d16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d0c:	f7fe f8cc 	bl	8002ea8 <HAL_RCC_GetPCLK2Freq>
 8004d10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d14:	e003      	b.n	8004d1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d16:	f7fe f8b3 	bl	8002e80 <HAL_RCC_GetPCLK1Freq>
 8004d1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d28:	f040 810c 	bne.w	8004f44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d30:	2200      	movs	r2, #0
 8004d32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d3e:	4622      	mov	r2, r4
 8004d40:	462b      	mov	r3, r5
 8004d42:	1891      	adds	r1, r2, r2
 8004d44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d46:	415b      	adcs	r3, r3
 8004d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d4e:	4621      	mov	r1, r4
 8004d50:	eb12 0801 	adds.w	r8, r2, r1
 8004d54:	4629      	mov	r1, r5
 8004d56:	eb43 0901 	adc.w	r9, r3, r1
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d6e:	4690      	mov	r8, r2
 8004d70:	4699      	mov	r9, r3
 8004d72:	4623      	mov	r3, r4
 8004d74:	eb18 0303 	adds.w	r3, r8, r3
 8004d78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d7c:	462b      	mov	r3, r5
 8004d7e:	eb49 0303 	adc.w	r3, r9, r3
 8004d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	18db      	adds	r3, r3, r3
 8004d9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004da0:	4613      	mov	r3, r2
 8004da2:	eb42 0303 	adc.w	r3, r2, r3
 8004da6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004da8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004dac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004db0:	f7fb ff4a 	bl	8000c48 <__aeabi_uldivmod>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4b61      	ldr	r3, [pc, #388]	@ (8004f40 <UART_SetConfig+0x2d4>)
 8004dba:	fba3 2302 	umull	r2, r3, r3, r2
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	011c      	lsls	r4, r3, #4
 8004dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dcc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004dd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	1891      	adds	r1, r2, r2
 8004dda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ddc:	415b      	adcs	r3, r3
 8004dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004de4:	4641      	mov	r1, r8
 8004de6:	eb12 0a01 	adds.w	sl, r2, r1
 8004dea:	4649      	mov	r1, r9
 8004dec:	eb43 0b01 	adc.w	fp, r3, r1
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e04:	4692      	mov	sl, r2
 8004e06:	469b      	mov	fp, r3
 8004e08:	4643      	mov	r3, r8
 8004e0a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e12:	464b      	mov	r3, r9
 8004e14:	eb4b 0303 	adc.w	r3, fp, r3
 8004e18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e30:	460b      	mov	r3, r1
 8004e32:	18db      	adds	r3, r3, r3
 8004e34:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e36:	4613      	mov	r3, r2
 8004e38:	eb42 0303 	adc.w	r3, r2, r3
 8004e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e46:	f7fb feff 	bl	8000c48 <__aeabi_uldivmod>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	4b3b      	ldr	r3, [pc, #236]	@ (8004f40 <UART_SetConfig+0x2d4>)
 8004e52:	fba3 2301 	umull	r2, r3, r3, r1
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	2264      	movs	r2, #100	@ 0x64
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	1acb      	subs	r3, r1, r3
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e66:	4b36      	ldr	r3, [pc, #216]	@ (8004f40 <UART_SetConfig+0x2d4>)
 8004e68:	fba3 2302 	umull	r2, r3, r3, r2
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e74:	441c      	add	r4, r3
 8004e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e88:	4642      	mov	r2, r8
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	1891      	adds	r1, r2, r2
 8004e8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e90:	415b      	adcs	r3, r3
 8004e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e98:	4641      	mov	r1, r8
 8004e9a:	1851      	adds	r1, r2, r1
 8004e9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	414b      	adcs	r3, r1
 8004ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004eb0:	4659      	mov	r1, fp
 8004eb2:	00cb      	lsls	r3, r1, #3
 8004eb4:	4651      	mov	r1, sl
 8004eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eba:	4651      	mov	r1, sl
 8004ebc:	00ca      	lsls	r2, r1, #3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ecc:	464b      	mov	r3, r9
 8004ece:	460a      	mov	r2, r1
 8004ed0:	eb42 0303 	adc.w	r3, r2, r3
 8004ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ee4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ee8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004eec:	460b      	mov	r3, r1
 8004eee:	18db      	adds	r3, r3, r3
 8004ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	eb42 0303 	adc.w	r3, r2, r3
 8004ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004efa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004efe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f02:	f7fb fea1 	bl	8000c48 <__aeabi_uldivmod>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f40 <UART_SetConfig+0x2d4>)
 8004f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f10:	095b      	lsrs	r3, r3, #5
 8004f12:	2164      	movs	r1, #100	@ 0x64
 8004f14:	fb01 f303 	mul.w	r3, r1, r3
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	3332      	adds	r3, #50	@ 0x32
 8004f1e:	4a08      	ldr	r2, [pc, #32]	@ (8004f40 <UART_SetConfig+0x2d4>)
 8004f20:	fba2 2303 	umull	r2, r3, r2, r3
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	f003 0207 	and.w	r2, r3, #7
 8004f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4422      	add	r2, r4
 8004f32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f34:	e106      	b.n	8005144 <UART_SetConfig+0x4d8>
 8004f36:	bf00      	nop
 8004f38:	40011000 	.word	0x40011000
 8004f3c:	40011400 	.word	0x40011400
 8004f40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f56:	4642      	mov	r2, r8
 8004f58:	464b      	mov	r3, r9
 8004f5a:	1891      	adds	r1, r2, r2
 8004f5c:	6239      	str	r1, [r7, #32]
 8004f5e:	415b      	adcs	r3, r3
 8004f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f66:	4641      	mov	r1, r8
 8004f68:	1854      	adds	r4, r2, r1
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	eb43 0501 	adc.w	r5, r3, r1
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	00eb      	lsls	r3, r5, #3
 8004f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f7e:	00e2      	lsls	r2, r4, #3
 8004f80:	4614      	mov	r4, r2
 8004f82:	461d      	mov	r5, r3
 8004f84:	4643      	mov	r3, r8
 8004f86:	18e3      	adds	r3, r4, r3
 8004f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f8c:	464b      	mov	r3, r9
 8004f8e:	eb45 0303 	adc.w	r3, r5, r3
 8004f92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fa2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	008b      	lsls	r3, r1, #2
 8004fb6:	4621      	mov	r1, r4
 8004fb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	008a      	lsls	r2, r1, #2
 8004fc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004fc4:	f7fb fe40 	bl	8000c48 <__aeabi_uldivmod>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4b60      	ldr	r3, [pc, #384]	@ (8005150 <UART_SetConfig+0x4e4>)
 8004fce:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	011c      	lsls	r4, r3, #4
 8004fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fe0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fe4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004fe8:	4642      	mov	r2, r8
 8004fea:	464b      	mov	r3, r9
 8004fec:	1891      	adds	r1, r2, r2
 8004fee:	61b9      	str	r1, [r7, #24]
 8004ff0:	415b      	adcs	r3, r3
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ff8:	4641      	mov	r1, r8
 8004ffa:	1851      	adds	r1, r2, r1
 8004ffc:	6139      	str	r1, [r7, #16]
 8004ffe:	4649      	mov	r1, r9
 8005000:	414b      	adcs	r3, r1
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005010:	4659      	mov	r1, fp
 8005012:	00cb      	lsls	r3, r1, #3
 8005014:	4651      	mov	r1, sl
 8005016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800501a:	4651      	mov	r1, sl
 800501c:	00ca      	lsls	r2, r1, #3
 800501e:	4610      	mov	r0, r2
 8005020:	4619      	mov	r1, r3
 8005022:	4603      	mov	r3, r0
 8005024:	4642      	mov	r2, r8
 8005026:	189b      	adds	r3, r3, r2
 8005028:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800502c:	464b      	mov	r3, r9
 800502e:	460a      	mov	r2, r1
 8005030:	eb42 0303 	adc.w	r3, r2, r3
 8005034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005042:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005050:	4649      	mov	r1, r9
 8005052:	008b      	lsls	r3, r1, #2
 8005054:	4641      	mov	r1, r8
 8005056:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800505a:	4641      	mov	r1, r8
 800505c:	008a      	lsls	r2, r1, #2
 800505e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005062:	f7fb fdf1 	bl	8000c48 <__aeabi_uldivmod>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4611      	mov	r1, r2
 800506c:	4b38      	ldr	r3, [pc, #224]	@ (8005150 <UART_SetConfig+0x4e4>)
 800506e:	fba3 2301 	umull	r2, r3, r3, r1
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	2264      	movs	r2, #100	@ 0x64
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	1acb      	subs	r3, r1, r3
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	3332      	adds	r3, #50	@ 0x32
 8005080:	4a33      	ldr	r2, [pc, #204]	@ (8005150 <UART_SetConfig+0x4e4>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800508c:	441c      	add	r4, r3
 800508e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005092:	2200      	movs	r2, #0
 8005094:	673b      	str	r3, [r7, #112]	@ 0x70
 8005096:	677a      	str	r2, [r7, #116]	@ 0x74
 8005098:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800509c:	4642      	mov	r2, r8
 800509e:	464b      	mov	r3, r9
 80050a0:	1891      	adds	r1, r2, r2
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	415b      	adcs	r3, r3
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050ac:	4641      	mov	r1, r8
 80050ae:	1851      	adds	r1, r2, r1
 80050b0:	6039      	str	r1, [r7, #0]
 80050b2:	4649      	mov	r1, r9
 80050b4:	414b      	adcs	r3, r1
 80050b6:	607b      	str	r3, [r7, #4]
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050c4:	4659      	mov	r1, fp
 80050c6:	00cb      	lsls	r3, r1, #3
 80050c8:	4651      	mov	r1, sl
 80050ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ce:	4651      	mov	r1, sl
 80050d0:	00ca      	lsls	r2, r1, #3
 80050d2:	4610      	mov	r0, r2
 80050d4:	4619      	mov	r1, r3
 80050d6:	4603      	mov	r3, r0
 80050d8:	4642      	mov	r2, r8
 80050da:	189b      	adds	r3, r3, r2
 80050dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050de:	464b      	mov	r3, r9
 80050e0:	460a      	mov	r2, r1
 80050e2:	eb42 0303 	adc.w	r3, r2, r3
 80050e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80050f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005100:	4649      	mov	r1, r9
 8005102:	008b      	lsls	r3, r1, #2
 8005104:	4641      	mov	r1, r8
 8005106:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800510a:	4641      	mov	r1, r8
 800510c:	008a      	lsls	r2, r1, #2
 800510e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005112:	f7fb fd99 	bl	8000c48 <__aeabi_uldivmod>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4b0d      	ldr	r3, [pc, #52]	@ (8005150 <UART_SetConfig+0x4e4>)
 800511c:	fba3 1302 	umull	r1, r3, r3, r2
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	2164      	movs	r1, #100	@ 0x64
 8005124:	fb01 f303 	mul.w	r3, r1, r3
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	3332      	adds	r3, #50	@ 0x32
 800512e:	4a08      	ldr	r2, [pc, #32]	@ (8005150 <UART_SetConfig+0x4e4>)
 8005130:	fba2 2303 	umull	r2, r3, r2, r3
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	f003 020f 	and.w	r2, r3, #15
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4422      	add	r2, r4
 8005142:	609a      	str	r2, [r3, #8]
}
 8005144:	bf00      	nop
 8005146:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800514a:	46bd      	mov	sp, r7
 800514c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005150:	51eb851f 	.word	0x51eb851f

08005154 <atof>:
 8005154:	2100      	movs	r1, #0
 8005156:	f000 be07 	b.w	8005d68 <strtod>

0800515a <atoi>:
 800515a:	220a      	movs	r2, #10
 800515c:	2100      	movs	r1, #0
 800515e:	f000 be89 	b.w	8005e74 <strtol>

08005162 <sulp>:
 8005162:	b570      	push	{r4, r5, r6, lr}
 8005164:	4604      	mov	r4, r0
 8005166:	460d      	mov	r5, r1
 8005168:	ec45 4b10 	vmov	d0, r4, r5
 800516c:	4616      	mov	r6, r2
 800516e:	f002 f885 	bl	800727c <__ulp>
 8005172:	ec51 0b10 	vmov	r0, r1, d0
 8005176:	b17e      	cbz	r6, 8005198 <sulp+0x36>
 8005178:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800517c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005180:	2b00      	cmp	r3, #0
 8005182:	dd09      	ble.n	8005198 <sulp+0x36>
 8005184:	051b      	lsls	r3, r3, #20
 8005186:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800518a:	2400      	movs	r4, #0
 800518c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005190:	4622      	mov	r2, r4
 8005192:	462b      	mov	r3, r5
 8005194:	f7fb fa38 	bl	8000608 <__aeabi_dmul>
 8005198:	ec41 0b10 	vmov	d0, r0, r1
 800519c:	bd70      	pop	{r4, r5, r6, pc}
	...

080051a0 <_strtod_l>:
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	b09f      	sub	sp, #124	@ 0x7c
 80051a6:	460c      	mov	r4, r1
 80051a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80051aa:	2200      	movs	r2, #0
 80051ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80051ae:	9005      	str	r0, [sp, #20]
 80051b0:	f04f 0a00 	mov.w	sl, #0
 80051b4:	f04f 0b00 	mov.w	fp, #0
 80051b8:	460a      	mov	r2, r1
 80051ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80051bc:	7811      	ldrb	r1, [r2, #0]
 80051be:	292b      	cmp	r1, #43	@ 0x2b
 80051c0:	d04a      	beq.n	8005258 <_strtod_l+0xb8>
 80051c2:	d838      	bhi.n	8005236 <_strtod_l+0x96>
 80051c4:	290d      	cmp	r1, #13
 80051c6:	d832      	bhi.n	800522e <_strtod_l+0x8e>
 80051c8:	2908      	cmp	r1, #8
 80051ca:	d832      	bhi.n	8005232 <_strtod_l+0x92>
 80051cc:	2900      	cmp	r1, #0
 80051ce:	d03b      	beq.n	8005248 <_strtod_l+0xa8>
 80051d0:	2200      	movs	r2, #0
 80051d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80051d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80051d6:	782a      	ldrb	r2, [r5, #0]
 80051d8:	2a30      	cmp	r2, #48	@ 0x30
 80051da:	f040 80b3 	bne.w	8005344 <_strtod_l+0x1a4>
 80051de:	786a      	ldrb	r2, [r5, #1]
 80051e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80051e4:	2a58      	cmp	r2, #88	@ 0x58
 80051e6:	d16e      	bne.n	80052c6 <_strtod_l+0x126>
 80051e8:	9302      	str	r3, [sp, #8]
 80051ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	ab1a      	add	r3, sp, #104	@ 0x68
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	4a8e      	ldr	r2, [pc, #568]	@ (800542c <_strtod_l+0x28c>)
 80051f4:	9805      	ldr	r0, [sp, #20]
 80051f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80051f8:	a919      	add	r1, sp, #100	@ 0x64
 80051fa:	f001 f931 	bl	8006460 <__gethex>
 80051fe:	f010 060f 	ands.w	r6, r0, #15
 8005202:	4604      	mov	r4, r0
 8005204:	d005      	beq.n	8005212 <_strtod_l+0x72>
 8005206:	2e06      	cmp	r6, #6
 8005208:	d128      	bne.n	800525c <_strtod_l+0xbc>
 800520a:	3501      	adds	r5, #1
 800520c:	2300      	movs	r3, #0
 800520e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005210:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005212:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005214:	2b00      	cmp	r3, #0
 8005216:	f040 858e 	bne.w	8005d36 <_strtod_l+0xb96>
 800521a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800521c:	b1cb      	cbz	r3, 8005252 <_strtod_l+0xb2>
 800521e:	4652      	mov	r2, sl
 8005220:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005224:	ec43 2b10 	vmov	d0, r2, r3
 8005228:	b01f      	add	sp, #124	@ 0x7c
 800522a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522e:	2920      	cmp	r1, #32
 8005230:	d1ce      	bne.n	80051d0 <_strtod_l+0x30>
 8005232:	3201      	adds	r2, #1
 8005234:	e7c1      	b.n	80051ba <_strtod_l+0x1a>
 8005236:	292d      	cmp	r1, #45	@ 0x2d
 8005238:	d1ca      	bne.n	80051d0 <_strtod_l+0x30>
 800523a:	2101      	movs	r1, #1
 800523c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800523e:	1c51      	adds	r1, r2, #1
 8005240:	9119      	str	r1, [sp, #100]	@ 0x64
 8005242:	7852      	ldrb	r2, [r2, #1]
 8005244:	2a00      	cmp	r2, #0
 8005246:	d1c5      	bne.n	80051d4 <_strtod_l+0x34>
 8005248:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800524a:	9419      	str	r4, [sp, #100]	@ 0x64
 800524c:	2b00      	cmp	r3, #0
 800524e:	f040 8570 	bne.w	8005d32 <_strtod_l+0xb92>
 8005252:	4652      	mov	r2, sl
 8005254:	465b      	mov	r3, fp
 8005256:	e7e5      	b.n	8005224 <_strtod_l+0x84>
 8005258:	2100      	movs	r1, #0
 800525a:	e7ef      	b.n	800523c <_strtod_l+0x9c>
 800525c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800525e:	b13a      	cbz	r2, 8005270 <_strtod_l+0xd0>
 8005260:	2135      	movs	r1, #53	@ 0x35
 8005262:	a81c      	add	r0, sp, #112	@ 0x70
 8005264:	f002 f904 	bl	8007470 <__copybits>
 8005268:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800526a:	9805      	ldr	r0, [sp, #20]
 800526c:	f001 fcd2 	bl	8006c14 <_Bfree>
 8005270:	3e01      	subs	r6, #1
 8005272:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005274:	2e04      	cmp	r6, #4
 8005276:	d806      	bhi.n	8005286 <_strtod_l+0xe6>
 8005278:	e8df f006 	tbb	[pc, r6]
 800527c:	201d0314 	.word	0x201d0314
 8005280:	14          	.byte	0x14
 8005281:	00          	.byte	0x00
 8005282:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005286:	05e1      	lsls	r1, r4, #23
 8005288:	bf48      	it	mi
 800528a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800528e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005292:	0d1b      	lsrs	r3, r3, #20
 8005294:	051b      	lsls	r3, r3, #20
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1bb      	bne.n	8005212 <_strtod_l+0x72>
 800529a:	f000 ffcd 	bl	8006238 <__errno>
 800529e:	2322      	movs	r3, #34	@ 0x22
 80052a0:	6003      	str	r3, [r0, #0]
 80052a2:	e7b6      	b.n	8005212 <_strtod_l+0x72>
 80052a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80052a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80052ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80052b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80052b4:	e7e7      	b.n	8005286 <_strtod_l+0xe6>
 80052b6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005434 <_strtod_l+0x294>
 80052ba:	e7e4      	b.n	8005286 <_strtod_l+0xe6>
 80052bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80052c0:	f04f 3aff 	mov.w	sl, #4294967295
 80052c4:	e7df      	b.n	8005286 <_strtod_l+0xe6>
 80052c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80052cc:	785b      	ldrb	r3, [r3, #1]
 80052ce:	2b30      	cmp	r3, #48	@ 0x30
 80052d0:	d0f9      	beq.n	80052c6 <_strtod_l+0x126>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d09d      	beq.n	8005212 <_strtod_l+0x72>
 80052d6:	2301      	movs	r3, #1
 80052d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80052da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80052dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80052de:	2300      	movs	r3, #0
 80052e0:	9308      	str	r3, [sp, #32]
 80052e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80052e4:	461f      	mov	r7, r3
 80052e6:	220a      	movs	r2, #10
 80052e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80052ea:	7805      	ldrb	r5, [r0, #0]
 80052ec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80052f0:	b2d9      	uxtb	r1, r3
 80052f2:	2909      	cmp	r1, #9
 80052f4:	d928      	bls.n	8005348 <_strtod_l+0x1a8>
 80052f6:	494e      	ldr	r1, [pc, #312]	@ (8005430 <_strtod_l+0x290>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	f000 fed2 	bl	80060a2 <strncmp>
 80052fe:	2800      	cmp	r0, #0
 8005300:	d032      	beq.n	8005368 <_strtod_l+0x1c8>
 8005302:	2000      	movs	r0, #0
 8005304:	462a      	mov	r2, r5
 8005306:	4681      	mov	r9, r0
 8005308:	463d      	mov	r5, r7
 800530a:	4603      	mov	r3, r0
 800530c:	2a65      	cmp	r2, #101	@ 0x65
 800530e:	d001      	beq.n	8005314 <_strtod_l+0x174>
 8005310:	2a45      	cmp	r2, #69	@ 0x45
 8005312:	d114      	bne.n	800533e <_strtod_l+0x19e>
 8005314:	b91d      	cbnz	r5, 800531e <_strtod_l+0x17e>
 8005316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005318:	4302      	orrs	r2, r0
 800531a:	d095      	beq.n	8005248 <_strtod_l+0xa8>
 800531c:	2500      	movs	r5, #0
 800531e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005320:	1c62      	adds	r2, r4, #1
 8005322:	9219      	str	r2, [sp, #100]	@ 0x64
 8005324:	7862      	ldrb	r2, [r4, #1]
 8005326:	2a2b      	cmp	r2, #43	@ 0x2b
 8005328:	d077      	beq.n	800541a <_strtod_l+0x27a>
 800532a:	2a2d      	cmp	r2, #45	@ 0x2d
 800532c:	d07b      	beq.n	8005426 <_strtod_l+0x286>
 800532e:	f04f 0c00 	mov.w	ip, #0
 8005332:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005336:	2909      	cmp	r1, #9
 8005338:	f240 8082 	bls.w	8005440 <_strtod_l+0x2a0>
 800533c:	9419      	str	r4, [sp, #100]	@ 0x64
 800533e:	f04f 0800 	mov.w	r8, #0
 8005342:	e0a2      	b.n	800548a <_strtod_l+0x2ea>
 8005344:	2300      	movs	r3, #0
 8005346:	e7c7      	b.n	80052d8 <_strtod_l+0x138>
 8005348:	2f08      	cmp	r7, #8
 800534a:	bfd5      	itete	le
 800534c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800534e:	9908      	ldrgt	r1, [sp, #32]
 8005350:	fb02 3301 	mlale	r3, r2, r1, r3
 8005354:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005358:	f100 0001 	add.w	r0, r0, #1
 800535c:	bfd4      	ite	le
 800535e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005360:	9308      	strgt	r3, [sp, #32]
 8005362:	3701      	adds	r7, #1
 8005364:	9019      	str	r0, [sp, #100]	@ 0x64
 8005366:	e7bf      	b.n	80052e8 <_strtod_l+0x148>
 8005368:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	9219      	str	r2, [sp, #100]	@ 0x64
 800536e:	785a      	ldrb	r2, [r3, #1]
 8005370:	b37f      	cbz	r7, 80053d2 <_strtod_l+0x232>
 8005372:	4681      	mov	r9, r0
 8005374:	463d      	mov	r5, r7
 8005376:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800537a:	2b09      	cmp	r3, #9
 800537c:	d912      	bls.n	80053a4 <_strtod_l+0x204>
 800537e:	2301      	movs	r3, #1
 8005380:	e7c4      	b.n	800530c <_strtod_l+0x16c>
 8005382:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	9219      	str	r2, [sp, #100]	@ 0x64
 8005388:	785a      	ldrb	r2, [r3, #1]
 800538a:	3001      	adds	r0, #1
 800538c:	2a30      	cmp	r2, #48	@ 0x30
 800538e:	d0f8      	beq.n	8005382 <_strtod_l+0x1e2>
 8005390:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005394:	2b08      	cmp	r3, #8
 8005396:	f200 84d3 	bhi.w	8005d40 <_strtod_l+0xba0>
 800539a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800539c:	930c      	str	r3, [sp, #48]	@ 0x30
 800539e:	4681      	mov	r9, r0
 80053a0:	2000      	movs	r0, #0
 80053a2:	4605      	mov	r5, r0
 80053a4:	3a30      	subs	r2, #48	@ 0x30
 80053a6:	f100 0301 	add.w	r3, r0, #1
 80053aa:	d02a      	beq.n	8005402 <_strtod_l+0x262>
 80053ac:	4499      	add	r9, r3
 80053ae:	eb00 0c05 	add.w	ip, r0, r5
 80053b2:	462b      	mov	r3, r5
 80053b4:	210a      	movs	r1, #10
 80053b6:	4563      	cmp	r3, ip
 80053b8:	d10d      	bne.n	80053d6 <_strtod_l+0x236>
 80053ba:	1c69      	adds	r1, r5, #1
 80053bc:	4401      	add	r1, r0
 80053be:	4428      	add	r0, r5
 80053c0:	2808      	cmp	r0, #8
 80053c2:	dc16      	bgt.n	80053f2 <_strtod_l+0x252>
 80053c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80053c6:	230a      	movs	r3, #10
 80053c8:	fb03 2300 	mla	r3, r3, r0, r2
 80053cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80053ce:	2300      	movs	r3, #0
 80053d0:	e018      	b.n	8005404 <_strtod_l+0x264>
 80053d2:	4638      	mov	r0, r7
 80053d4:	e7da      	b.n	800538c <_strtod_l+0x1ec>
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	f103 0301 	add.w	r3, r3, #1
 80053dc:	dc03      	bgt.n	80053e6 <_strtod_l+0x246>
 80053de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80053e0:	434e      	muls	r6, r1
 80053e2:	960a      	str	r6, [sp, #40]	@ 0x28
 80053e4:	e7e7      	b.n	80053b6 <_strtod_l+0x216>
 80053e6:	2b10      	cmp	r3, #16
 80053e8:	bfde      	ittt	le
 80053ea:	9e08      	ldrle	r6, [sp, #32]
 80053ec:	434e      	mulle	r6, r1
 80053ee:	9608      	strle	r6, [sp, #32]
 80053f0:	e7e1      	b.n	80053b6 <_strtod_l+0x216>
 80053f2:	280f      	cmp	r0, #15
 80053f4:	dceb      	bgt.n	80053ce <_strtod_l+0x22e>
 80053f6:	9808      	ldr	r0, [sp, #32]
 80053f8:	230a      	movs	r3, #10
 80053fa:	fb03 2300 	mla	r3, r3, r0, r2
 80053fe:	9308      	str	r3, [sp, #32]
 8005400:	e7e5      	b.n	80053ce <_strtod_l+0x22e>
 8005402:	4629      	mov	r1, r5
 8005404:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005406:	1c50      	adds	r0, r2, #1
 8005408:	9019      	str	r0, [sp, #100]	@ 0x64
 800540a:	7852      	ldrb	r2, [r2, #1]
 800540c:	4618      	mov	r0, r3
 800540e:	460d      	mov	r5, r1
 8005410:	e7b1      	b.n	8005376 <_strtod_l+0x1d6>
 8005412:	f04f 0900 	mov.w	r9, #0
 8005416:	2301      	movs	r3, #1
 8005418:	e77d      	b.n	8005316 <_strtod_l+0x176>
 800541a:	f04f 0c00 	mov.w	ip, #0
 800541e:	1ca2      	adds	r2, r4, #2
 8005420:	9219      	str	r2, [sp, #100]	@ 0x64
 8005422:	78a2      	ldrb	r2, [r4, #2]
 8005424:	e785      	b.n	8005332 <_strtod_l+0x192>
 8005426:	f04f 0c01 	mov.w	ip, #1
 800542a:	e7f8      	b.n	800541e <_strtod_l+0x27e>
 800542c:	0800824c 	.word	0x0800824c
 8005430:	08008228 	.word	0x08008228
 8005434:	7ff00000 	.word	0x7ff00000
 8005438:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800543a:	1c51      	adds	r1, r2, #1
 800543c:	9119      	str	r1, [sp, #100]	@ 0x64
 800543e:	7852      	ldrb	r2, [r2, #1]
 8005440:	2a30      	cmp	r2, #48	@ 0x30
 8005442:	d0f9      	beq.n	8005438 <_strtod_l+0x298>
 8005444:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005448:	2908      	cmp	r1, #8
 800544a:	f63f af78 	bhi.w	800533e <_strtod_l+0x19e>
 800544e:	3a30      	subs	r2, #48	@ 0x30
 8005450:	920e      	str	r2, [sp, #56]	@ 0x38
 8005452:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005454:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005456:	f04f 080a 	mov.w	r8, #10
 800545a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800545c:	1c56      	adds	r6, r2, #1
 800545e:	9619      	str	r6, [sp, #100]	@ 0x64
 8005460:	7852      	ldrb	r2, [r2, #1]
 8005462:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005466:	f1be 0f09 	cmp.w	lr, #9
 800546a:	d939      	bls.n	80054e0 <_strtod_l+0x340>
 800546c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800546e:	1a76      	subs	r6, r6, r1
 8005470:	2e08      	cmp	r6, #8
 8005472:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005476:	dc03      	bgt.n	8005480 <_strtod_l+0x2e0>
 8005478:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800547a:	4588      	cmp	r8, r1
 800547c:	bfa8      	it	ge
 800547e:	4688      	movge	r8, r1
 8005480:	f1bc 0f00 	cmp.w	ip, #0
 8005484:	d001      	beq.n	800548a <_strtod_l+0x2ea>
 8005486:	f1c8 0800 	rsb	r8, r8, #0
 800548a:	2d00      	cmp	r5, #0
 800548c:	d14e      	bne.n	800552c <_strtod_l+0x38c>
 800548e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005490:	4308      	orrs	r0, r1
 8005492:	f47f aebe 	bne.w	8005212 <_strtod_l+0x72>
 8005496:	2b00      	cmp	r3, #0
 8005498:	f47f aed6 	bne.w	8005248 <_strtod_l+0xa8>
 800549c:	2a69      	cmp	r2, #105	@ 0x69
 800549e:	d028      	beq.n	80054f2 <_strtod_l+0x352>
 80054a0:	dc25      	bgt.n	80054ee <_strtod_l+0x34e>
 80054a2:	2a49      	cmp	r2, #73	@ 0x49
 80054a4:	d025      	beq.n	80054f2 <_strtod_l+0x352>
 80054a6:	2a4e      	cmp	r2, #78	@ 0x4e
 80054a8:	f47f aece 	bne.w	8005248 <_strtod_l+0xa8>
 80054ac:	499b      	ldr	r1, [pc, #620]	@ (800571c <_strtod_l+0x57c>)
 80054ae:	a819      	add	r0, sp, #100	@ 0x64
 80054b0:	f001 f9f8 	bl	80068a4 <__match>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	f43f aec7 	beq.w	8005248 <_strtod_l+0xa8>
 80054ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b28      	cmp	r3, #40	@ 0x28
 80054c0:	d12e      	bne.n	8005520 <_strtod_l+0x380>
 80054c2:	4997      	ldr	r1, [pc, #604]	@ (8005720 <_strtod_l+0x580>)
 80054c4:	aa1c      	add	r2, sp, #112	@ 0x70
 80054c6:	a819      	add	r0, sp, #100	@ 0x64
 80054c8:	f001 fa00 	bl	80068cc <__hexnan>
 80054cc:	2805      	cmp	r0, #5
 80054ce:	d127      	bne.n	8005520 <_strtod_l+0x380>
 80054d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80054d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80054d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80054da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80054de:	e698      	b.n	8005212 <_strtod_l+0x72>
 80054e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80054e2:	fb08 2101 	mla	r1, r8, r1, r2
 80054e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80054ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80054ec:	e7b5      	b.n	800545a <_strtod_l+0x2ba>
 80054ee:	2a6e      	cmp	r2, #110	@ 0x6e
 80054f0:	e7da      	b.n	80054a8 <_strtod_l+0x308>
 80054f2:	498c      	ldr	r1, [pc, #560]	@ (8005724 <_strtod_l+0x584>)
 80054f4:	a819      	add	r0, sp, #100	@ 0x64
 80054f6:	f001 f9d5 	bl	80068a4 <__match>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	f43f aea4 	beq.w	8005248 <_strtod_l+0xa8>
 8005500:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005502:	4989      	ldr	r1, [pc, #548]	@ (8005728 <_strtod_l+0x588>)
 8005504:	3b01      	subs	r3, #1
 8005506:	a819      	add	r0, sp, #100	@ 0x64
 8005508:	9319      	str	r3, [sp, #100]	@ 0x64
 800550a:	f001 f9cb 	bl	80068a4 <__match>
 800550e:	b910      	cbnz	r0, 8005516 <_strtod_l+0x376>
 8005510:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005512:	3301      	adds	r3, #1
 8005514:	9319      	str	r3, [sp, #100]	@ 0x64
 8005516:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8005738 <_strtod_l+0x598>
 800551a:	f04f 0a00 	mov.w	sl, #0
 800551e:	e678      	b.n	8005212 <_strtod_l+0x72>
 8005520:	4882      	ldr	r0, [pc, #520]	@ (800572c <_strtod_l+0x58c>)
 8005522:	f000 fec5 	bl	80062b0 <nan>
 8005526:	ec5b ab10 	vmov	sl, fp, d0
 800552a:	e672      	b.n	8005212 <_strtod_l+0x72>
 800552c:	eba8 0309 	sub.w	r3, r8, r9
 8005530:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005532:	9309      	str	r3, [sp, #36]	@ 0x24
 8005534:	2f00      	cmp	r7, #0
 8005536:	bf08      	it	eq
 8005538:	462f      	moveq	r7, r5
 800553a:	2d10      	cmp	r5, #16
 800553c:	462c      	mov	r4, r5
 800553e:	bfa8      	it	ge
 8005540:	2410      	movge	r4, #16
 8005542:	f7fa ffe7 	bl	8000514 <__aeabi_ui2d>
 8005546:	2d09      	cmp	r5, #9
 8005548:	4682      	mov	sl, r0
 800554a:	468b      	mov	fp, r1
 800554c:	dc13      	bgt.n	8005576 <_strtod_l+0x3d6>
 800554e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005550:	2b00      	cmp	r3, #0
 8005552:	f43f ae5e 	beq.w	8005212 <_strtod_l+0x72>
 8005556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005558:	dd78      	ble.n	800564c <_strtod_l+0x4ac>
 800555a:	2b16      	cmp	r3, #22
 800555c:	dc5f      	bgt.n	800561e <_strtod_l+0x47e>
 800555e:	4974      	ldr	r1, [pc, #464]	@ (8005730 <_strtod_l+0x590>)
 8005560:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005568:	4652      	mov	r2, sl
 800556a:	465b      	mov	r3, fp
 800556c:	f7fb f84c 	bl	8000608 <__aeabi_dmul>
 8005570:	4682      	mov	sl, r0
 8005572:	468b      	mov	fp, r1
 8005574:	e64d      	b.n	8005212 <_strtod_l+0x72>
 8005576:	4b6e      	ldr	r3, [pc, #440]	@ (8005730 <_strtod_l+0x590>)
 8005578:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800557c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005580:	f7fb f842 	bl	8000608 <__aeabi_dmul>
 8005584:	4682      	mov	sl, r0
 8005586:	9808      	ldr	r0, [sp, #32]
 8005588:	468b      	mov	fp, r1
 800558a:	f7fa ffc3 	bl	8000514 <__aeabi_ui2d>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4650      	mov	r0, sl
 8005594:	4659      	mov	r1, fp
 8005596:	f7fa fe81 	bl	800029c <__adddf3>
 800559a:	2d0f      	cmp	r5, #15
 800559c:	4682      	mov	sl, r0
 800559e:	468b      	mov	fp, r1
 80055a0:	ddd5      	ble.n	800554e <_strtod_l+0x3ae>
 80055a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055a4:	1b2c      	subs	r4, r5, r4
 80055a6:	441c      	add	r4, r3
 80055a8:	2c00      	cmp	r4, #0
 80055aa:	f340 8096 	ble.w	80056da <_strtod_l+0x53a>
 80055ae:	f014 030f 	ands.w	r3, r4, #15
 80055b2:	d00a      	beq.n	80055ca <_strtod_l+0x42a>
 80055b4:	495e      	ldr	r1, [pc, #376]	@ (8005730 <_strtod_l+0x590>)
 80055b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80055ba:	4652      	mov	r2, sl
 80055bc:	465b      	mov	r3, fp
 80055be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055c2:	f7fb f821 	bl	8000608 <__aeabi_dmul>
 80055c6:	4682      	mov	sl, r0
 80055c8:	468b      	mov	fp, r1
 80055ca:	f034 040f 	bics.w	r4, r4, #15
 80055ce:	d073      	beq.n	80056b8 <_strtod_l+0x518>
 80055d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80055d4:	dd48      	ble.n	8005668 <_strtod_l+0x4c8>
 80055d6:	2400      	movs	r4, #0
 80055d8:	46a0      	mov	r8, r4
 80055da:	940a      	str	r4, [sp, #40]	@ 0x28
 80055dc:	46a1      	mov	r9, r4
 80055de:	9a05      	ldr	r2, [sp, #20]
 80055e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8005738 <_strtod_l+0x598>
 80055e4:	2322      	movs	r3, #34	@ 0x22
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	f04f 0a00 	mov.w	sl, #0
 80055ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f43f ae0f 	beq.w	8005212 <_strtod_l+0x72>
 80055f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80055f6:	9805      	ldr	r0, [sp, #20]
 80055f8:	f001 fb0c 	bl	8006c14 <_Bfree>
 80055fc:	9805      	ldr	r0, [sp, #20]
 80055fe:	4649      	mov	r1, r9
 8005600:	f001 fb08 	bl	8006c14 <_Bfree>
 8005604:	9805      	ldr	r0, [sp, #20]
 8005606:	4641      	mov	r1, r8
 8005608:	f001 fb04 	bl	8006c14 <_Bfree>
 800560c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800560e:	9805      	ldr	r0, [sp, #20]
 8005610:	f001 fb00 	bl	8006c14 <_Bfree>
 8005614:	9805      	ldr	r0, [sp, #20]
 8005616:	4621      	mov	r1, r4
 8005618:	f001 fafc 	bl	8006c14 <_Bfree>
 800561c:	e5f9      	b.n	8005212 <_strtod_l+0x72>
 800561e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005620:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005624:	4293      	cmp	r3, r2
 8005626:	dbbc      	blt.n	80055a2 <_strtod_l+0x402>
 8005628:	4c41      	ldr	r4, [pc, #260]	@ (8005730 <_strtod_l+0x590>)
 800562a:	f1c5 050f 	rsb	r5, r5, #15
 800562e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005632:	4652      	mov	r2, sl
 8005634:	465b      	mov	r3, fp
 8005636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800563a:	f7fa ffe5 	bl	8000608 <__aeabi_dmul>
 800563e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005640:	1b5d      	subs	r5, r3, r5
 8005642:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005646:	e9d4 2300 	ldrd	r2, r3, [r4]
 800564a:	e78f      	b.n	800556c <_strtod_l+0x3cc>
 800564c:	3316      	adds	r3, #22
 800564e:	dba8      	blt.n	80055a2 <_strtod_l+0x402>
 8005650:	4b37      	ldr	r3, [pc, #220]	@ (8005730 <_strtod_l+0x590>)
 8005652:	eba9 0808 	sub.w	r8, r9, r8
 8005656:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800565a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800565e:	4650      	mov	r0, sl
 8005660:	4659      	mov	r1, fp
 8005662:	f7fb f8fb 	bl	800085c <__aeabi_ddiv>
 8005666:	e783      	b.n	8005570 <_strtod_l+0x3d0>
 8005668:	4b32      	ldr	r3, [pc, #200]	@ (8005734 <_strtod_l+0x594>)
 800566a:	9308      	str	r3, [sp, #32]
 800566c:	2300      	movs	r3, #0
 800566e:	1124      	asrs	r4, r4, #4
 8005670:	4650      	mov	r0, sl
 8005672:	4659      	mov	r1, fp
 8005674:	461e      	mov	r6, r3
 8005676:	2c01      	cmp	r4, #1
 8005678:	dc21      	bgt.n	80056be <_strtod_l+0x51e>
 800567a:	b10b      	cbz	r3, 8005680 <_strtod_l+0x4e0>
 800567c:	4682      	mov	sl, r0
 800567e:	468b      	mov	fp, r1
 8005680:	492c      	ldr	r1, [pc, #176]	@ (8005734 <_strtod_l+0x594>)
 8005682:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005686:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800568a:	4652      	mov	r2, sl
 800568c:	465b      	mov	r3, fp
 800568e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005692:	f7fa ffb9 	bl	8000608 <__aeabi_dmul>
 8005696:	4b28      	ldr	r3, [pc, #160]	@ (8005738 <_strtod_l+0x598>)
 8005698:	460a      	mov	r2, r1
 800569a:	400b      	ands	r3, r1
 800569c:	4927      	ldr	r1, [pc, #156]	@ (800573c <_strtod_l+0x59c>)
 800569e:	428b      	cmp	r3, r1
 80056a0:	4682      	mov	sl, r0
 80056a2:	d898      	bhi.n	80055d6 <_strtod_l+0x436>
 80056a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80056a8:	428b      	cmp	r3, r1
 80056aa:	bf86      	itte	hi
 80056ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8005740 <_strtod_l+0x5a0>
 80056b0:	f04f 3aff 	movhi.w	sl, #4294967295
 80056b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80056b8:	2300      	movs	r3, #0
 80056ba:	9308      	str	r3, [sp, #32]
 80056bc:	e07a      	b.n	80057b4 <_strtod_l+0x614>
 80056be:	07e2      	lsls	r2, r4, #31
 80056c0:	d505      	bpl.n	80056ce <_strtod_l+0x52e>
 80056c2:	9b08      	ldr	r3, [sp, #32]
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	f7fa ff9e 	bl	8000608 <__aeabi_dmul>
 80056cc:	2301      	movs	r3, #1
 80056ce:	9a08      	ldr	r2, [sp, #32]
 80056d0:	3208      	adds	r2, #8
 80056d2:	3601      	adds	r6, #1
 80056d4:	1064      	asrs	r4, r4, #1
 80056d6:	9208      	str	r2, [sp, #32]
 80056d8:	e7cd      	b.n	8005676 <_strtod_l+0x4d6>
 80056da:	d0ed      	beq.n	80056b8 <_strtod_l+0x518>
 80056dc:	4264      	negs	r4, r4
 80056de:	f014 020f 	ands.w	r2, r4, #15
 80056e2:	d00a      	beq.n	80056fa <_strtod_l+0x55a>
 80056e4:	4b12      	ldr	r3, [pc, #72]	@ (8005730 <_strtod_l+0x590>)
 80056e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ea:	4650      	mov	r0, sl
 80056ec:	4659      	mov	r1, fp
 80056ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f2:	f7fb f8b3 	bl	800085c <__aeabi_ddiv>
 80056f6:	4682      	mov	sl, r0
 80056f8:	468b      	mov	fp, r1
 80056fa:	1124      	asrs	r4, r4, #4
 80056fc:	d0dc      	beq.n	80056b8 <_strtod_l+0x518>
 80056fe:	2c1f      	cmp	r4, #31
 8005700:	dd20      	ble.n	8005744 <_strtod_l+0x5a4>
 8005702:	2400      	movs	r4, #0
 8005704:	46a0      	mov	r8, r4
 8005706:	940a      	str	r4, [sp, #40]	@ 0x28
 8005708:	46a1      	mov	r9, r4
 800570a:	9a05      	ldr	r2, [sp, #20]
 800570c:	2322      	movs	r3, #34	@ 0x22
 800570e:	f04f 0a00 	mov.w	sl, #0
 8005712:	f04f 0b00 	mov.w	fp, #0
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	e768      	b.n	80055ec <_strtod_l+0x44c>
 800571a:	bf00      	nop
 800571c:	08008233 	.word	0x08008233
 8005720:	08008238 	.word	0x08008238
 8005724:	0800822a 	.word	0x0800822a
 8005728:	0800822d 	.word	0x0800822d
 800572c:	0800843d 	.word	0x0800843d
 8005730:	08008540 	.word	0x08008540
 8005734:	08008518 	.word	0x08008518
 8005738:	7ff00000 	.word	0x7ff00000
 800573c:	7ca00000 	.word	0x7ca00000
 8005740:	7fefffff 	.word	0x7fefffff
 8005744:	f014 0310 	ands.w	r3, r4, #16
 8005748:	bf18      	it	ne
 800574a:	236a      	movne	r3, #106	@ 0x6a
 800574c:	4ea9      	ldr	r6, [pc, #676]	@ (80059f4 <_strtod_l+0x854>)
 800574e:	9308      	str	r3, [sp, #32]
 8005750:	4650      	mov	r0, sl
 8005752:	4659      	mov	r1, fp
 8005754:	2300      	movs	r3, #0
 8005756:	07e2      	lsls	r2, r4, #31
 8005758:	d504      	bpl.n	8005764 <_strtod_l+0x5c4>
 800575a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800575e:	f7fa ff53 	bl	8000608 <__aeabi_dmul>
 8005762:	2301      	movs	r3, #1
 8005764:	1064      	asrs	r4, r4, #1
 8005766:	f106 0608 	add.w	r6, r6, #8
 800576a:	d1f4      	bne.n	8005756 <_strtod_l+0x5b6>
 800576c:	b10b      	cbz	r3, 8005772 <_strtod_l+0x5d2>
 800576e:	4682      	mov	sl, r0
 8005770:	468b      	mov	fp, r1
 8005772:	9b08      	ldr	r3, [sp, #32]
 8005774:	b1b3      	cbz	r3, 80057a4 <_strtod_l+0x604>
 8005776:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800577a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800577e:	2b00      	cmp	r3, #0
 8005780:	4659      	mov	r1, fp
 8005782:	dd0f      	ble.n	80057a4 <_strtod_l+0x604>
 8005784:	2b1f      	cmp	r3, #31
 8005786:	dd55      	ble.n	8005834 <_strtod_l+0x694>
 8005788:	2b34      	cmp	r3, #52	@ 0x34
 800578a:	bfde      	ittt	le
 800578c:	f04f 33ff 	movle.w	r3, #4294967295
 8005790:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005794:	4093      	lslle	r3, r2
 8005796:	f04f 0a00 	mov.w	sl, #0
 800579a:	bfcc      	ite	gt
 800579c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80057a0:	ea03 0b01 	andle.w	fp, r3, r1
 80057a4:	2200      	movs	r2, #0
 80057a6:	2300      	movs	r3, #0
 80057a8:	4650      	mov	r0, sl
 80057aa:	4659      	mov	r1, fp
 80057ac:	f7fb f994 	bl	8000ad8 <__aeabi_dcmpeq>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d1a6      	bne.n	8005702 <_strtod_l+0x562>
 80057b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80057ba:	9805      	ldr	r0, [sp, #20]
 80057bc:	462b      	mov	r3, r5
 80057be:	463a      	mov	r2, r7
 80057c0:	f001 fa90 	bl	8006ce4 <__s2b>
 80057c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80057c6:	2800      	cmp	r0, #0
 80057c8:	f43f af05 	beq.w	80055d6 <_strtod_l+0x436>
 80057cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	eba9 0308 	sub.w	r3, r9, r8
 80057d4:	bfa8      	it	ge
 80057d6:	2300      	movge	r3, #0
 80057d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80057da:	2400      	movs	r4, #0
 80057dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80057e0:	9316      	str	r3, [sp, #88]	@ 0x58
 80057e2:	46a0      	mov	r8, r4
 80057e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057e6:	9805      	ldr	r0, [sp, #20]
 80057e8:	6859      	ldr	r1, [r3, #4]
 80057ea:	f001 f9d3 	bl	8006b94 <_Balloc>
 80057ee:	4681      	mov	r9, r0
 80057f0:	2800      	cmp	r0, #0
 80057f2:	f43f aef4 	beq.w	80055de <_strtod_l+0x43e>
 80057f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	3202      	adds	r2, #2
 80057fc:	f103 010c 	add.w	r1, r3, #12
 8005800:	0092      	lsls	r2, r2, #2
 8005802:	300c      	adds	r0, #12
 8005804:	f000 fd45 	bl	8006292 <memcpy>
 8005808:	ec4b ab10 	vmov	d0, sl, fp
 800580c:	9805      	ldr	r0, [sp, #20]
 800580e:	aa1c      	add	r2, sp, #112	@ 0x70
 8005810:	a91b      	add	r1, sp, #108	@ 0x6c
 8005812:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005816:	f001 fda1 	bl	800735c <__d2b>
 800581a:	901a      	str	r0, [sp, #104]	@ 0x68
 800581c:	2800      	cmp	r0, #0
 800581e:	f43f aede 	beq.w	80055de <_strtod_l+0x43e>
 8005822:	9805      	ldr	r0, [sp, #20]
 8005824:	2101      	movs	r1, #1
 8005826:	f001 faf3 	bl	8006e10 <__i2b>
 800582a:	4680      	mov	r8, r0
 800582c:	b948      	cbnz	r0, 8005842 <_strtod_l+0x6a2>
 800582e:	f04f 0800 	mov.w	r8, #0
 8005832:	e6d4      	b.n	80055de <_strtod_l+0x43e>
 8005834:	f04f 32ff 	mov.w	r2, #4294967295
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	ea03 0a0a 	and.w	sl, r3, sl
 8005840:	e7b0      	b.n	80057a4 <_strtod_l+0x604>
 8005842:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005844:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005846:	2d00      	cmp	r5, #0
 8005848:	bfab      	itete	ge
 800584a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800584c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800584e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005850:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005852:	bfac      	ite	ge
 8005854:	18ef      	addge	r7, r5, r3
 8005856:	1b5e      	sublt	r6, r3, r5
 8005858:	9b08      	ldr	r3, [sp, #32]
 800585a:	1aed      	subs	r5, r5, r3
 800585c:	4415      	add	r5, r2
 800585e:	4b66      	ldr	r3, [pc, #408]	@ (80059f8 <_strtod_l+0x858>)
 8005860:	3d01      	subs	r5, #1
 8005862:	429d      	cmp	r5, r3
 8005864:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005868:	da50      	bge.n	800590c <_strtod_l+0x76c>
 800586a:	1b5b      	subs	r3, r3, r5
 800586c:	2b1f      	cmp	r3, #31
 800586e:	eba2 0203 	sub.w	r2, r2, r3
 8005872:	f04f 0101 	mov.w	r1, #1
 8005876:	dc3d      	bgt.n	80058f4 <_strtod_l+0x754>
 8005878:	fa01 f303 	lsl.w	r3, r1, r3
 800587c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800587e:	2300      	movs	r3, #0
 8005880:	9310      	str	r3, [sp, #64]	@ 0x40
 8005882:	18bd      	adds	r5, r7, r2
 8005884:	9b08      	ldr	r3, [sp, #32]
 8005886:	42af      	cmp	r7, r5
 8005888:	4416      	add	r6, r2
 800588a:	441e      	add	r6, r3
 800588c:	463b      	mov	r3, r7
 800588e:	bfa8      	it	ge
 8005890:	462b      	movge	r3, r5
 8005892:	42b3      	cmp	r3, r6
 8005894:	bfa8      	it	ge
 8005896:	4633      	movge	r3, r6
 8005898:	2b00      	cmp	r3, #0
 800589a:	bfc2      	ittt	gt
 800589c:	1aed      	subgt	r5, r5, r3
 800589e:	1af6      	subgt	r6, r6, r3
 80058a0:	1aff      	subgt	r7, r7, r3
 80058a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	dd16      	ble.n	80058d6 <_strtod_l+0x736>
 80058a8:	4641      	mov	r1, r8
 80058aa:	9805      	ldr	r0, [sp, #20]
 80058ac:	461a      	mov	r2, r3
 80058ae:	f001 fb6f 	bl	8006f90 <__pow5mult>
 80058b2:	4680      	mov	r8, r0
 80058b4:	2800      	cmp	r0, #0
 80058b6:	d0ba      	beq.n	800582e <_strtod_l+0x68e>
 80058b8:	4601      	mov	r1, r0
 80058ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80058bc:	9805      	ldr	r0, [sp, #20]
 80058be:	f001 fabd 	bl	8006e3c <__multiply>
 80058c2:	900e      	str	r0, [sp, #56]	@ 0x38
 80058c4:	2800      	cmp	r0, #0
 80058c6:	f43f ae8a 	beq.w	80055de <_strtod_l+0x43e>
 80058ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80058cc:	9805      	ldr	r0, [sp, #20]
 80058ce:	f001 f9a1 	bl	8006c14 <_Bfree>
 80058d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80058d6:	2d00      	cmp	r5, #0
 80058d8:	dc1d      	bgt.n	8005916 <_strtod_l+0x776>
 80058da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058dc:	2b00      	cmp	r3, #0
 80058de:	dd23      	ble.n	8005928 <_strtod_l+0x788>
 80058e0:	4649      	mov	r1, r9
 80058e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80058e4:	9805      	ldr	r0, [sp, #20]
 80058e6:	f001 fb53 	bl	8006f90 <__pow5mult>
 80058ea:	4681      	mov	r9, r0
 80058ec:	b9e0      	cbnz	r0, 8005928 <_strtod_l+0x788>
 80058ee:	f04f 0900 	mov.w	r9, #0
 80058f2:	e674      	b.n	80055de <_strtod_l+0x43e>
 80058f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80058f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80058fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005900:	35e2      	adds	r5, #226	@ 0xe2
 8005902:	fa01 f305 	lsl.w	r3, r1, r5
 8005906:	9310      	str	r3, [sp, #64]	@ 0x40
 8005908:	9113      	str	r1, [sp, #76]	@ 0x4c
 800590a:	e7ba      	b.n	8005882 <_strtod_l+0x6e2>
 800590c:	2300      	movs	r3, #0
 800590e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005910:	2301      	movs	r3, #1
 8005912:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005914:	e7b5      	b.n	8005882 <_strtod_l+0x6e2>
 8005916:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005918:	9805      	ldr	r0, [sp, #20]
 800591a:	462a      	mov	r2, r5
 800591c:	f001 fb92 	bl	8007044 <__lshift>
 8005920:	901a      	str	r0, [sp, #104]	@ 0x68
 8005922:	2800      	cmp	r0, #0
 8005924:	d1d9      	bne.n	80058da <_strtod_l+0x73a>
 8005926:	e65a      	b.n	80055de <_strtod_l+0x43e>
 8005928:	2e00      	cmp	r6, #0
 800592a:	dd07      	ble.n	800593c <_strtod_l+0x79c>
 800592c:	4649      	mov	r1, r9
 800592e:	9805      	ldr	r0, [sp, #20]
 8005930:	4632      	mov	r2, r6
 8005932:	f001 fb87 	bl	8007044 <__lshift>
 8005936:	4681      	mov	r9, r0
 8005938:	2800      	cmp	r0, #0
 800593a:	d0d8      	beq.n	80058ee <_strtod_l+0x74e>
 800593c:	2f00      	cmp	r7, #0
 800593e:	dd08      	ble.n	8005952 <_strtod_l+0x7b2>
 8005940:	4641      	mov	r1, r8
 8005942:	9805      	ldr	r0, [sp, #20]
 8005944:	463a      	mov	r2, r7
 8005946:	f001 fb7d 	bl	8007044 <__lshift>
 800594a:	4680      	mov	r8, r0
 800594c:	2800      	cmp	r0, #0
 800594e:	f43f ae46 	beq.w	80055de <_strtod_l+0x43e>
 8005952:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005954:	9805      	ldr	r0, [sp, #20]
 8005956:	464a      	mov	r2, r9
 8005958:	f001 fbfc 	bl	8007154 <__mdiff>
 800595c:	4604      	mov	r4, r0
 800595e:	2800      	cmp	r0, #0
 8005960:	f43f ae3d 	beq.w	80055de <_strtod_l+0x43e>
 8005964:	68c3      	ldr	r3, [r0, #12]
 8005966:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005968:	2300      	movs	r3, #0
 800596a:	60c3      	str	r3, [r0, #12]
 800596c:	4641      	mov	r1, r8
 800596e:	f001 fbd5 	bl	800711c <__mcmp>
 8005972:	2800      	cmp	r0, #0
 8005974:	da46      	bge.n	8005a04 <_strtod_l+0x864>
 8005976:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005978:	ea53 030a 	orrs.w	r3, r3, sl
 800597c:	d16c      	bne.n	8005a58 <_strtod_l+0x8b8>
 800597e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005982:	2b00      	cmp	r3, #0
 8005984:	d168      	bne.n	8005a58 <_strtod_l+0x8b8>
 8005986:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800598a:	0d1b      	lsrs	r3, r3, #20
 800598c:	051b      	lsls	r3, r3, #20
 800598e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005992:	d961      	bls.n	8005a58 <_strtod_l+0x8b8>
 8005994:	6963      	ldr	r3, [r4, #20]
 8005996:	b913      	cbnz	r3, 800599e <_strtod_l+0x7fe>
 8005998:	6923      	ldr	r3, [r4, #16]
 800599a:	2b01      	cmp	r3, #1
 800599c:	dd5c      	ble.n	8005a58 <_strtod_l+0x8b8>
 800599e:	4621      	mov	r1, r4
 80059a0:	2201      	movs	r2, #1
 80059a2:	9805      	ldr	r0, [sp, #20]
 80059a4:	f001 fb4e 	bl	8007044 <__lshift>
 80059a8:	4641      	mov	r1, r8
 80059aa:	4604      	mov	r4, r0
 80059ac:	f001 fbb6 	bl	800711c <__mcmp>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	dd51      	ble.n	8005a58 <_strtod_l+0x8b8>
 80059b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80059b8:	9a08      	ldr	r2, [sp, #32]
 80059ba:	0d1b      	lsrs	r3, r3, #20
 80059bc:	051b      	lsls	r3, r3, #20
 80059be:	2a00      	cmp	r2, #0
 80059c0:	d06b      	beq.n	8005a9a <_strtod_l+0x8fa>
 80059c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80059c6:	d868      	bhi.n	8005a9a <_strtod_l+0x8fa>
 80059c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80059cc:	f67f ae9d 	bls.w	800570a <_strtod_l+0x56a>
 80059d0:	4b0a      	ldr	r3, [pc, #40]	@ (80059fc <_strtod_l+0x85c>)
 80059d2:	4650      	mov	r0, sl
 80059d4:	4659      	mov	r1, fp
 80059d6:	2200      	movs	r2, #0
 80059d8:	f7fa fe16 	bl	8000608 <__aeabi_dmul>
 80059dc:	4b08      	ldr	r3, [pc, #32]	@ (8005a00 <_strtod_l+0x860>)
 80059de:	400b      	ands	r3, r1
 80059e0:	4682      	mov	sl, r0
 80059e2:	468b      	mov	fp, r1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f47f ae05 	bne.w	80055f4 <_strtod_l+0x454>
 80059ea:	9a05      	ldr	r2, [sp, #20]
 80059ec:	2322      	movs	r3, #34	@ 0x22
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	e600      	b.n	80055f4 <_strtod_l+0x454>
 80059f2:	bf00      	nop
 80059f4:	08008260 	.word	0x08008260
 80059f8:	fffffc02 	.word	0xfffffc02
 80059fc:	39500000 	.word	0x39500000
 8005a00:	7ff00000 	.word	0x7ff00000
 8005a04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005a08:	d165      	bne.n	8005ad6 <_strtod_l+0x936>
 8005a0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005a0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a10:	b35a      	cbz	r2, 8005a6a <_strtod_l+0x8ca>
 8005a12:	4a9f      	ldr	r2, [pc, #636]	@ (8005c90 <_strtod_l+0xaf0>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d12b      	bne.n	8005a70 <_strtod_l+0x8d0>
 8005a18:	9b08      	ldr	r3, [sp, #32]
 8005a1a:	4651      	mov	r1, sl
 8005a1c:	b303      	cbz	r3, 8005a60 <_strtod_l+0x8c0>
 8005a1e:	4b9d      	ldr	r3, [pc, #628]	@ (8005c94 <_strtod_l+0xaf4>)
 8005a20:	465a      	mov	r2, fp
 8005a22:	4013      	ands	r3, r2
 8005a24:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005a28:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2c:	d81b      	bhi.n	8005a66 <_strtod_l+0x8c6>
 8005a2e:	0d1b      	lsrs	r3, r3, #20
 8005a30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	4299      	cmp	r1, r3
 8005a3a:	d119      	bne.n	8005a70 <_strtod_l+0x8d0>
 8005a3c:	4b96      	ldr	r3, [pc, #600]	@ (8005c98 <_strtod_l+0xaf8>)
 8005a3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d102      	bne.n	8005a4a <_strtod_l+0x8aa>
 8005a44:	3101      	adds	r1, #1
 8005a46:	f43f adca 	beq.w	80055de <_strtod_l+0x43e>
 8005a4a:	4b92      	ldr	r3, [pc, #584]	@ (8005c94 <_strtod_l+0xaf4>)
 8005a4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a4e:	401a      	ands	r2, r3
 8005a50:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005a54:	f04f 0a00 	mov.w	sl, #0
 8005a58:	9b08      	ldr	r3, [sp, #32]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1b8      	bne.n	80059d0 <_strtod_l+0x830>
 8005a5e:	e5c9      	b.n	80055f4 <_strtod_l+0x454>
 8005a60:	f04f 33ff 	mov.w	r3, #4294967295
 8005a64:	e7e8      	b.n	8005a38 <_strtod_l+0x898>
 8005a66:	4613      	mov	r3, r2
 8005a68:	e7e6      	b.n	8005a38 <_strtod_l+0x898>
 8005a6a:	ea53 030a 	orrs.w	r3, r3, sl
 8005a6e:	d0a1      	beq.n	80059b4 <_strtod_l+0x814>
 8005a70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a72:	b1db      	cbz	r3, 8005aac <_strtod_l+0x90c>
 8005a74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a76:	4213      	tst	r3, r2
 8005a78:	d0ee      	beq.n	8005a58 <_strtod_l+0x8b8>
 8005a7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a7c:	9a08      	ldr	r2, [sp, #32]
 8005a7e:	4650      	mov	r0, sl
 8005a80:	4659      	mov	r1, fp
 8005a82:	b1bb      	cbz	r3, 8005ab4 <_strtod_l+0x914>
 8005a84:	f7ff fb6d 	bl	8005162 <sulp>
 8005a88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a8c:	ec53 2b10 	vmov	r2, r3, d0
 8005a90:	f7fa fc04 	bl	800029c <__adddf3>
 8005a94:	4682      	mov	sl, r0
 8005a96:	468b      	mov	fp, r1
 8005a98:	e7de      	b.n	8005a58 <_strtod_l+0x8b8>
 8005a9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005a9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005aa2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005aa6:	f04f 3aff 	mov.w	sl, #4294967295
 8005aaa:	e7d5      	b.n	8005a58 <_strtod_l+0x8b8>
 8005aac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005aae:	ea13 0f0a 	tst.w	r3, sl
 8005ab2:	e7e1      	b.n	8005a78 <_strtod_l+0x8d8>
 8005ab4:	f7ff fb55 	bl	8005162 <sulp>
 8005ab8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005abc:	ec53 2b10 	vmov	r2, r3, d0
 8005ac0:	f7fa fbea 	bl	8000298 <__aeabi_dsub>
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	4682      	mov	sl, r0
 8005aca:	468b      	mov	fp, r1
 8005acc:	f7fb f804 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d0c1      	beq.n	8005a58 <_strtod_l+0x8b8>
 8005ad4:	e619      	b.n	800570a <_strtod_l+0x56a>
 8005ad6:	4641      	mov	r1, r8
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f001 fc97 	bl	800740c <__ratio>
 8005ade:	ec57 6b10 	vmov	r6, r7, d0
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005ae8:	4630      	mov	r0, r6
 8005aea:	4639      	mov	r1, r7
 8005aec:	f7fb f808 	bl	8000b00 <__aeabi_dcmple>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	d06f      	beq.n	8005bd4 <_strtod_l+0xa34>
 8005af4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d17a      	bne.n	8005bf0 <_strtod_l+0xa50>
 8005afa:	f1ba 0f00 	cmp.w	sl, #0
 8005afe:	d158      	bne.n	8005bb2 <_strtod_l+0xa12>
 8005b00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d15a      	bne.n	8005bc0 <_strtod_l+0xa20>
 8005b0a:	4b64      	ldr	r3, [pc, #400]	@ (8005c9c <_strtod_l+0xafc>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	4630      	mov	r0, r6
 8005b10:	4639      	mov	r1, r7
 8005b12:	f7fa ffeb 	bl	8000aec <__aeabi_dcmplt>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	d159      	bne.n	8005bce <_strtod_l+0xa2e>
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	4b60      	ldr	r3, [pc, #384]	@ (8005ca0 <_strtod_l+0xb00>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	f7fa fd71 	bl	8000608 <__aeabi_dmul>
 8005b26:	4606      	mov	r6, r0
 8005b28:	460f      	mov	r7, r1
 8005b2a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005b2e:	9606      	str	r6, [sp, #24]
 8005b30:	9307      	str	r3, [sp, #28]
 8005b32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b36:	4d57      	ldr	r5, [pc, #348]	@ (8005c94 <_strtod_l+0xaf4>)
 8005b38:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b3e:	401d      	ands	r5, r3
 8005b40:	4b58      	ldr	r3, [pc, #352]	@ (8005ca4 <_strtod_l+0xb04>)
 8005b42:	429d      	cmp	r5, r3
 8005b44:	f040 80b2 	bne.w	8005cac <_strtod_l+0xb0c>
 8005b48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b4a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005b4e:	ec4b ab10 	vmov	d0, sl, fp
 8005b52:	f001 fb93 	bl	800727c <__ulp>
 8005b56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b5a:	ec51 0b10 	vmov	r0, r1, d0
 8005b5e:	f7fa fd53 	bl	8000608 <__aeabi_dmul>
 8005b62:	4652      	mov	r2, sl
 8005b64:	465b      	mov	r3, fp
 8005b66:	f7fa fb99 	bl	800029c <__adddf3>
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4949      	ldr	r1, [pc, #292]	@ (8005c94 <_strtod_l+0xaf4>)
 8005b6e:	4a4e      	ldr	r2, [pc, #312]	@ (8005ca8 <_strtod_l+0xb08>)
 8005b70:	4019      	ands	r1, r3
 8005b72:	4291      	cmp	r1, r2
 8005b74:	4682      	mov	sl, r0
 8005b76:	d942      	bls.n	8005bfe <_strtod_l+0xa5e>
 8005b78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b7a:	4b47      	ldr	r3, [pc, #284]	@ (8005c98 <_strtod_l+0xaf8>)
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d103      	bne.n	8005b88 <_strtod_l+0x9e8>
 8005b80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b82:	3301      	adds	r3, #1
 8005b84:	f43f ad2b 	beq.w	80055de <_strtod_l+0x43e>
 8005b88:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005c98 <_strtod_l+0xaf8>
 8005b8c:	f04f 3aff 	mov.w	sl, #4294967295
 8005b90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b92:	9805      	ldr	r0, [sp, #20]
 8005b94:	f001 f83e 	bl	8006c14 <_Bfree>
 8005b98:	9805      	ldr	r0, [sp, #20]
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	f001 f83a 	bl	8006c14 <_Bfree>
 8005ba0:	9805      	ldr	r0, [sp, #20]
 8005ba2:	4641      	mov	r1, r8
 8005ba4:	f001 f836 	bl	8006c14 <_Bfree>
 8005ba8:	9805      	ldr	r0, [sp, #20]
 8005baa:	4621      	mov	r1, r4
 8005bac:	f001 f832 	bl	8006c14 <_Bfree>
 8005bb0:	e618      	b.n	80057e4 <_strtod_l+0x644>
 8005bb2:	f1ba 0f01 	cmp.w	sl, #1
 8005bb6:	d103      	bne.n	8005bc0 <_strtod_l+0xa20>
 8005bb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f43f ada5 	beq.w	800570a <_strtod_l+0x56a>
 8005bc0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005c70 <_strtod_l+0xad0>
 8005bc4:	4f35      	ldr	r7, [pc, #212]	@ (8005c9c <_strtod_l+0xafc>)
 8005bc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005bca:	2600      	movs	r6, #0
 8005bcc:	e7b1      	b.n	8005b32 <_strtod_l+0x992>
 8005bce:	4f34      	ldr	r7, [pc, #208]	@ (8005ca0 <_strtod_l+0xb00>)
 8005bd0:	2600      	movs	r6, #0
 8005bd2:	e7aa      	b.n	8005b2a <_strtod_l+0x98a>
 8005bd4:	4b32      	ldr	r3, [pc, #200]	@ (8005ca0 <_strtod_l+0xb00>)
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	4639      	mov	r1, r7
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f7fa fd14 	bl	8000608 <__aeabi_dmul>
 8005be0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005be2:	4606      	mov	r6, r0
 8005be4:	460f      	mov	r7, r1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d09f      	beq.n	8005b2a <_strtod_l+0x98a>
 8005bea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005bee:	e7a0      	b.n	8005b32 <_strtod_l+0x992>
 8005bf0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005c78 <_strtod_l+0xad8>
 8005bf4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005bf8:	ec57 6b17 	vmov	r6, r7, d7
 8005bfc:	e799      	b.n	8005b32 <_strtod_l+0x992>
 8005bfe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005c02:	9b08      	ldr	r3, [sp, #32]
 8005c04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1c1      	bne.n	8005b90 <_strtod_l+0x9f0>
 8005c0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005c10:	0d1b      	lsrs	r3, r3, #20
 8005c12:	051b      	lsls	r3, r3, #20
 8005c14:	429d      	cmp	r5, r3
 8005c16:	d1bb      	bne.n	8005b90 <_strtod_l+0x9f0>
 8005c18:	4630      	mov	r0, r6
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	f7fb f82c 	bl	8000c78 <__aeabi_d2lz>
 8005c20:	f7fa fcc4 	bl	80005ac <__aeabi_l2d>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4630      	mov	r0, r6
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f7fa fb34 	bl	8000298 <__aeabi_dsub>
 8005c30:	460b      	mov	r3, r1
 8005c32:	4602      	mov	r2, r0
 8005c34:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005c38:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c3e:	ea46 060a 	orr.w	r6, r6, sl
 8005c42:	431e      	orrs	r6, r3
 8005c44:	d06f      	beq.n	8005d26 <_strtod_l+0xb86>
 8005c46:	a30e      	add	r3, pc, #56	@ (adr r3, 8005c80 <_strtod_l+0xae0>)
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	f7fa ff4e 	bl	8000aec <__aeabi_dcmplt>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	f47f accf 	bne.w	80055f4 <_strtod_l+0x454>
 8005c56:	a30c      	add	r3, pc, #48	@ (adr r3, 8005c88 <_strtod_l+0xae8>)
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c60:	f7fa ff62 	bl	8000b28 <__aeabi_dcmpgt>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d093      	beq.n	8005b90 <_strtod_l+0x9f0>
 8005c68:	e4c4      	b.n	80055f4 <_strtod_l+0x454>
 8005c6a:	bf00      	nop
 8005c6c:	f3af 8000 	nop.w
 8005c70:	00000000 	.word	0x00000000
 8005c74:	bff00000 	.word	0xbff00000
 8005c78:	00000000 	.word	0x00000000
 8005c7c:	3ff00000 	.word	0x3ff00000
 8005c80:	94a03595 	.word	0x94a03595
 8005c84:	3fdfffff 	.word	0x3fdfffff
 8005c88:	35afe535 	.word	0x35afe535
 8005c8c:	3fe00000 	.word	0x3fe00000
 8005c90:	000fffff 	.word	0x000fffff
 8005c94:	7ff00000 	.word	0x7ff00000
 8005c98:	7fefffff 	.word	0x7fefffff
 8005c9c:	3ff00000 	.word	0x3ff00000
 8005ca0:	3fe00000 	.word	0x3fe00000
 8005ca4:	7fe00000 	.word	0x7fe00000
 8005ca8:	7c9fffff 	.word	0x7c9fffff
 8005cac:	9b08      	ldr	r3, [sp, #32]
 8005cae:	b323      	cbz	r3, 8005cfa <_strtod_l+0xb5a>
 8005cb0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005cb4:	d821      	bhi.n	8005cfa <_strtod_l+0xb5a>
 8005cb6:	a328      	add	r3, pc, #160	@ (adr r3, 8005d58 <_strtod_l+0xbb8>)
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	f7fa ff1e 	bl	8000b00 <__aeabi_dcmple>
 8005cc4:	b1a0      	cbz	r0, 8005cf0 <_strtod_l+0xb50>
 8005cc6:	4639      	mov	r1, r7
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f7fa ff4d 	bl	8000b68 <__aeabi_d2uiz>
 8005cce:	2801      	cmp	r0, #1
 8005cd0:	bf38      	it	cc
 8005cd2:	2001      	movcc	r0, #1
 8005cd4:	f7fa fc1e 	bl	8000514 <__aeabi_ui2d>
 8005cd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cda:	4606      	mov	r6, r0
 8005cdc:	460f      	mov	r7, r1
 8005cde:	b9fb      	cbnz	r3, 8005d20 <_strtod_l+0xb80>
 8005ce0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ce4:	9014      	str	r0, [sp, #80]	@ 0x50
 8005ce6:	9315      	str	r3, [sp, #84]	@ 0x54
 8005ce8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005cec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005cf0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005cf2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005cf6:	1b5b      	subs	r3, r3, r5
 8005cf8:	9311      	str	r3, [sp, #68]	@ 0x44
 8005cfa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005cfe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005d02:	f001 fabb 	bl	800727c <__ulp>
 8005d06:	4650      	mov	r0, sl
 8005d08:	ec53 2b10 	vmov	r2, r3, d0
 8005d0c:	4659      	mov	r1, fp
 8005d0e:	f7fa fc7b 	bl	8000608 <__aeabi_dmul>
 8005d12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005d16:	f7fa fac1 	bl	800029c <__adddf3>
 8005d1a:	4682      	mov	sl, r0
 8005d1c:	468b      	mov	fp, r1
 8005d1e:	e770      	b.n	8005c02 <_strtod_l+0xa62>
 8005d20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005d24:	e7e0      	b.n	8005ce8 <_strtod_l+0xb48>
 8005d26:	a30e      	add	r3, pc, #56	@ (adr r3, 8005d60 <_strtod_l+0xbc0>)
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f7fa fede 	bl	8000aec <__aeabi_dcmplt>
 8005d30:	e798      	b.n	8005c64 <_strtod_l+0xac4>
 8005d32:	2300      	movs	r3, #0
 8005d34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d36:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005d38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	f7ff ba6d 	b.w	800521a <_strtod_l+0x7a>
 8005d40:	2a65      	cmp	r2, #101	@ 0x65
 8005d42:	f43f ab66 	beq.w	8005412 <_strtod_l+0x272>
 8005d46:	2a45      	cmp	r2, #69	@ 0x45
 8005d48:	f43f ab63 	beq.w	8005412 <_strtod_l+0x272>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f7ff bb9e 	b.w	800548e <_strtod_l+0x2ee>
 8005d52:	bf00      	nop
 8005d54:	f3af 8000 	nop.w
 8005d58:	ffc00000 	.word	0xffc00000
 8005d5c:	41dfffff 	.word	0x41dfffff
 8005d60:	94a03595 	.word	0x94a03595
 8005d64:	3fcfffff 	.word	0x3fcfffff

08005d68 <strtod>:
 8005d68:	460a      	mov	r2, r1
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	4802      	ldr	r0, [pc, #8]	@ (8005d78 <strtod+0x10>)
 8005d6e:	4b03      	ldr	r3, [pc, #12]	@ (8005d7c <strtod+0x14>)
 8005d70:	6800      	ldr	r0, [r0, #0]
 8005d72:	f7ff ba15 	b.w	80051a0 <_strtod_l>
 8005d76:	bf00      	nop
 8005d78:	20000184 	.word	0x20000184
 8005d7c:	20000018 	.word	0x20000018

08005d80 <_strtol_l.constprop.0>:
 8005d80:	2b24      	cmp	r3, #36	@ 0x24
 8005d82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d86:	4686      	mov	lr, r0
 8005d88:	4690      	mov	r8, r2
 8005d8a:	d801      	bhi.n	8005d90 <_strtol_l.constprop.0+0x10>
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d106      	bne.n	8005d9e <_strtol_l.constprop.0+0x1e>
 8005d90:	f000 fa52 	bl	8006238 <__errno>
 8005d94:	2316      	movs	r3, #22
 8005d96:	6003      	str	r3, [r0, #0]
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9e:	4834      	ldr	r0, [pc, #208]	@ (8005e70 <_strtol_l.constprop.0+0xf0>)
 8005da0:	460d      	mov	r5, r1
 8005da2:	462a      	mov	r2, r5
 8005da4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005da8:	5d06      	ldrb	r6, [r0, r4]
 8005daa:	f016 0608 	ands.w	r6, r6, #8
 8005dae:	d1f8      	bne.n	8005da2 <_strtol_l.constprop.0+0x22>
 8005db0:	2c2d      	cmp	r4, #45	@ 0x2d
 8005db2:	d12d      	bne.n	8005e10 <_strtol_l.constprop.0+0x90>
 8005db4:	782c      	ldrb	r4, [r5, #0]
 8005db6:	2601      	movs	r6, #1
 8005db8:	1c95      	adds	r5, r2, #2
 8005dba:	f033 0210 	bics.w	r2, r3, #16
 8005dbe:	d109      	bne.n	8005dd4 <_strtol_l.constprop.0+0x54>
 8005dc0:	2c30      	cmp	r4, #48	@ 0x30
 8005dc2:	d12a      	bne.n	8005e1a <_strtol_l.constprop.0+0x9a>
 8005dc4:	782a      	ldrb	r2, [r5, #0]
 8005dc6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005dca:	2a58      	cmp	r2, #88	@ 0x58
 8005dcc:	d125      	bne.n	8005e1a <_strtol_l.constprop.0+0x9a>
 8005dce:	786c      	ldrb	r4, [r5, #1]
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	3502      	adds	r5, #2
 8005dd4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005dd8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005ddc:	2200      	movs	r2, #0
 8005dde:	fbbc f9f3 	udiv	r9, ip, r3
 8005de2:	4610      	mov	r0, r2
 8005de4:	fb03 ca19 	mls	sl, r3, r9, ip
 8005de8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005dec:	2f09      	cmp	r7, #9
 8005dee:	d81b      	bhi.n	8005e28 <_strtol_l.constprop.0+0xa8>
 8005df0:	463c      	mov	r4, r7
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	dd27      	ble.n	8005e46 <_strtol_l.constprop.0+0xc6>
 8005df6:	1c57      	adds	r7, r2, #1
 8005df8:	d007      	beq.n	8005e0a <_strtol_l.constprop.0+0x8a>
 8005dfa:	4581      	cmp	r9, r0
 8005dfc:	d320      	bcc.n	8005e40 <_strtol_l.constprop.0+0xc0>
 8005dfe:	d101      	bne.n	8005e04 <_strtol_l.constprop.0+0x84>
 8005e00:	45a2      	cmp	sl, r4
 8005e02:	db1d      	blt.n	8005e40 <_strtol_l.constprop.0+0xc0>
 8005e04:	fb00 4003 	mla	r0, r0, r3, r4
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e0e:	e7eb      	b.n	8005de8 <_strtol_l.constprop.0+0x68>
 8005e10:	2c2b      	cmp	r4, #43	@ 0x2b
 8005e12:	bf04      	itt	eq
 8005e14:	782c      	ldrbeq	r4, [r5, #0]
 8005e16:	1c95      	addeq	r5, r2, #2
 8005e18:	e7cf      	b.n	8005dba <_strtol_l.constprop.0+0x3a>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1da      	bne.n	8005dd4 <_strtol_l.constprop.0+0x54>
 8005e1e:	2c30      	cmp	r4, #48	@ 0x30
 8005e20:	bf0c      	ite	eq
 8005e22:	2308      	moveq	r3, #8
 8005e24:	230a      	movne	r3, #10
 8005e26:	e7d5      	b.n	8005dd4 <_strtol_l.constprop.0+0x54>
 8005e28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005e2c:	2f19      	cmp	r7, #25
 8005e2e:	d801      	bhi.n	8005e34 <_strtol_l.constprop.0+0xb4>
 8005e30:	3c37      	subs	r4, #55	@ 0x37
 8005e32:	e7de      	b.n	8005df2 <_strtol_l.constprop.0+0x72>
 8005e34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005e38:	2f19      	cmp	r7, #25
 8005e3a:	d804      	bhi.n	8005e46 <_strtol_l.constprop.0+0xc6>
 8005e3c:	3c57      	subs	r4, #87	@ 0x57
 8005e3e:	e7d8      	b.n	8005df2 <_strtol_l.constprop.0+0x72>
 8005e40:	f04f 32ff 	mov.w	r2, #4294967295
 8005e44:	e7e1      	b.n	8005e0a <_strtol_l.constprop.0+0x8a>
 8005e46:	1c53      	adds	r3, r2, #1
 8005e48:	d108      	bne.n	8005e5c <_strtol_l.constprop.0+0xdc>
 8005e4a:	2322      	movs	r3, #34	@ 0x22
 8005e4c:	f8ce 3000 	str.w	r3, [lr]
 8005e50:	4660      	mov	r0, ip
 8005e52:	f1b8 0f00 	cmp.w	r8, #0
 8005e56:	d0a0      	beq.n	8005d9a <_strtol_l.constprop.0+0x1a>
 8005e58:	1e69      	subs	r1, r5, #1
 8005e5a:	e006      	b.n	8005e6a <_strtol_l.constprop.0+0xea>
 8005e5c:	b106      	cbz	r6, 8005e60 <_strtol_l.constprop.0+0xe0>
 8005e5e:	4240      	negs	r0, r0
 8005e60:	f1b8 0f00 	cmp.w	r8, #0
 8005e64:	d099      	beq.n	8005d9a <_strtol_l.constprop.0+0x1a>
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	d1f6      	bne.n	8005e58 <_strtol_l.constprop.0+0xd8>
 8005e6a:	f8c8 1000 	str.w	r1, [r8]
 8005e6e:	e794      	b.n	8005d9a <_strtol_l.constprop.0+0x1a>
 8005e70:	08008289 	.word	0x08008289

08005e74 <strtol>:
 8005e74:	4613      	mov	r3, r2
 8005e76:	460a      	mov	r2, r1
 8005e78:	4601      	mov	r1, r0
 8005e7a:	4802      	ldr	r0, [pc, #8]	@ (8005e84 <strtol+0x10>)
 8005e7c:	6800      	ldr	r0, [r0, #0]
 8005e7e:	f7ff bf7f 	b.w	8005d80 <_strtol_l.constprop.0>
 8005e82:	bf00      	nop
 8005e84:	20000184 	.word	0x20000184

08005e88 <std>:
 8005e88:	2300      	movs	r3, #0
 8005e8a:	b510      	push	{r4, lr}
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e96:	6083      	str	r3, [r0, #8]
 8005e98:	8181      	strh	r1, [r0, #12]
 8005e9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e9c:	81c2      	strh	r2, [r0, #14]
 8005e9e:	6183      	str	r3, [r0, #24]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	305c      	adds	r0, #92	@ 0x5c
 8005ea6:	f000 f8f4 	bl	8006092 <memset>
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee0 <std+0x58>)
 8005eac:	6263      	str	r3, [r4, #36]	@ 0x24
 8005eae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee4 <std+0x5c>)
 8005eb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee8 <std+0x60>)
 8005eb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005eec <std+0x64>)
 8005eb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005eba:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef0 <std+0x68>)
 8005ebc:	6224      	str	r4, [r4, #32]
 8005ebe:	429c      	cmp	r4, r3
 8005ec0:	d006      	beq.n	8005ed0 <std+0x48>
 8005ec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ec6:	4294      	cmp	r4, r2
 8005ec8:	d002      	beq.n	8005ed0 <std+0x48>
 8005eca:	33d0      	adds	r3, #208	@ 0xd0
 8005ecc:	429c      	cmp	r4, r3
 8005ece:	d105      	bne.n	8005edc <std+0x54>
 8005ed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed8:	f000 b9d8 	b.w	800628c <__retarget_lock_init_recursive>
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	bf00      	nop
 8005ee0:	0800600d 	.word	0x0800600d
 8005ee4:	0800602f 	.word	0x0800602f
 8005ee8:	08006067 	.word	0x08006067
 8005eec:	0800608b 	.word	0x0800608b
 8005ef0:	20000438 	.word	0x20000438

08005ef4 <stdio_exit_handler>:
 8005ef4:	4a02      	ldr	r2, [pc, #8]	@ (8005f00 <stdio_exit_handler+0xc>)
 8005ef6:	4903      	ldr	r1, [pc, #12]	@ (8005f04 <stdio_exit_handler+0x10>)
 8005ef8:	4803      	ldr	r0, [pc, #12]	@ (8005f08 <stdio_exit_handler+0x14>)
 8005efa:	f000 b869 	b.w	8005fd0 <_fwalk_sglue>
 8005efe:	bf00      	nop
 8005f00:	2000000c 	.word	0x2000000c
 8005f04:	0800761d 	.word	0x0800761d
 8005f08:	20000188 	.word	0x20000188

08005f0c <cleanup_stdio>:
 8005f0c:	6841      	ldr	r1, [r0, #4]
 8005f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f40 <cleanup_stdio+0x34>)
 8005f10:	4299      	cmp	r1, r3
 8005f12:	b510      	push	{r4, lr}
 8005f14:	4604      	mov	r4, r0
 8005f16:	d001      	beq.n	8005f1c <cleanup_stdio+0x10>
 8005f18:	f001 fb80 	bl	800761c <_fflush_r>
 8005f1c:	68a1      	ldr	r1, [r4, #8]
 8005f1e:	4b09      	ldr	r3, [pc, #36]	@ (8005f44 <cleanup_stdio+0x38>)
 8005f20:	4299      	cmp	r1, r3
 8005f22:	d002      	beq.n	8005f2a <cleanup_stdio+0x1e>
 8005f24:	4620      	mov	r0, r4
 8005f26:	f001 fb79 	bl	800761c <_fflush_r>
 8005f2a:	68e1      	ldr	r1, [r4, #12]
 8005f2c:	4b06      	ldr	r3, [pc, #24]	@ (8005f48 <cleanup_stdio+0x3c>)
 8005f2e:	4299      	cmp	r1, r3
 8005f30:	d004      	beq.n	8005f3c <cleanup_stdio+0x30>
 8005f32:	4620      	mov	r0, r4
 8005f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f38:	f001 bb70 	b.w	800761c <_fflush_r>
 8005f3c:	bd10      	pop	{r4, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000438 	.word	0x20000438
 8005f44:	200004a0 	.word	0x200004a0
 8005f48:	20000508 	.word	0x20000508

08005f4c <global_stdio_init.part.0>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f7c <global_stdio_init.part.0+0x30>)
 8005f50:	4c0b      	ldr	r4, [pc, #44]	@ (8005f80 <global_stdio_init.part.0+0x34>)
 8005f52:	4a0c      	ldr	r2, [pc, #48]	@ (8005f84 <global_stdio_init.part.0+0x38>)
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	4620      	mov	r0, r4
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2104      	movs	r1, #4
 8005f5c:	f7ff ff94 	bl	8005e88 <std>
 8005f60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f64:	2201      	movs	r2, #1
 8005f66:	2109      	movs	r1, #9
 8005f68:	f7ff ff8e 	bl	8005e88 <std>
 8005f6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f70:	2202      	movs	r2, #2
 8005f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f76:	2112      	movs	r1, #18
 8005f78:	f7ff bf86 	b.w	8005e88 <std>
 8005f7c:	20000570 	.word	0x20000570
 8005f80:	20000438 	.word	0x20000438
 8005f84:	08005ef5 	.word	0x08005ef5

08005f88 <__sfp_lock_acquire>:
 8005f88:	4801      	ldr	r0, [pc, #4]	@ (8005f90 <__sfp_lock_acquire+0x8>)
 8005f8a:	f000 b980 	b.w	800628e <__retarget_lock_acquire_recursive>
 8005f8e:	bf00      	nop
 8005f90:	20000579 	.word	0x20000579

08005f94 <__sfp_lock_release>:
 8005f94:	4801      	ldr	r0, [pc, #4]	@ (8005f9c <__sfp_lock_release+0x8>)
 8005f96:	f000 b97b 	b.w	8006290 <__retarget_lock_release_recursive>
 8005f9a:	bf00      	nop
 8005f9c:	20000579 	.word	0x20000579

08005fa0 <__sinit>:
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	f7ff fff0 	bl	8005f88 <__sfp_lock_acquire>
 8005fa8:	6a23      	ldr	r3, [r4, #32]
 8005faa:	b11b      	cbz	r3, 8005fb4 <__sinit+0x14>
 8005fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb0:	f7ff bff0 	b.w	8005f94 <__sfp_lock_release>
 8005fb4:	4b04      	ldr	r3, [pc, #16]	@ (8005fc8 <__sinit+0x28>)
 8005fb6:	6223      	str	r3, [r4, #32]
 8005fb8:	4b04      	ldr	r3, [pc, #16]	@ (8005fcc <__sinit+0x2c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1f5      	bne.n	8005fac <__sinit+0xc>
 8005fc0:	f7ff ffc4 	bl	8005f4c <global_stdio_init.part.0>
 8005fc4:	e7f2      	b.n	8005fac <__sinit+0xc>
 8005fc6:	bf00      	nop
 8005fc8:	08005f0d 	.word	0x08005f0d
 8005fcc:	20000570 	.word	0x20000570

08005fd0 <_fwalk_sglue>:
 8005fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	4688      	mov	r8, r1
 8005fd8:	4614      	mov	r4, r2
 8005fda:	2600      	movs	r6, #0
 8005fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8005fe4:	d505      	bpl.n	8005ff2 <_fwalk_sglue+0x22>
 8005fe6:	6824      	ldr	r4, [r4, #0]
 8005fe8:	2c00      	cmp	r4, #0
 8005fea:	d1f7      	bne.n	8005fdc <_fwalk_sglue+0xc>
 8005fec:	4630      	mov	r0, r6
 8005fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d907      	bls.n	8006008 <_fwalk_sglue+0x38>
 8005ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	d003      	beq.n	8006008 <_fwalk_sglue+0x38>
 8006000:	4629      	mov	r1, r5
 8006002:	4638      	mov	r0, r7
 8006004:	47c0      	blx	r8
 8006006:	4306      	orrs	r6, r0
 8006008:	3568      	adds	r5, #104	@ 0x68
 800600a:	e7e9      	b.n	8005fe0 <_fwalk_sglue+0x10>

0800600c <__sread>:
 800600c:	b510      	push	{r4, lr}
 800600e:	460c      	mov	r4, r1
 8006010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006014:	f000 f8ec 	bl	80061f0 <_read_r>
 8006018:	2800      	cmp	r0, #0
 800601a:	bfab      	itete	ge
 800601c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800601e:	89a3      	ldrhlt	r3, [r4, #12]
 8006020:	181b      	addge	r3, r3, r0
 8006022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006026:	bfac      	ite	ge
 8006028:	6563      	strge	r3, [r4, #84]	@ 0x54
 800602a:	81a3      	strhlt	r3, [r4, #12]
 800602c:	bd10      	pop	{r4, pc}

0800602e <__swrite>:
 800602e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006032:	461f      	mov	r7, r3
 8006034:	898b      	ldrh	r3, [r1, #12]
 8006036:	05db      	lsls	r3, r3, #23
 8006038:	4605      	mov	r5, r0
 800603a:	460c      	mov	r4, r1
 800603c:	4616      	mov	r6, r2
 800603e:	d505      	bpl.n	800604c <__swrite+0x1e>
 8006040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006044:	2302      	movs	r3, #2
 8006046:	2200      	movs	r2, #0
 8006048:	f000 f8c0 	bl	80061cc <_lseek_r>
 800604c:	89a3      	ldrh	r3, [r4, #12]
 800604e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006056:	81a3      	strh	r3, [r4, #12]
 8006058:	4632      	mov	r2, r6
 800605a:	463b      	mov	r3, r7
 800605c:	4628      	mov	r0, r5
 800605e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006062:	f000 b8d7 	b.w	8006214 <_write_r>

08006066 <__sseek>:
 8006066:	b510      	push	{r4, lr}
 8006068:	460c      	mov	r4, r1
 800606a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800606e:	f000 f8ad 	bl	80061cc <_lseek_r>
 8006072:	1c43      	adds	r3, r0, #1
 8006074:	89a3      	ldrh	r3, [r4, #12]
 8006076:	bf15      	itete	ne
 8006078:	6560      	strne	r0, [r4, #84]	@ 0x54
 800607a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800607e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006082:	81a3      	strheq	r3, [r4, #12]
 8006084:	bf18      	it	ne
 8006086:	81a3      	strhne	r3, [r4, #12]
 8006088:	bd10      	pop	{r4, pc}

0800608a <__sclose>:
 800608a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608e:	f000 b88d 	b.w	80061ac <_close_r>

08006092 <memset>:
 8006092:	4402      	add	r2, r0
 8006094:	4603      	mov	r3, r0
 8006096:	4293      	cmp	r3, r2
 8006098:	d100      	bne.n	800609c <memset+0xa>
 800609a:	4770      	bx	lr
 800609c:	f803 1b01 	strb.w	r1, [r3], #1
 80060a0:	e7f9      	b.n	8006096 <memset+0x4>

080060a2 <strncmp>:
 80060a2:	b510      	push	{r4, lr}
 80060a4:	b16a      	cbz	r2, 80060c2 <strncmp+0x20>
 80060a6:	3901      	subs	r1, #1
 80060a8:	1884      	adds	r4, r0, r2
 80060aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d103      	bne.n	80060be <strncmp+0x1c>
 80060b6:	42a0      	cmp	r0, r4
 80060b8:	d001      	beq.n	80060be <strncmp+0x1c>
 80060ba:	2a00      	cmp	r2, #0
 80060bc:	d1f5      	bne.n	80060aa <strncmp+0x8>
 80060be:	1ad0      	subs	r0, r2, r3
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	4610      	mov	r0, r2
 80060c4:	e7fc      	b.n	80060c0 <strncmp+0x1e>
	...

080060c8 <strtok>:
 80060c8:	4b16      	ldr	r3, [pc, #88]	@ (8006124 <strtok+0x5c>)
 80060ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ce:	681f      	ldr	r7, [r3, #0]
 80060d0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80060d2:	4605      	mov	r5, r0
 80060d4:	460e      	mov	r6, r1
 80060d6:	b9ec      	cbnz	r4, 8006114 <strtok+0x4c>
 80060d8:	2050      	movs	r0, #80	@ 0x50
 80060da:	f000 fc93 	bl	8006a04 <malloc>
 80060de:	4602      	mov	r2, r0
 80060e0:	6478      	str	r0, [r7, #68]	@ 0x44
 80060e2:	b920      	cbnz	r0, 80060ee <strtok+0x26>
 80060e4:	4b10      	ldr	r3, [pc, #64]	@ (8006128 <strtok+0x60>)
 80060e6:	4811      	ldr	r0, [pc, #68]	@ (800612c <strtok+0x64>)
 80060e8:	215b      	movs	r1, #91	@ 0x5b
 80060ea:	f000 f8e9 	bl	80062c0 <__assert_func>
 80060ee:	e9c0 4400 	strd	r4, r4, [r0]
 80060f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80060f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80060fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80060fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006102:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006106:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800610a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800610e:	6184      	str	r4, [r0, #24]
 8006110:	7704      	strb	r4, [r0, #28]
 8006112:	6244      	str	r4, [r0, #36]	@ 0x24
 8006114:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006116:	4631      	mov	r1, r6
 8006118:	4628      	mov	r0, r5
 800611a:	2301      	movs	r3, #1
 800611c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006120:	f000 b806 	b.w	8006130 <__strtok_r>
 8006124:	20000184 	.word	0x20000184
 8006128:	08008389 	.word	0x08008389
 800612c:	080083a0 	.word	0x080083a0

08006130 <__strtok_r>:
 8006130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006132:	4604      	mov	r4, r0
 8006134:	b908      	cbnz	r0, 800613a <__strtok_r+0xa>
 8006136:	6814      	ldr	r4, [r2, #0]
 8006138:	b144      	cbz	r4, 800614c <__strtok_r+0x1c>
 800613a:	4620      	mov	r0, r4
 800613c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006140:	460f      	mov	r7, r1
 8006142:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006146:	b91e      	cbnz	r6, 8006150 <__strtok_r+0x20>
 8006148:	b965      	cbnz	r5, 8006164 <__strtok_r+0x34>
 800614a:	6015      	str	r5, [r2, #0]
 800614c:	2000      	movs	r0, #0
 800614e:	e005      	b.n	800615c <__strtok_r+0x2c>
 8006150:	42b5      	cmp	r5, r6
 8006152:	d1f6      	bne.n	8006142 <__strtok_r+0x12>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1f0      	bne.n	800613a <__strtok_r+0xa>
 8006158:	6014      	str	r4, [r2, #0]
 800615a:	7003      	strb	r3, [r0, #0]
 800615c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800615e:	461c      	mov	r4, r3
 8006160:	e00c      	b.n	800617c <__strtok_r+0x4c>
 8006162:	b915      	cbnz	r5, 800616a <__strtok_r+0x3a>
 8006164:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006168:	460e      	mov	r6, r1
 800616a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800616e:	42ab      	cmp	r3, r5
 8006170:	d1f7      	bne.n	8006162 <__strtok_r+0x32>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0f3      	beq.n	800615e <__strtok_r+0x2e>
 8006176:	2300      	movs	r3, #0
 8006178:	f804 3c01 	strb.w	r3, [r4, #-1]
 800617c:	6014      	str	r4, [r2, #0]
 800617e:	e7ed      	b.n	800615c <__strtok_r+0x2c>

08006180 <strstr>:
 8006180:	780a      	ldrb	r2, [r1, #0]
 8006182:	b570      	push	{r4, r5, r6, lr}
 8006184:	b96a      	cbnz	r2, 80061a2 <strstr+0x22>
 8006186:	bd70      	pop	{r4, r5, r6, pc}
 8006188:	429a      	cmp	r2, r3
 800618a:	d109      	bne.n	80061a0 <strstr+0x20>
 800618c:	460c      	mov	r4, r1
 800618e:	4605      	mov	r5, r0
 8006190:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0f6      	beq.n	8006186 <strstr+0x6>
 8006198:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800619c:	429e      	cmp	r6, r3
 800619e:	d0f7      	beq.n	8006190 <strstr+0x10>
 80061a0:	3001      	adds	r0, #1
 80061a2:	7803      	ldrb	r3, [r0, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1ef      	bne.n	8006188 <strstr+0x8>
 80061a8:	4618      	mov	r0, r3
 80061aa:	e7ec      	b.n	8006186 <strstr+0x6>

080061ac <_close_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4d06      	ldr	r5, [pc, #24]	@ (80061c8 <_close_r+0x1c>)
 80061b0:	2300      	movs	r3, #0
 80061b2:	4604      	mov	r4, r0
 80061b4:	4608      	mov	r0, r1
 80061b6:	602b      	str	r3, [r5, #0]
 80061b8:	f7fb fdb4 	bl	8001d24 <_close>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_close_r+0x1a>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_close_r+0x1a>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	20000574 	.word	0x20000574

080061cc <_lseek_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d07      	ldr	r5, [pc, #28]	@ (80061ec <_lseek_r+0x20>)
 80061d0:	4604      	mov	r4, r0
 80061d2:	4608      	mov	r0, r1
 80061d4:	4611      	mov	r1, r2
 80061d6:	2200      	movs	r2, #0
 80061d8:	602a      	str	r2, [r5, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	f7fb fdc9 	bl	8001d72 <_lseek>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_lseek_r+0x1e>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_lseek_r+0x1e>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	20000574 	.word	0x20000574

080061f0 <_read_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d07      	ldr	r5, [pc, #28]	@ (8006210 <_read_r+0x20>)
 80061f4:	4604      	mov	r4, r0
 80061f6:	4608      	mov	r0, r1
 80061f8:	4611      	mov	r1, r2
 80061fa:	2200      	movs	r2, #0
 80061fc:	602a      	str	r2, [r5, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	f7fb fd57 	bl	8001cb2 <_read>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d102      	bne.n	800620e <_read_r+0x1e>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	b103      	cbz	r3, 800620e <_read_r+0x1e>
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	20000574 	.word	0x20000574

08006214 <_write_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4d07      	ldr	r5, [pc, #28]	@ (8006234 <_write_r+0x20>)
 8006218:	4604      	mov	r4, r0
 800621a:	4608      	mov	r0, r1
 800621c:	4611      	mov	r1, r2
 800621e:	2200      	movs	r2, #0
 8006220:	602a      	str	r2, [r5, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	f7fb fd62 	bl	8001cec <_write>
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	d102      	bne.n	8006232 <_write_r+0x1e>
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	b103      	cbz	r3, 8006232 <_write_r+0x1e>
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	bd38      	pop	{r3, r4, r5, pc}
 8006234:	20000574 	.word	0x20000574

08006238 <__errno>:
 8006238:	4b01      	ldr	r3, [pc, #4]	@ (8006240 <__errno+0x8>)
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20000184 	.word	0x20000184

08006244 <__libc_init_array>:
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	4d0d      	ldr	r5, [pc, #52]	@ (800627c <__libc_init_array+0x38>)
 8006248:	4c0d      	ldr	r4, [pc, #52]	@ (8006280 <__libc_init_array+0x3c>)
 800624a:	1b64      	subs	r4, r4, r5
 800624c:	10a4      	asrs	r4, r4, #2
 800624e:	2600      	movs	r6, #0
 8006250:	42a6      	cmp	r6, r4
 8006252:	d109      	bne.n	8006268 <__libc_init_array+0x24>
 8006254:	4d0b      	ldr	r5, [pc, #44]	@ (8006284 <__libc_init_array+0x40>)
 8006256:	4c0c      	ldr	r4, [pc, #48]	@ (8006288 <__libc_init_array+0x44>)
 8006258:	f001 ffa8 	bl	80081ac <_init>
 800625c:	1b64      	subs	r4, r4, r5
 800625e:	10a4      	asrs	r4, r4, #2
 8006260:	2600      	movs	r6, #0
 8006262:	42a6      	cmp	r6, r4
 8006264:	d105      	bne.n	8006272 <__libc_init_array+0x2e>
 8006266:	bd70      	pop	{r4, r5, r6, pc}
 8006268:	f855 3b04 	ldr.w	r3, [r5], #4
 800626c:	4798      	blx	r3
 800626e:	3601      	adds	r6, #1
 8006270:	e7ee      	b.n	8006250 <__libc_init_array+0xc>
 8006272:	f855 3b04 	ldr.w	r3, [r5], #4
 8006276:	4798      	blx	r3
 8006278:	3601      	adds	r6, #1
 800627a:	e7f2      	b.n	8006262 <__libc_init_array+0x1e>
 800627c:	08008658 	.word	0x08008658
 8006280:	08008658 	.word	0x08008658
 8006284:	08008658 	.word	0x08008658
 8006288:	0800865c 	.word	0x0800865c

0800628c <__retarget_lock_init_recursive>:
 800628c:	4770      	bx	lr

0800628e <__retarget_lock_acquire_recursive>:
 800628e:	4770      	bx	lr

08006290 <__retarget_lock_release_recursive>:
 8006290:	4770      	bx	lr

08006292 <memcpy>:
 8006292:	440a      	add	r2, r1
 8006294:	4291      	cmp	r1, r2
 8006296:	f100 33ff 	add.w	r3, r0, #4294967295
 800629a:	d100      	bne.n	800629e <memcpy+0xc>
 800629c:	4770      	bx	lr
 800629e:	b510      	push	{r4, lr}
 80062a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062a8:	4291      	cmp	r1, r2
 80062aa:	d1f9      	bne.n	80062a0 <memcpy+0xe>
 80062ac:	bd10      	pop	{r4, pc}
	...

080062b0 <nan>:
 80062b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80062b8 <nan+0x8>
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	00000000 	.word	0x00000000
 80062bc:	7ff80000 	.word	0x7ff80000

080062c0 <__assert_func>:
 80062c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062c2:	4614      	mov	r4, r2
 80062c4:	461a      	mov	r2, r3
 80062c6:	4b09      	ldr	r3, [pc, #36]	@ (80062ec <__assert_func+0x2c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4605      	mov	r5, r0
 80062cc:	68d8      	ldr	r0, [r3, #12]
 80062ce:	b954      	cbnz	r4, 80062e6 <__assert_func+0x26>
 80062d0:	4b07      	ldr	r3, [pc, #28]	@ (80062f0 <__assert_func+0x30>)
 80062d2:	461c      	mov	r4, r3
 80062d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062d8:	9100      	str	r1, [sp, #0]
 80062da:	462b      	mov	r3, r5
 80062dc:	4905      	ldr	r1, [pc, #20]	@ (80062f4 <__assert_func+0x34>)
 80062de:	f001 f9c5 	bl	800766c <fiprintf>
 80062e2:	f001 f9e5 	bl	80076b0 <abort>
 80062e6:	4b04      	ldr	r3, [pc, #16]	@ (80062f8 <__assert_func+0x38>)
 80062e8:	e7f4      	b.n	80062d4 <__assert_func+0x14>
 80062ea:	bf00      	nop
 80062ec:	20000184 	.word	0x20000184
 80062f0:	0800843d 	.word	0x0800843d
 80062f4:	0800840f 	.word	0x0800840f
 80062f8:	08008402 	.word	0x08008402

080062fc <_free_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4605      	mov	r5, r0
 8006300:	2900      	cmp	r1, #0
 8006302:	d041      	beq.n	8006388 <_free_r+0x8c>
 8006304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006308:	1f0c      	subs	r4, r1, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	bfb8      	it	lt
 800630e:	18e4      	addlt	r4, r4, r3
 8006310:	f000 fc34 	bl	8006b7c <__malloc_lock>
 8006314:	4a1d      	ldr	r2, [pc, #116]	@ (800638c <_free_r+0x90>)
 8006316:	6813      	ldr	r3, [r2, #0]
 8006318:	b933      	cbnz	r3, 8006328 <_free_r+0x2c>
 800631a:	6063      	str	r3, [r4, #4]
 800631c:	6014      	str	r4, [r2, #0]
 800631e:	4628      	mov	r0, r5
 8006320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006324:	f000 bc30 	b.w	8006b88 <__malloc_unlock>
 8006328:	42a3      	cmp	r3, r4
 800632a:	d908      	bls.n	800633e <_free_r+0x42>
 800632c:	6820      	ldr	r0, [r4, #0]
 800632e:	1821      	adds	r1, r4, r0
 8006330:	428b      	cmp	r3, r1
 8006332:	bf01      	itttt	eq
 8006334:	6819      	ldreq	r1, [r3, #0]
 8006336:	685b      	ldreq	r3, [r3, #4]
 8006338:	1809      	addeq	r1, r1, r0
 800633a:	6021      	streq	r1, [r4, #0]
 800633c:	e7ed      	b.n	800631a <_free_r+0x1e>
 800633e:	461a      	mov	r2, r3
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	b10b      	cbz	r3, 8006348 <_free_r+0x4c>
 8006344:	42a3      	cmp	r3, r4
 8006346:	d9fa      	bls.n	800633e <_free_r+0x42>
 8006348:	6811      	ldr	r1, [r2, #0]
 800634a:	1850      	adds	r0, r2, r1
 800634c:	42a0      	cmp	r0, r4
 800634e:	d10b      	bne.n	8006368 <_free_r+0x6c>
 8006350:	6820      	ldr	r0, [r4, #0]
 8006352:	4401      	add	r1, r0
 8006354:	1850      	adds	r0, r2, r1
 8006356:	4283      	cmp	r3, r0
 8006358:	6011      	str	r1, [r2, #0]
 800635a:	d1e0      	bne.n	800631e <_free_r+0x22>
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	6053      	str	r3, [r2, #4]
 8006362:	4408      	add	r0, r1
 8006364:	6010      	str	r0, [r2, #0]
 8006366:	e7da      	b.n	800631e <_free_r+0x22>
 8006368:	d902      	bls.n	8006370 <_free_r+0x74>
 800636a:	230c      	movs	r3, #12
 800636c:	602b      	str	r3, [r5, #0]
 800636e:	e7d6      	b.n	800631e <_free_r+0x22>
 8006370:	6820      	ldr	r0, [r4, #0]
 8006372:	1821      	adds	r1, r4, r0
 8006374:	428b      	cmp	r3, r1
 8006376:	bf04      	itt	eq
 8006378:	6819      	ldreq	r1, [r3, #0]
 800637a:	685b      	ldreq	r3, [r3, #4]
 800637c:	6063      	str	r3, [r4, #4]
 800637e:	bf04      	itt	eq
 8006380:	1809      	addeq	r1, r1, r0
 8006382:	6021      	streq	r1, [r4, #0]
 8006384:	6054      	str	r4, [r2, #4]
 8006386:	e7ca      	b.n	800631e <_free_r+0x22>
 8006388:	bd38      	pop	{r3, r4, r5, pc}
 800638a:	bf00      	nop
 800638c:	20000580 	.word	0x20000580

08006390 <rshift>:
 8006390:	6903      	ldr	r3, [r0, #16]
 8006392:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006396:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800639a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800639e:	f100 0414 	add.w	r4, r0, #20
 80063a2:	dd45      	ble.n	8006430 <rshift+0xa0>
 80063a4:	f011 011f 	ands.w	r1, r1, #31
 80063a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80063ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80063b0:	d10c      	bne.n	80063cc <rshift+0x3c>
 80063b2:	f100 0710 	add.w	r7, r0, #16
 80063b6:	4629      	mov	r1, r5
 80063b8:	42b1      	cmp	r1, r6
 80063ba:	d334      	bcc.n	8006426 <rshift+0x96>
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	1eea      	subs	r2, r5, #3
 80063c2:	4296      	cmp	r6, r2
 80063c4:	bf38      	it	cc
 80063c6:	2300      	movcc	r3, #0
 80063c8:	4423      	add	r3, r4
 80063ca:	e015      	b.n	80063f8 <rshift+0x68>
 80063cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80063d0:	f1c1 0820 	rsb	r8, r1, #32
 80063d4:	40cf      	lsrs	r7, r1
 80063d6:	f105 0e04 	add.w	lr, r5, #4
 80063da:	46a1      	mov	r9, r4
 80063dc:	4576      	cmp	r6, lr
 80063de:	46f4      	mov	ip, lr
 80063e0:	d815      	bhi.n	800640e <rshift+0x7e>
 80063e2:	1a9a      	subs	r2, r3, r2
 80063e4:	0092      	lsls	r2, r2, #2
 80063e6:	3a04      	subs	r2, #4
 80063e8:	3501      	adds	r5, #1
 80063ea:	42ae      	cmp	r6, r5
 80063ec:	bf38      	it	cc
 80063ee:	2200      	movcc	r2, #0
 80063f0:	18a3      	adds	r3, r4, r2
 80063f2:	50a7      	str	r7, [r4, r2]
 80063f4:	b107      	cbz	r7, 80063f8 <rshift+0x68>
 80063f6:	3304      	adds	r3, #4
 80063f8:	1b1a      	subs	r2, r3, r4
 80063fa:	42a3      	cmp	r3, r4
 80063fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006400:	bf08      	it	eq
 8006402:	2300      	moveq	r3, #0
 8006404:	6102      	str	r2, [r0, #16]
 8006406:	bf08      	it	eq
 8006408:	6143      	streq	r3, [r0, #20]
 800640a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800640e:	f8dc c000 	ldr.w	ip, [ip]
 8006412:	fa0c fc08 	lsl.w	ip, ip, r8
 8006416:	ea4c 0707 	orr.w	r7, ip, r7
 800641a:	f849 7b04 	str.w	r7, [r9], #4
 800641e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006422:	40cf      	lsrs	r7, r1
 8006424:	e7da      	b.n	80063dc <rshift+0x4c>
 8006426:	f851 cb04 	ldr.w	ip, [r1], #4
 800642a:	f847 cf04 	str.w	ip, [r7, #4]!
 800642e:	e7c3      	b.n	80063b8 <rshift+0x28>
 8006430:	4623      	mov	r3, r4
 8006432:	e7e1      	b.n	80063f8 <rshift+0x68>

08006434 <__hexdig_fun>:
 8006434:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006438:	2b09      	cmp	r3, #9
 800643a:	d802      	bhi.n	8006442 <__hexdig_fun+0xe>
 800643c:	3820      	subs	r0, #32
 800643e:	b2c0      	uxtb	r0, r0
 8006440:	4770      	bx	lr
 8006442:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006446:	2b05      	cmp	r3, #5
 8006448:	d801      	bhi.n	800644e <__hexdig_fun+0x1a>
 800644a:	3847      	subs	r0, #71	@ 0x47
 800644c:	e7f7      	b.n	800643e <__hexdig_fun+0xa>
 800644e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006452:	2b05      	cmp	r3, #5
 8006454:	d801      	bhi.n	800645a <__hexdig_fun+0x26>
 8006456:	3827      	subs	r0, #39	@ 0x27
 8006458:	e7f1      	b.n	800643e <__hexdig_fun+0xa>
 800645a:	2000      	movs	r0, #0
 800645c:	4770      	bx	lr
	...

08006460 <__gethex>:
 8006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	b085      	sub	sp, #20
 8006466:	468a      	mov	sl, r1
 8006468:	9302      	str	r3, [sp, #8]
 800646a:	680b      	ldr	r3, [r1, #0]
 800646c:	9001      	str	r0, [sp, #4]
 800646e:	4690      	mov	r8, r2
 8006470:	1c9c      	adds	r4, r3, #2
 8006472:	46a1      	mov	r9, r4
 8006474:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006478:	2830      	cmp	r0, #48	@ 0x30
 800647a:	d0fa      	beq.n	8006472 <__gethex+0x12>
 800647c:	eba9 0303 	sub.w	r3, r9, r3
 8006480:	f1a3 0b02 	sub.w	fp, r3, #2
 8006484:	f7ff ffd6 	bl	8006434 <__hexdig_fun>
 8006488:	4605      	mov	r5, r0
 800648a:	2800      	cmp	r0, #0
 800648c:	d168      	bne.n	8006560 <__gethex+0x100>
 800648e:	49a0      	ldr	r1, [pc, #640]	@ (8006710 <__gethex+0x2b0>)
 8006490:	2201      	movs	r2, #1
 8006492:	4648      	mov	r0, r9
 8006494:	f7ff fe05 	bl	80060a2 <strncmp>
 8006498:	4607      	mov	r7, r0
 800649a:	2800      	cmp	r0, #0
 800649c:	d167      	bne.n	800656e <__gethex+0x10e>
 800649e:	f899 0001 	ldrb.w	r0, [r9, #1]
 80064a2:	4626      	mov	r6, r4
 80064a4:	f7ff ffc6 	bl	8006434 <__hexdig_fun>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d062      	beq.n	8006572 <__gethex+0x112>
 80064ac:	4623      	mov	r3, r4
 80064ae:	7818      	ldrb	r0, [r3, #0]
 80064b0:	2830      	cmp	r0, #48	@ 0x30
 80064b2:	4699      	mov	r9, r3
 80064b4:	f103 0301 	add.w	r3, r3, #1
 80064b8:	d0f9      	beq.n	80064ae <__gethex+0x4e>
 80064ba:	f7ff ffbb 	bl	8006434 <__hexdig_fun>
 80064be:	fab0 f580 	clz	r5, r0
 80064c2:	096d      	lsrs	r5, r5, #5
 80064c4:	f04f 0b01 	mov.w	fp, #1
 80064c8:	464a      	mov	r2, r9
 80064ca:	4616      	mov	r6, r2
 80064cc:	3201      	adds	r2, #1
 80064ce:	7830      	ldrb	r0, [r6, #0]
 80064d0:	f7ff ffb0 	bl	8006434 <__hexdig_fun>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d1f8      	bne.n	80064ca <__gethex+0x6a>
 80064d8:	498d      	ldr	r1, [pc, #564]	@ (8006710 <__gethex+0x2b0>)
 80064da:	2201      	movs	r2, #1
 80064dc:	4630      	mov	r0, r6
 80064de:	f7ff fde0 	bl	80060a2 <strncmp>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d13f      	bne.n	8006566 <__gethex+0x106>
 80064e6:	b944      	cbnz	r4, 80064fa <__gethex+0x9a>
 80064e8:	1c74      	adds	r4, r6, #1
 80064ea:	4622      	mov	r2, r4
 80064ec:	4616      	mov	r6, r2
 80064ee:	3201      	adds	r2, #1
 80064f0:	7830      	ldrb	r0, [r6, #0]
 80064f2:	f7ff ff9f 	bl	8006434 <__hexdig_fun>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	d1f8      	bne.n	80064ec <__gethex+0x8c>
 80064fa:	1ba4      	subs	r4, r4, r6
 80064fc:	00a7      	lsls	r7, r4, #2
 80064fe:	7833      	ldrb	r3, [r6, #0]
 8006500:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006504:	2b50      	cmp	r3, #80	@ 0x50
 8006506:	d13e      	bne.n	8006586 <__gethex+0x126>
 8006508:	7873      	ldrb	r3, [r6, #1]
 800650a:	2b2b      	cmp	r3, #43	@ 0x2b
 800650c:	d033      	beq.n	8006576 <__gethex+0x116>
 800650e:	2b2d      	cmp	r3, #45	@ 0x2d
 8006510:	d034      	beq.n	800657c <__gethex+0x11c>
 8006512:	1c71      	adds	r1, r6, #1
 8006514:	2400      	movs	r4, #0
 8006516:	7808      	ldrb	r0, [r1, #0]
 8006518:	f7ff ff8c 	bl	8006434 <__hexdig_fun>
 800651c:	1e43      	subs	r3, r0, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b18      	cmp	r3, #24
 8006522:	d830      	bhi.n	8006586 <__gethex+0x126>
 8006524:	f1a0 0210 	sub.w	r2, r0, #16
 8006528:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800652c:	f7ff ff82 	bl	8006434 <__hexdig_fun>
 8006530:	f100 3cff 	add.w	ip, r0, #4294967295
 8006534:	fa5f fc8c 	uxtb.w	ip, ip
 8006538:	f1bc 0f18 	cmp.w	ip, #24
 800653c:	f04f 030a 	mov.w	r3, #10
 8006540:	d91e      	bls.n	8006580 <__gethex+0x120>
 8006542:	b104      	cbz	r4, 8006546 <__gethex+0xe6>
 8006544:	4252      	negs	r2, r2
 8006546:	4417      	add	r7, r2
 8006548:	f8ca 1000 	str.w	r1, [sl]
 800654c:	b1ed      	cbz	r5, 800658a <__gethex+0x12a>
 800654e:	f1bb 0f00 	cmp.w	fp, #0
 8006552:	bf0c      	ite	eq
 8006554:	2506      	moveq	r5, #6
 8006556:	2500      	movne	r5, #0
 8006558:	4628      	mov	r0, r5
 800655a:	b005      	add	sp, #20
 800655c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006560:	2500      	movs	r5, #0
 8006562:	462c      	mov	r4, r5
 8006564:	e7b0      	b.n	80064c8 <__gethex+0x68>
 8006566:	2c00      	cmp	r4, #0
 8006568:	d1c7      	bne.n	80064fa <__gethex+0x9a>
 800656a:	4627      	mov	r7, r4
 800656c:	e7c7      	b.n	80064fe <__gethex+0x9e>
 800656e:	464e      	mov	r6, r9
 8006570:	462f      	mov	r7, r5
 8006572:	2501      	movs	r5, #1
 8006574:	e7c3      	b.n	80064fe <__gethex+0x9e>
 8006576:	2400      	movs	r4, #0
 8006578:	1cb1      	adds	r1, r6, #2
 800657a:	e7cc      	b.n	8006516 <__gethex+0xb6>
 800657c:	2401      	movs	r4, #1
 800657e:	e7fb      	b.n	8006578 <__gethex+0x118>
 8006580:	fb03 0002 	mla	r0, r3, r2, r0
 8006584:	e7ce      	b.n	8006524 <__gethex+0xc4>
 8006586:	4631      	mov	r1, r6
 8006588:	e7de      	b.n	8006548 <__gethex+0xe8>
 800658a:	eba6 0309 	sub.w	r3, r6, r9
 800658e:	3b01      	subs	r3, #1
 8006590:	4629      	mov	r1, r5
 8006592:	2b07      	cmp	r3, #7
 8006594:	dc0a      	bgt.n	80065ac <__gethex+0x14c>
 8006596:	9801      	ldr	r0, [sp, #4]
 8006598:	f000 fafc 	bl	8006b94 <_Balloc>
 800659c:	4604      	mov	r4, r0
 800659e:	b940      	cbnz	r0, 80065b2 <__gethex+0x152>
 80065a0:	4b5c      	ldr	r3, [pc, #368]	@ (8006714 <__gethex+0x2b4>)
 80065a2:	4602      	mov	r2, r0
 80065a4:	21e4      	movs	r1, #228	@ 0xe4
 80065a6:	485c      	ldr	r0, [pc, #368]	@ (8006718 <__gethex+0x2b8>)
 80065a8:	f7ff fe8a 	bl	80062c0 <__assert_func>
 80065ac:	3101      	adds	r1, #1
 80065ae:	105b      	asrs	r3, r3, #1
 80065b0:	e7ef      	b.n	8006592 <__gethex+0x132>
 80065b2:	f100 0a14 	add.w	sl, r0, #20
 80065b6:	2300      	movs	r3, #0
 80065b8:	4655      	mov	r5, sl
 80065ba:	469b      	mov	fp, r3
 80065bc:	45b1      	cmp	r9, r6
 80065be:	d337      	bcc.n	8006630 <__gethex+0x1d0>
 80065c0:	f845 bb04 	str.w	fp, [r5], #4
 80065c4:	eba5 050a 	sub.w	r5, r5, sl
 80065c8:	10ad      	asrs	r5, r5, #2
 80065ca:	6125      	str	r5, [r4, #16]
 80065cc:	4658      	mov	r0, fp
 80065ce:	f000 fbd3 	bl	8006d78 <__hi0bits>
 80065d2:	016d      	lsls	r5, r5, #5
 80065d4:	f8d8 6000 	ldr.w	r6, [r8]
 80065d8:	1a2d      	subs	r5, r5, r0
 80065da:	42b5      	cmp	r5, r6
 80065dc:	dd54      	ble.n	8006688 <__gethex+0x228>
 80065de:	1bad      	subs	r5, r5, r6
 80065e0:	4629      	mov	r1, r5
 80065e2:	4620      	mov	r0, r4
 80065e4:	f000 ff67 	bl	80074b6 <__any_on>
 80065e8:	4681      	mov	r9, r0
 80065ea:	b178      	cbz	r0, 800660c <__gethex+0x1ac>
 80065ec:	1e6b      	subs	r3, r5, #1
 80065ee:	1159      	asrs	r1, r3, #5
 80065f0:	f003 021f 	and.w	r2, r3, #31
 80065f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80065f8:	f04f 0901 	mov.w	r9, #1
 80065fc:	fa09 f202 	lsl.w	r2, r9, r2
 8006600:	420a      	tst	r2, r1
 8006602:	d003      	beq.n	800660c <__gethex+0x1ac>
 8006604:	454b      	cmp	r3, r9
 8006606:	dc36      	bgt.n	8006676 <__gethex+0x216>
 8006608:	f04f 0902 	mov.w	r9, #2
 800660c:	4629      	mov	r1, r5
 800660e:	4620      	mov	r0, r4
 8006610:	f7ff febe 	bl	8006390 <rshift>
 8006614:	442f      	add	r7, r5
 8006616:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800661a:	42bb      	cmp	r3, r7
 800661c:	da42      	bge.n	80066a4 <__gethex+0x244>
 800661e:	9801      	ldr	r0, [sp, #4]
 8006620:	4621      	mov	r1, r4
 8006622:	f000 faf7 	bl	8006c14 <_Bfree>
 8006626:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006628:	2300      	movs	r3, #0
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	25a3      	movs	r5, #163	@ 0xa3
 800662e:	e793      	b.n	8006558 <__gethex+0xf8>
 8006630:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006634:	2a2e      	cmp	r2, #46	@ 0x2e
 8006636:	d012      	beq.n	800665e <__gethex+0x1fe>
 8006638:	2b20      	cmp	r3, #32
 800663a:	d104      	bne.n	8006646 <__gethex+0x1e6>
 800663c:	f845 bb04 	str.w	fp, [r5], #4
 8006640:	f04f 0b00 	mov.w	fp, #0
 8006644:	465b      	mov	r3, fp
 8006646:	7830      	ldrb	r0, [r6, #0]
 8006648:	9303      	str	r3, [sp, #12]
 800664a:	f7ff fef3 	bl	8006434 <__hexdig_fun>
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	f000 000f 	and.w	r0, r0, #15
 8006654:	4098      	lsls	r0, r3
 8006656:	ea4b 0b00 	orr.w	fp, fp, r0
 800665a:	3304      	adds	r3, #4
 800665c:	e7ae      	b.n	80065bc <__gethex+0x15c>
 800665e:	45b1      	cmp	r9, r6
 8006660:	d8ea      	bhi.n	8006638 <__gethex+0x1d8>
 8006662:	492b      	ldr	r1, [pc, #172]	@ (8006710 <__gethex+0x2b0>)
 8006664:	9303      	str	r3, [sp, #12]
 8006666:	2201      	movs	r2, #1
 8006668:	4630      	mov	r0, r6
 800666a:	f7ff fd1a 	bl	80060a2 <strncmp>
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	2800      	cmp	r0, #0
 8006672:	d1e1      	bne.n	8006638 <__gethex+0x1d8>
 8006674:	e7a2      	b.n	80065bc <__gethex+0x15c>
 8006676:	1ea9      	subs	r1, r5, #2
 8006678:	4620      	mov	r0, r4
 800667a:	f000 ff1c 	bl	80074b6 <__any_on>
 800667e:	2800      	cmp	r0, #0
 8006680:	d0c2      	beq.n	8006608 <__gethex+0x1a8>
 8006682:	f04f 0903 	mov.w	r9, #3
 8006686:	e7c1      	b.n	800660c <__gethex+0x1ac>
 8006688:	da09      	bge.n	800669e <__gethex+0x23e>
 800668a:	1b75      	subs	r5, r6, r5
 800668c:	4621      	mov	r1, r4
 800668e:	9801      	ldr	r0, [sp, #4]
 8006690:	462a      	mov	r2, r5
 8006692:	f000 fcd7 	bl	8007044 <__lshift>
 8006696:	1b7f      	subs	r7, r7, r5
 8006698:	4604      	mov	r4, r0
 800669a:	f100 0a14 	add.w	sl, r0, #20
 800669e:	f04f 0900 	mov.w	r9, #0
 80066a2:	e7b8      	b.n	8006616 <__gethex+0x1b6>
 80066a4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80066a8:	42bd      	cmp	r5, r7
 80066aa:	dd6f      	ble.n	800678c <__gethex+0x32c>
 80066ac:	1bed      	subs	r5, r5, r7
 80066ae:	42ae      	cmp	r6, r5
 80066b0:	dc34      	bgt.n	800671c <__gethex+0x2bc>
 80066b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d022      	beq.n	8006700 <__gethex+0x2a0>
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d024      	beq.n	8006708 <__gethex+0x2a8>
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d115      	bne.n	80066ee <__gethex+0x28e>
 80066c2:	42ae      	cmp	r6, r5
 80066c4:	d113      	bne.n	80066ee <__gethex+0x28e>
 80066c6:	2e01      	cmp	r6, #1
 80066c8:	d10b      	bne.n	80066e2 <__gethex+0x282>
 80066ca:	9a02      	ldr	r2, [sp, #8]
 80066cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80066d0:	6013      	str	r3, [r2, #0]
 80066d2:	2301      	movs	r3, #1
 80066d4:	6123      	str	r3, [r4, #16]
 80066d6:	f8ca 3000 	str.w	r3, [sl]
 80066da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066dc:	2562      	movs	r5, #98	@ 0x62
 80066de:	601c      	str	r4, [r3, #0]
 80066e0:	e73a      	b.n	8006558 <__gethex+0xf8>
 80066e2:	1e71      	subs	r1, r6, #1
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 fee6 	bl	80074b6 <__any_on>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d1ed      	bne.n	80066ca <__gethex+0x26a>
 80066ee:	9801      	ldr	r0, [sp, #4]
 80066f0:	4621      	mov	r1, r4
 80066f2:	f000 fa8f 	bl	8006c14 <_Bfree>
 80066f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066f8:	2300      	movs	r3, #0
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	2550      	movs	r5, #80	@ 0x50
 80066fe:	e72b      	b.n	8006558 <__gethex+0xf8>
 8006700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f3      	bne.n	80066ee <__gethex+0x28e>
 8006706:	e7e0      	b.n	80066ca <__gethex+0x26a>
 8006708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1dd      	bne.n	80066ca <__gethex+0x26a>
 800670e:	e7ee      	b.n	80066ee <__gethex+0x28e>
 8006710:	08008228 	.word	0x08008228
 8006714:	0800843e 	.word	0x0800843e
 8006718:	0800844f 	.word	0x0800844f
 800671c:	1e6f      	subs	r7, r5, #1
 800671e:	f1b9 0f00 	cmp.w	r9, #0
 8006722:	d130      	bne.n	8006786 <__gethex+0x326>
 8006724:	b127      	cbz	r7, 8006730 <__gethex+0x2d0>
 8006726:	4639      	mov	r1, r7
 8006728:	4620      	mov	r0, r4
 800672a:	f000 fec4 	bl	80074b6 <__any_on>
 800672e:	4681      	mov	r9, r0
 8006730:	117a      	asrs	r2, r7, #5
 8006732:	2301      	movs	r3, #1
 8006734:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006738:	f007 071f 	and.w	r7, r7, #31
 800673c:	40bb      	lsls	r3, r7
 800673e:	4213      	tst	r3, r2
 8006740:	4629      	mov	r1, r5
 8006742:	4620      	mov	r0, r4
 8006744:	bf18      	it	ne
 8006746:	f049 0902 	orrne.w	r9, r9, #2
 800674a:	f7ff fe21 	bl	8006390 <rshift>
 800674e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006752:	1b76      	subs	r6, r6, r5
 8006754:	2502      	movs	r5, #2
 8006756:	f1b9 0f00 	cmp.w	r9, #0
 800675a:	d047      	beq.n	80067ec <__gethex+0x38c>
 800675c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006760:	2b02      	cmp	r3, #2
 8006762:	d015      	beq.n	8006790 <__gethex+0x330>
 8006764:	2b03      	cmp	r3, #3
 8006766:	d017      	beq.n	8006798 <__gethex+0x338>
 8006768:	2b01      	cmp	r3, #1
 800676a:	d109      	bne.n	8006780 <__gethex+0x320>
 800676c:	f019 0f02 	tst.w	r9, #2
 8006770:	d006      	beq.n	8006780 <__gethex+0x320>
 8006772:	f8da 3000 	ldr.w	r3, [sl]
 8006776:	ea49 0903 	orr.w	r9, r9, r3
 800677a:	f019 0f01 	tst.w	r9, #1
 800677e:	d10e      	bne.n	800679e <__gethex+0x33e>
 8006780:	f045 0510 	orr.w	r5, r5, #16
 8006784:	e032      	b.n	80067ec <__gethex+0x38c>
 8006786:	f04f 0901 	mov.w	r9, #1
 800678a:	e7d1      	b.n	8006730 <__gethex+0x2d0>
 800678c:	2501      	movs	r5, #1
 800678e:	e7e2      	b.n	8006756 <__gethex+0x2f6>
 8006790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006792:	f1c3 0301 	rsb	r3, r3, #1
 8006796:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0f0      	beq.n	8006780 <__gethex+0x320>
 800679e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80067a2:	f104 0314 	add.w	r3, r4, #20
 80067a6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80067aa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80067ae:	f04f 0c00 	mov.w	ip, #0
 80067b2:	4618      	mov	r0, r3
 80067b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80067b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80067bc:	d01b      	beq.n	80067f6 <__gethex+0x396>
 80067be:	3201      	adds	r2, #1
 80067c0:	6002      	str	r2, [r0, #0]
 80067c2:	2d02      	cmp	r5, #2
 80067c4:	f104 0314 	add.w	r3, r4, #20
 80067c8:	d13c      	bne.n	8006844 <__gethex+0x3e4>
 80067ca:	f8d8 2000 	ldr.w	r2, [r8]
 80067ce:	3a01      	subs	r2, #1
 80067d0:	42b2      	cmp	r2, r6
 80067d2:	d109      	bne.n	80067e8 <__gethex+0x388>
 80067d4:	1171      	asrs	r1, r6, #5
 80067d6:	2201      	movs	r2, #1
 80067d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067dc:	f006 061f 	and.w	r6, r6, #31
 80067e0:	fa02 f606 	lsl.w	r6, r2, r6
 80067e4:	421e      	tst	r6, r3
 80067e6:	d13a      	bne.n	800685e <__gethex+0x3fe>
 80067e8:	f045 0520 	orr.w	r5, r5, #32
 80067ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067ee:	601c      	str	r4, [r3, #0]
 80067f0:	9b02      	ldr	r3, [sp, #8]
 80067f2:	601f      	str	r7, [r3, #0]
 80067f4:	e6b0      	b.n	8006558 <__gethex+0xf8>
 80067f6:	4299      	cmp	r1, r3
 80067f8:	f843 cc04 	str.w	ip, [r3, #-4]
 80067fc:	d8d9      	bhi.n	80067b2 <__gethex+0x352>
 80067fe:	68a3      	ldr	r3, [r4, #8]
 8006800:	459b      	cmp	fp, r3
 8006802:	db17      	blt.n	8006834 <__gethex+0x3d4>
 8006804:	6861      	ldr	r1, [r4, #4]
 8006806:	9801      	ldr	r0, [sp, #4]
 8006808:	3101      	adds	r1, #1
 800680a:	f000 f9c3 	bl	8006b94 <_Balloc>
 800680e:	4681      	mov	r9, r0
 8006810:	b918      	cbnz	r0, 800681a <__gethex+0x3ba>
 8006812:	4b1a      	ldr	r3, [pc, #104]	@ (800687c <__gethex+0x41c>)
 8006814:	4602      	mov	r2, r0
 8006816:	2184      	movs	r1, #132	@ 0x84
 8006818:	e6c5      	b.n	80065a6 <__gethex+0x146>
 800681a:	6922      	ldr	r2, [r4, #16]
 800681c:	3202      	adds	r2, #2
 800681e:	f104 010c 	add.w	r1, r4, #12
 8006822:	0092      	lsls	r2, r2, #2
 8006824:	300c      	adds	r0, #12
 8006826:	f7ff fd34 	bl	8006292 <memcpy>
 800682a:	4621      	mov	r1, r4
 800682c:	9801      	ldr	r0, [sp, #4]
 800682e:	f000 f9f1 	bl	8006c14 <_Bfree>
 8006832:	464c      	mov	r4, r9
 8006834:	6923      	ldr	r3, [r4, #16]
 8006836:	1c5a      	adds	r2, r3, #1
 8006838:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800683c:	6122      	str	r2, [r4, #16]
 800683e:	2201      	movs	r2, #1
 8006840:	615a      	str	r2, [r3, #20]
 8006842:	e7be      	b.n	80067c2 <__gethex+0x362>
 8006844:	6922      	ldr	r2, [r4, #16]
 8006846:	455a      	cmp	r2, fp
 8006848:	dd0b      	ble.n	8006862 <__gethex+0x402>
 800684a:	2101      	movs	r1, #1
 800684c:	4620      	mov	r0, r4
 800684e:	f7ff fd9f 	bl	8006390 <rshift>
 8006852:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006856:	3701      	adds	r7, #1
 8006858:	42bb      	cmp	r3, r7
 800685a:	f6ff aee0 	blt.w	800661e <__gethex+0x1be>
 800685e:	2501      	movs	r5, #1
 8006860:	e7c2      	b.n	80067e8 <__gethex+0x388>
 8006862:	f016 061f 	ands.w	r6, r6, #31
 8006866:	d0fa      	beq.n	800685e <__gethex+0x3fe>
 8006868:	4453      	add	r3, sl
 800686a:	f1c6 0620 	rsb	r6, r6, #32
 800686e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006872:	f000 fa81 	bl	8006d78 <__hi0bits>
 8006876:	42b0      	cmp	r0, r6
 8006878:	dbe7      	blt.n	800684a <__gethex+0x3ea>
 800687a:	e7f0      	b.n	800685e <__gethex+0x3fe>
 800687c:	0800843e 	.word	0x0800843e

08006880 <L_shift>:
 8006880:	f1c2 0208 	rsb	r2, r2, #8
 8006884:	0092      	lsls	r2, r2, #2
 8006886:	b570      	push	{r4, r5, r6, lr}
 8006888:	f1c2 0620 	rsb	r6, r2, #32
 800688c:	6843      	ldr	r3, [r0, #4]
 800688e:	6804      	ldr	r4, [r0, #0]
 8006890:	fa03 f506 	lsl.w	r5, r3, r6
 8006894:	432c      	orrs	r4, r5
 8006896:	40d3      	lsrs	r3, r2
 8006898:	6004      	str	r4, [r0, #0]
 800689a:	f840 3f04 	str.w	r3, [r0, #4]!
 800689e:	4288      	cmp	r0, r1
 80068a0:	d3f4      	bcc.n	800688c <L_shift+0xc>
 80068a2:	bd70      	pop	{r4, r5, r6, pc}

080068a4 <__match>:
 80068a4:	b530      	push	{r4, r5, lr}
 80068a6:	6803      	ldr	r3, [r0, #0]
 80068a8:	3301      	adds	r3, #1
 80068aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068ae:	b914      	cbnz	r4, 80068b6 <__match+0x12>
 80068b0:	6003      	str	r3, [r0, #0]
 80068b2:	2001      	movs	r0, #1
 80068b4:	bd30      	pop	{r4, r5, pc}
 80068b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068ba:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80068be:	2d19      	cmp	r5, #25
 80068c0:	bf98      	it	ls
 80068c2:	3220      	addls	r2, #32
 80068c4:	42a2      	cmp	r2, r4
 80068c6:	d0f0      	beq.n	80068aa <__match+0x6>
 80068c8:	2000      	movs	r0, #0
 80068ca:	e7f3      	b.n	80068b4 <__match+0x10>

080068cc <__hexnan>:
 80068cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d0:	680b      	ldr	r3, [r1, #0]
 80068d2:	6801      	ldr	r1, [r0, #0]
 80068d4:	115e      	asrs	r6, r3, #5
 80068d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80068da:	f013 031f 	ands.w	r3, r3, #31
 80068de:	b087      	sub	sp, #28
 80068e0:	bf18      	it	ne
 80068e2:	3604      	addne	r6, #4
 80068e4:	2500      	movs	r5, #0
 80068e6:	1f37      	subs	r7, r6, #4
 80068e8:	4682      	mov	sl, r0
 80068ea:	4690      	mov	r8, r2
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80068f2:	46b9      	mov	r9, r7
 80068f4:	463c      	mov	r4, r7
 80068f6:	9502      	str	r5, [sp, #8]
 80068f8:	46ab      	mov	fp, r5
 80068fa:	784a      	ldrb	r2, [r1, #1]
 80068fc:	1c4b      	adds	r3, r1, #1
 80068fe:	9303      	str	r3, [sp, #12]
 8006900:	b342      	cbz	r2, 8006954 <__hexnan+0x88>
 8006902:	4610      	mov	r0, r2
 8006904:	9105      	str	r1, [sp, #20]
 8006906:	9204      	str	r2, [sp, #16]
 8006908:	f7ff fd94 	bl	8006434 <__hexdig_fun>
 800690c:	2800      	cmp	r0, #0
 800690e:	d151      	bne.n	80069b4 <__hexnan+0xe8>
 8006910:	9a04      	ldr	r2, [sp, #16]
 8006912:	9905      	ldr	r1, [sp, #20]
 8006914:	2a20      	cmp	r2, #32
 8006916:	d818      	bhi.n	800694a <__hexnan+0x7e>
 8006918:	9b02      	ldr	r3, [sp, #8]
 800691a:	459b      	cmp	fp, r3
 800691c:	dd13      	ble.n	8006946 <__hexnan+0x7a>
 800691e:	454c      	cmp	r4, r9
 8006920:	d206      	bcs.n	8006930 <__hexnan+0x64>
 8006922:	2d07      	cmp	r5, #7
 8006924:	dc04      	bgt.n	8006930 <__hexnan+0x64>
 8006926:	462a      	mov	r2, r5
 8006928:	4649      	mov	r1, r9
 800692a:	4620      	mov	r0, r4
 800692c:	f7ff ffa8 	bl	8006880 <L_shift>
 8006930:	4544      	cmp	r4, r8
 8006932:	d952      	bls.n	80069da <__hexnan+0x10e>
 8006934:	2300      	movs	r3, #0
 8006936:	f1a4 0904 	sub.w	r9, r4, #4
 800693a:	f844 3c04 	str.w	r3, [r4, #-4]
 800693e:	f8cd b008 	str.w	fp, [sp, #8]
 8006942:	464c      	mov	r4, r9
 8006944:	461d      	mov	r5, r3
 8006946:	9903      	ldr	r1, [sp, #12]
 8006948:	e7d7      	b.n	80068fa <__hexnan+0x2e>
 800694a:	2a29      	cmp	r2, #41	@ 0x29
 800694c:	d157      	bne.n	80069fe <__hexnan+0x132>
 800694e:	3102      	adds	r1, #2
 8006950:	f8ca 1000 	str.w	r1, [sl]
 8006954:	f1bb 0f00 	cmp.w	fp, #0
 8006958:	d051      	beq.n	80069fe <__hexnan+0x132>
 800695a:	454c      	cmp	r4, r9
 800695c:	d206      	bcs.n	800696c <__hexnan+0xa0>
 800695e:	2d07      	cmp	r5, #7
 8006960:	dc04      	bgt.n	800696c <__hexnan+0xa0>
 8006962:	462a      	mov	r2, r5
 8006964:	4649      	mov	r1, r9
 8006966:	4620      	mov	r0, r4
 8006968:	f7ff ff8a 	bl	8006880 <L_shift>
 800696c:	4544      	cmp	r4, r8
 800696e:	d936      	bls.n	80069de <__hexnan+0x112>
 8006970:	f1a8 0204 	sub.w	r2, r8, #4
 8006974:	4623      	mov	r3, r4
 8006976:	f853 1b04 	ldr.w	r1, [r3], #4
 800697a:	f842 1f04 	str.w	r1, [r2, #4]!
 800697e:	429f      	cmp	r7, r3
 8006980:	d2f9      	bcs.n	8006976 <__hexnan+0xaa>
 8006982:	1b3b      	subs	r3, r7, r4
 8006984:	f023 0303 	bic.w	r3, r3, #3
 8006988:	3304      	adds	r3, #4
 800698a:	3401      	adds	r4, #1
 800698c:	3e03      	subs	r6, #3
 800698e:	42b4      	cmp	r4, r6
 8006990:	bf88      	it	hi
 8006992:	2304      	movhi	r3, #4
 8006994:	4443      	add	r3, r8
 8006996:	2200      	movs	r2, #0
 8006998:	f843 2b04 	str.w	r2, [r3], #4
 800699c:	429f      	cmp	r7, r3
 800699e:	d2fb      	bcs.n	8006998 <__hexnan+0xcc>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	b91b      	cbnz	r3, 80069ac <__hexnan+0xe0>
 80069a4:	4547      	cmp	r7, r8
 80069a6:	d128      	bne.n	80069fa <__hexnan+0x12e>
 80069a8:	2301      	movs	r3, #1
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	2005      	movs	r0, #5
 80069ae:	b007      	add	sp, #28
 80069b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b4:	3501      	adds	r5, #1
 80069b6:	2d08      	cmp	r5, #8
 80069b8:	f10b 0b01 	add.w	fp, fp, #1
 80069bc:	dd06      	ble.n	80069cc <__hexnan+0x100>
 80069be:	4544      	cmp	r4, r8
 80069c0:	d9c1      	bls.n	8006946 <__hexnan+0x7a>
 80069c2:	2300      	movs	r3, #0
 80069c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80069c8:	2501      	movs	r5, #1
 80069ca:	3c04      	subs	r4, #4
 80069cc:	6822      	ldr	r2, [r4, #0]
 80069ce:	f000 000f 	and.w	r0, r0, #15
 80069d2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80069d6:	6020      	str	r0, [r4, #0]
 80069d8:	e7b5      	b.n	8006946 <__hexnan+0x7a>
 80069da:	2508      	movs	r5, #8
 80069dc:	e7b3      	b.n	8006946 <__hexnan+0x7a>
 80069de:	9b01      	ldr	r3, [sp, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0dd      	beq.n	80069a0 <__hexnan+0xd4>
 80069e4:	f1c3 0320 	rsb	r3, r3, #32
 80069e8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ec:	40da      	lsrs	r2, r3
 80069ee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80069f2:	4013      	ands	r3, r2
 80069f4:	f846 3c04 	str.w	r3, [r6, #-4]
 80069f8:	e7d2      	b.n	80069a0 <__hexnan+0xd4>
 80069fa:	3f04      	subs	r7, #4
 80069fc:	e7d0      	b.n	80069a0 <__hexnan+0xd4>
 80069fe:	2004      	movs	r0, #4
 8006a00:	e7d5      	b.n	80069ae <__hexnan+0xe2>
	...

08006a04 <malloc>:
 8006a04:	4b02      	ldr	r3, [pc, #8]	@ (8006a10 <malloc+0xc>)
 8006a06:	4601      	mov	r1, r0
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	f000 b825 	b.w	8006a58 <_malloc_r>
 8006a0e:	bf00      	nop
 8006a10:	20000184 	.word	0x20000184

08006a14 <sbrk_aligned>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	4e0f      	ldr	r6, [pc, #60]	@ (8006a54 <sbrk_aligned+0x40>)
 8006a18:	460c      	mov	r4, r1
 8006a1a:	6831      	ldr	r1, [r6, #0]
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	b911      	cbnz	r1, 8006a26 <sbrk_aligned+0x12>
 8006a20:	f000 fe36 	bl	8007690 <_sbrk_r>
 8006a24:	6030      	str	r0, [r6, #0]
 8006a26:	4621      	mov	r1, r4
 8006a28:	4628      	mov	r0, r5
 8006a2a:	f000 fe31 	bl	8007690 <_sbrk_r>
 8006a2e:	1c43      	adds	r3, r0, #1
 8006a30:	d103      	bne.n	8006a3a <sbrk_aligned+0x26>
 8006a32:	f04f 34ff 	mov.w	r4, #4294967295
 8006a36:	4620      	mov	r0, r4
 8006a38:	bd70      	pop	{r4, r5, r6, pc}
 8006a3a:	1cc4      	adds	r4, r0, #3
 8006a3c:	f024 0403 	bic.w	r4, r4, #3
 8006a40:	42a0      	cmp	r0, r4
 8006a42:	d0f8      	beq.n	8006a36 <sbrk_aligned+0x22>
 8006a44:	1a21      	subs	r1, r4, r0
 8006a46:	4628      	mov	r0, r5
 8006a48:	f000 fe22 	bl	8007690 <_sbrk_r>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d1f2      	bne.n	8006a36 <sbrk_aligned+0x22>
 8006a50:	e7ef      	b.n	8006a32 <sbrk_aligned+0x1e>
 8006a52:	bf00      	nop
 8006a54:	2000057c 	.word	0x2000057c

08006a58 <_malloc_r>:
 8006a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a5c:	1ccd      	adds	r5, r1, #3
 8006a5e:	f025 0503 	bic.w	r5, r5, #3
 8006a62:	3508      	adds	r5, #8
 8006a64:	2d0c      	cmp	r5, #12
 8006a66:	bf38      	it	cc
 8006a68:	250c      	movcc	r5, #12
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	db01      	blt.n	8006a74 <_malloc_r+0x1c>
 8006a70:	42a9      	cmp	r1, r5
 8006a72:	d904      	bls.n	8006a7e <_malloc_r+0x26>
 8006a74:	230c      	movs	r3, #12
 8006a76:	6033      	str	r3, [r6, #0]
 8006a78:	2000      	movs	r0, #0
 8006a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b54 <_malloc_r+0xfc>
 8006a82:	f000 f87b 	bl	8006b7c <__malloc_lock>
 8006a86:	f8d8 3000 	ldr.w	r3, [r8]
 8006a8a:	461c      	mov	r4, r3
 8006a8c:	bb44      	cbnz	r4, 8006ae0 <_malloc_r+0x88>
 8006a8e:	4629      	mov	r1, r5
 8006a90:	4630      	mov	r0, r6
 8006a92:	f7ff ffbf 	bl	8006a14 <sbrk_aligned>
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	4604      	mov	r4, r0
 8006a9a:	d158      	bne.n	8006b4e <_malloc_r+0xf6>
 8006a9c:	f8d8 4000 	ldr.w	r4, [r8]
 8006aa0:	4627      	mov	r7, r4
 8006aa2:	2f00      	cmp	r7, #0
 8006aa4:	d143      	bne.n	8006b2e <_malloc_r+0xd6>
 8006aa6:	2c00      	cmp	r4, #0
 8006aa8:	d04b      	beq.n	8006b42 <_malloc_r+0xea>
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	4639      	mov	r1, r7
 8006aae:	4630      	mov	r0, r6
 8006ab0:	eb04 0903 	add.w	r9, r4, r3
 8006ab4:	f000 fdec 	bl	8007690 <_sbrk_r>
 8006ab8:	4581      	cmp	r9, r0
 8006aba:	d142      	bne.n	8006b42 <_malloc_r+0xea>
 8006abc:	6821      	ldr	r1, [r4, #0]
 8006abe:	1a6d      	subs	r5, r5, r1
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7ff ffa6 	bl	8006a14 <sbrk_aligned>
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d03a      	beq.n	8006b42 <_malloc_r+0xea>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	442b      	add	r3, r5
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	bb62      	cbnz	r2, 8006b34 <_malloc_r+0xdc>
 8006ada:	f8c8 7000 	str.w	r7, [r8]
 8006ade:	e00f      	b.n	8006b00 <_malloc_r+0xa8>
 8006ae0:	6822      	ldr	r2, [r4, #0]
 8006ae2:	1b52      	subs	r2, r2, r5
 8006ae4:	d420      	bmi.n	8006b28 <_malloc_r+0xd0>
 8006ae6:	2a0b      	cmp	r2, #11
 8006ae8:	d917      	bls.n	8006b1a <_malloc_r+0xc2>
 8006aea:	1961      	adds	r1, r4, r5
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	6025      	str	r5, [r4, #0]
 8006af0:	bf18      	it	ne
 8006af2:	6059      	strne	r1, [r3, #4]
 8006af4:	6863      	ldr	r3, [r4, #4]
 8006af6:	bf08      	it	eq
 8006af8:	f8c8 1000 	streq.w	r1, [r8]
 8006afc:	5162      	str	r2, [r4, r5]
 8006afe:	604b      	str	r3, [r1, #4]
 8006b00:	4630      	mov	r0, r6
 8006b02:	f000 f841 	bl	8006b88 <__malloc_unlock>
 8006b06:	f104 000b 	add.w	r0, r4, #11
 8006b0a:	1d23      	adds	r3, r4, #4
 8006b0c:	f020 0007 	bic.w	r0, r0, #7
 8006b10:	1ac2      	subs	r2, r0, r3
 8006b12:	bf1c      	itt	ne
 8006b14:	1a1b      	subne	r3, r3, r0
 8006b16:	50a3      	strne	r3, [r4, r2]
 8006b18:	e7af      	b.n	8006a7a <_malloc_r+0x22>
 8006b1a:	6862      	ldr	r2, [r4, #4]
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	bf0c      	ite	eq
 8006b20:	f8c8 2000 	streq.w	r2, [r8]
 8006b24:	605a      	strne	r2, [r3, #4]
 8006b26:	e7eb      	b.n	8006b00 <_malloc_r+0xa8>
 8006b28:	4623      	mov	r3, r4
 8006b2a:	6864      	ldr	r4, [r4, #4]
 8006b2c:	e7ae      	b.n	8006a8c <_malloc_r+0x34>
 8006b2e:	463c      	mov	r4, r7
 8006b30:	687f      	ldr	r7, [r7, #4]
 8006b32:	e7b6      	b.n	8006aa2 <_malloc_r+0x4a>
 8006b34:	461a      	mov	r2, r3
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d1fb      	bne.n	8006b34 <_malloc_r+0xdc>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	6053      	str	r3, [r2, #4]
 8006b40:	e7de      	b.n	8006b00 <_malloc_r+0xa8>
 8006b42:	230c      	movs	r3, #12
 8006b44:	6033      	str	r3, [r6, #0]
 8006b46:	4630      	mov	r0, r6
 8006b48:	f000 f81e 	bl	8006b88 <__malloc_unlock>
 8006b4c:	e794      	b.n	8006a78 <_malloc_r+0x20>
 8006b4e:	6005      	str	r5, [r0, #0]
 8006b50:	e7d6      	b.n	8006b00 <_malloc_r+0xa8>
 8006b52:	bf00      	nop
 8006b54:	20000580 	.word	0x20000580

08006b58 <__ascii_mbtowc>:
 8006b58:	b082      	sub	sp, #8
 8006b5a:	b901      	cbnz	r1, 8006b5e <__ascii_mbtowc+0x6>
 8006b5c:	a901      	add	r1, sp, #4
 8006b5e:	b142      	cbz	r2, 8006b72 <__ascii_mbtowc+0x1a>
 8006b60:	b14b      	cbz	r3, 8006b76 <__ascii_mbtowc+0x1e>
 8006b62:	7813      	ldrb	r3, [r2, #0]
 8006b64:	600b      	str	r3, [r1, #0]
 8006b66:	7812      	ldrb	r2, [r2, #0]
 8006b68:	1e10      	subs	r0, r2, #0
 8006b6a:	bf18      	it	ne
 8006b6c:	2001      	movne	r0, #1
 8006b6e:	b002      	add	sp, #8
 8006b70:	4770      	bx	lr
 8006b72:	4610      	mov	r0, r2
 8006b74:	e7fb      	b.n	8006b6e <__ascii_mbtowc+0x16>
 8006b76:	f06f 0001 	mvn.w	r0, #1
 8006b7a:	e7f8      	b.n	8006b6e <__ascii_mbtowc+0x16>

08006b7c <__malloc_lock>:
 8006b7c:	4801      	ldr	r0, [pc, #4]	@ (8006b84 <__malloc_lock+0x8>)
 8006b7e:	f7ff bb86 	b.w	800628e <__retarget_lock_acquire_recursive>
 8006b82:	bf00      	nop
 8006b84:	20000578 	.word	0x20000578

08006b88 <__malloc_unlock>:
 8006b88:	4801      	ldr	r0, [pc, #4]	@ (8006b90 <__malloc_unlock+0x8>)
 8006b8a:	f7ff bb81 	b.w	8006290 <__retarget_lock_release_recursive>
 8006b8e:	bf00      	nop
 8006b90:	20000578 	.word	0x20000578

08006b94 <_Balloc>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	69c6      	ldr	r6, [r0, #28]
 8006b98:	4604      	mov	r4, r0
 8006b9a:	460d      	mov	r5, r1
 8006b9c:	b976      	cbnz	r6, 8006bbc <_Balloc+0x28>
 8006b9e:	2010      	movs	r0, #16
 8006ba0:	f7ff ff30 	bl	8006a04 <malloc>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	61e0      	str	r0, [r4, #28]
 8006ba8:	b920      	cbnz	r0, 8006bb4 <_Balloc+0x20>
 8006baa:	4b18      	ldr	r3, [pc, #96]	@ (8006c0c <_Balloc+0x78>)
 8006bac:	4818      	ldr	r0, [pc, #96]	@ (8006c10 <_Balloc+0x7c>)
 8006bae:	216b      	movs	r1, #107	@ 0x6b
 8006bb0:	f7ff fb86 	bl	80062c0 <__assert_func>
 8006bb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bb8:	6006      	str	r6, [r0, #0]
 8006bba:	60c6      	str	r6, [r0, #12]
 8006bbc:	69e6      	ldr	r6, [r4, #28]
 8006bbe:	68f3      	ldr	r3, [r6, #12]
 8006bc0:	b183      	cbz	r3, 8006be4 <_Balloc+0x50>
 8006bc2:	69e3      	ldr	r3, [r4, #28]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bca:	b9b8      	cbnz	r0, 8006bfc <_Balloc+0x68>
 8006bcc:	2101      	movs	r1, #1
 8006bce:	fa01 f605 	lsl.w	r6, r1, r5
 8006bd2:	1d72      	adds	r2, r6, #5
 8006bd4:	0092      	lsls	r2, r2, #2
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f000 fd71 	bl	80076be <_calloc_r>
 8006bdc:	b160      	cbz	r0, 8006bf8 <_Balloc+0x64>
 8006bde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006be2:	e00e      	b.n	8006c02 <_Balloc+0x6e>
 8006be4:	2221      	movs	r2, #33	@ 0x21
 8006be6:	2104      	movs	r1, #4
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fd68 	bl	80076be <_calloc_r>
 8006bee:	69e3      	ldr	r3, [r4, #28]
 8006bf0:	60f0      	str	r0, [r6, #12]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e4      	bne.n	8006bc2 <_Balloc+0x2e>
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	bd70      	pop	{r4, r5, r6, pc}
 8006bfc:	6802      	ldr	r2, [r0, #0]
 8006bfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c02:	2300      	movs	r3, #0
 8006c04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c08:	e7f7      	b.n	8006bfa <_Balloc+0x66>
 8006c0a:	bf00      	nop
 8006c0c:	08008389 	.word	0x08008389
 8006c10:	080084af 	.word	0x080084af

08006c14 <_Bfree>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	69c6      	ldr	r6, [r0, #28]
 8006c18:	4605      	mov	r5, r0
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	b976      	cbnz	r6, 8006c3c <_Bfree+0x28>
 8006c1e:	2010      	movs	r0, #16
 8006c20:	f7ff fef0 	bl	8006a04 <malloc>
 8006c24:	4602      	mov	r2, r0
 8006c26:	61e8      	str	r0, [r5, #28]
 8006c28:	b920      	cbnz	r0, 8006c34 <_Bfree+0x20>
 8006c2a:	4b09      	ldr	r3, [pc, #36]	@ (8006c50 <_Bfree+0x3c>)
 8006c2c:	4809      	ldr	r0, [pc, #36]	@ (8006c54 <_Bfree+0x40>)
 8006c2e:	218f      	movs	r1, #143	@ 0x8f
 8006c30:	f7ff fb46 	bl	80062c0 <__assert_func>
 8006c34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c38:	6006      	str	r6, [r0, #0]
 8006c3a:	60c6      	str	r6, [r0, #12]
 8006c3c:	b13c      	cbz	r4, 8006c4e <_Bfree+0x3a>
 8006c3e:	69eb      	ldr	r3, [r5, #28]
 8006c40:	6862      	ldr	r2, [r4, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c48:	6021      	str	r1, [r4, #0]
 8006c4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	08008389 	.word	0x08008389
 8006c54:	080084af 	.word	0x080084af

08006c58 <__multadd>:
 8006c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5c:	690d      	ldr	r5, [r1, #16]
 8006c5e:	4607      	mov	r7, r0
 8006c60:	460c      	mov	r4, r1
 8006c62:	461e      	mov	r6, r3
 8006c64:	f101 0c14 	add.w	ip, r1, #20
 8006c68:	2000      	movs	r0, #0
 8006c6a:	f8dc 3000 	ldr.w	r3, [ip]
 8006c6e:	b299      	uxth	r1, r3
 8006c70:	fb02 6101 	mla	r1, r2, r1, r6
 8006c74:	0c1e      	lsrs	r6, r3, #16
 8006c76:	0c0b      	lsrs	r3, r1, #16
 8006c78:	fb02 3306 	mla	r3, r2, r6, r3
 8006c7c:	b289      	uxth	r1, r1
 8006c7e:	3001      	adds	r0, #1
 8006c80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c84:	4285      	cmp	r5, r0
 8006c86:	f84c 1b04 	str.w	r1, [ip], #4
 8006c8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c8e:	dcec      	bgt.n	8006c6a <__multadd+0x12>
 8006c90:	b30e      	cbz	r6, 8006cd6 <__multadd+0x7e>
 8006c92:	68a3      	ldr	r3, [r4, #8]
 8006c94:	42ab      	cmp	r3, r5
 8006c96:	dc19      	bgt.n	8006ccc <__multadd+0x74>
 8006c98:	6861      	ldr	r1, [r4, #4]
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	3101      	adds	r1, #1
 8006c9e:	f7ff ff79 	bl	8006b94 <_Balloc>
 8006ca2:	4680      	mov	r8, r0
 8006ca4:	b928      	cbnz	r0, 8006cb2 <__multadd+0x5a>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8006cdc <__multadd+0x84>)
 8006caa:	480d      	ldr	r0, [pc, #52]	@ (8006ce0 <__multadd+0x88>)
 8006cac:	21ba      	movs	r1, #186	@ 0xba
 8006cae:	f7ff fb07 	bl	80062c0 <__assert_func>
 8006cb2:	6922      	ldr	r2, [r4, #16]
 8006cb4:	3202      	adds	r2, #2
 8006cb6:	f104 010c 	add.w	r1, r4, #12
 8006cba:	0092      	lsls	r2, r2, #2
 8006cbc:	300c      	adds	r0, #12
 8006cbe:	f7ff fae8 	bl	8006292 <memcpy>
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	f7ff ffa5 	bl	8006c14 <_Bfree>
 8006cca:	4644      	mov	r4, r8
 8006ccc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cd0:	3501      	adds	r5, #1
 8006cd2:	615e      	str	r6, [r3, #20]
 8006cd4:	6125      	str	r5, [r4, #16]
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cdc:	0800843e 	.word	0x0800843e
 8006ce0:	080084af 	.word	0x080084af

08006ce4 <__s2b>:
 8006ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce8:	460c      	mov	r4, r1
 8006cea:	4615      	mov	r5, r2
 8006cec:	461f      	mov	r7, r3
 8006cee:	2209      	movs	r2, #9
 8006cf0:	3308      	adds	r3, #8
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	db09      	blt.n	8006d14 <__s2b+0x30>
 8006d00:	4630      	mov	r0, r6
 8006d02:	f7ff ff47 	bl	8006b94 <_Balloc>
 8006d06:	b940      	cbnz	r0, 8006d1a <__s2b+0x36>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	4b19      	ldr	r3, [pc, #100]	@ (8006d70 <__s2b+0x8c>)
 8006d0c:	4819      	ldr	r0, [pc, #100]	@ (8006d74 <__s2b+0x90>)
 8006d0e:	21d3      	movs	r1, #211	@ 0xd3
 8006d10:	f7ff fad6 	bl	80062c0 <__assert_func>
 8006d14:	0052      	lsls	r2, r2, #1
 8006d16:	3101      	adds	r1, #1
 8006d18:	e7f0      	b.n	8006cfc <__s2b+0x18>
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	6143      	str	r3, [r0, #20]
 8006d1e:	2d09      	cmp	r5, #9
 8006d20:	f04f 0301 	mov.w	r3, #1
 8006d24:	6103      	str	r3, [r0, #16]
 8006d26:	dd16      	ble.n	8006d56 <__s2b+0x72>
 8006d28:	f104 0909 	add.w	r9, r4, #9
 8006d2c:	46c8      	mov	r8, r9
 8006d2e:	442c      	add	r4, r5
 8006d30:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006d34:	4601      	mov	r1, r0
 8006d36:	3b30      	subs	r3, #48	@ 0x30
 8006d38:	220a      	movs	r2, #10
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f7ff ff8c 	bl	8006c58 <__multadd>
 8006d40:	45a0      	cmp	r8, r4
 8006d42:	d1f5      	bne.n	8006d30 <__s2b+0x4c>
 8006d44:	f1a5 0408 	sub.w	r4, r5, #8
 8006d48:	444c      	add	r4, r9
 8006d4a:	1b2d      	subs	r5, r5, r4
 8006d4c:	1963      	adds	r3, r4, r5
 8006d4e:	42bb      	cmp	r3, r7
 8006d50:	db04      	blt.n	8006d5c <__s2b+0x78>
 8006d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d56:	340a      	adds	r4, #10
 8006d58:	2509      	movs	r5, #9
 8006d5a:	e7f6      	b.n	8006d4a <__s2b+0x66>
 8006d5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d60:	4601      	mov	r1, r0
 8006d62:	3b30      	subs	r3, #48	@ 0x30
 8006d64:	220a      	movs	r2, #10
 8006d66:	4630      	mov	r0, r6
 8006d68:	f7ff ff76 	bl	8006c58 <__multadd>
 8006d6c:	e7ee      	b.n	8006d4c <__s2b+0x68>
 8006d6e:	bf00      	nop
 8006d70:	0800843e 	.word	0x0800843e
 8006d74:	080084af 	.word	0x080084af

08006d78 <__hi0bits>:
 8006d78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	bf36      	itet	cc
 8006d80:	0403      	lslcc	r3, r0, #16
 8006d82:	2000      	movcs	r0, #0
 8006d84:	2010      	movcc	r0, #16
 8006d86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d8a:	bf3c      	itt	cc
 8006d8c:	021b      	lslcc	r3, r3, #8
 8006d8e:	3008      	addcc	r0, #8
 8006d90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d94:	bf3c      	itt	cc
 8006d96:	011b      	lslcc	r3, r3, #4
 8006d98:	3004      	addcc	r0, #4
 8006d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d9e:	bf3c      	itt	cc
 8006da0:	009b      	lslcc	r3, r3, #2
 8006da2:	3002      	addcc	r0, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	db05      	blt.n	8006db4 <__hi0bits+0x3c>
 8006da8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006dac:	f100 0001 	add.w	r0, r0, #1
 8006db0:	bf08      	it	eq
 8006db2:	2020      	moveq	r0, #32
 8006db4:	4770      	bx	lr

08006db6 <__lo0bits>:
 8006db6:	6803      	ldr	r3, [r0, #0]
 8006db8:	4602      	mov	r2, r0
 8006dba:	f013 0007 	ands.w	r0, r3, #7
 8006dbe:	d00b      	beq.n	8006dd8 <__lo0bits+0x22>
 8006dc0:	07d9      	lsls	r1, r3, #31
 8006dc2:	d421      	bmi.n	8006e08 <__lo0bits+0x52>
 8006dc4:	0798      	lsls	r0, r3, #30
 8006dc6:	bf49      	itett	mi
 8006dc8:	085b      	lsrmi	r3, r3, #1
 8006dca:	089b      	lsrpl	r3, r3, #2
 8006dcc:	2001      	movmi	r0, #1
 8006dce:	6013      	strmi	r3, [r2, #0]
 8006dd0:	bf5c      	itt	pl
 8006dd2:	6013      	strpl	r3, [r2, #0]
 8006dd4:	2002      	movpl	r0, #2
 8006dd6:	4770      	bx	lr
 8006dd8:	b299      	uxth	r1, r3
 8006dda:	b909      	cbnz	r1, 8006de0 <__lo0bits+0x2a>
 8006ddc:	0c1b      	lsrs	r3, r3, #16
 8006dde:	2010      	movs	r0, #16
 8006de0:	b2d9      	uxtb	r1, r3
 8006de2:	b909      	cbnz	r1, 8006de8 <__lo0bits+0x32>
 8006de4:	3008      	adds	r0, #8
 8006de6:	0a1b      	lsrs	r3, r3, #8
 8006de8:	0719      	lsls	r1, r3, #28
 8006dea:	bf04      	itt	eq
 8006dec:	091b      	lsreq	r3, r3, #4
 8006dee:	3004      	addeq	r0, #4
 8006df0:	0799      	lsls	r1, r3, #30
 8006df2:	bf04      	itt	eq
 8006df4:	089b      	lsreq	r3, r3, #2
 8006df6:	3002      	addeq	r0, #2
 8006df8:	07d9      	lsls	r1, r3, #31
 8006dfa:	d403      	bmi.n	8006e04 <__lo0bits+0x4e>
 8006dfc:	085b      	lsrs	r3, r3, #1
 8006dfe:	f100 0001 	add.w	r0, r0, #1
 8006e02:	d003      	beq.n	8006e0c <__lo0bits+0x56>
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	4770      	bx	lr
 8006e08:	2000      	movs	r0, #0
 8006e0a:	4770      	bx	lr
 8006e0c:	2020      	movs	r0, #32
 8006e0e:	4770      	bx	lr

08006e10 <__i2b>:
 8006e10:	b510      	push	{r4, lr}
 8006e12:	460c      	mov	r4, r1
 8006e14:	2101      	movs	r1, #1
 8006e16:	f7ff febd 	bl	8006b94 <_Balloc>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	b928      	cbnz	r0, 8006e2a <__i2b+0x1a>
 8006e1e:	4b05      	ldr	r3, [pc, #20]	@ (8006e34 <__i2b+0x24>)
 8006e20:	4805      	ldr	r0, [pc, #20]	@ (8006e38 <__i2b+0x28>)
 8006e22:	f240 1145 	movw	r1, #325	@ 0x145
 8006e26:	f7ff fa4b 	bl	80062c0 <__assert_func>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	6144      	str	r4, [r0, #20]
 8006e2e:	6103      	str	r3, [r0, #16]
 8006e30:	bd10      	pop	{r4, pc}
 8006e32:	bf00      	nop
 8006e34:	0800843e 	.word	0x0800843e
 8006e38:	080084af 	.word	0x080084af

08006e3c <__multiply>:
 8006e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	4614      	mov	r4, r2
 8006e42:	690a      	ldr	r2, [r1, #16]
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	bfa8      	it	ge
 8006e4a:	4623      	movge	r3, r4
 8006e4c:	460f      	mov	r7, r1
 8006e4e:	bfa4      	itt	ge
 8006e50:	460c      	movge	r4, r1
 8006e52:	461f      	movge	r7, r3
 8006e54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006e58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006e5c:	68a3      	ldr	r3, [r4, #8]
 8006e5e:	6861      	ldr	r1, [r4, #4]
 8006e60:	eb0a 0609 	add.w	r6, sl, r9
 8006e64:	42b3      	cmp	r3, r6
 8006e66:	b085      	sub	sp, #20
 8006e68:	bfb8      	it	lt
 8006e6a:	3101      	addlt	r1, #1
 8006e6c:	f7ff fe92 	bl	8006b94 <_Balloc>
 8006e70:	b930      	cbnz	r0, 8006e80 <__multiply+0x44>
 8006e72:	4602      	mov	r2, r0
 8006e74:	4b44      	ldr	r3, [pc, #272]	@ (8006f88 <__multiply+0x14c>)
 8006e76:	4845      	ldr	r0, [pc, #276]	@ (8006f8c <__multiply+0x150>)
 8006e78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006e7c:	f7ff fa20 	bl	80062c0 <__assert_func>
 8006e80:	f100 0514 	add.w	r5, r0, #20
 8006e84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e88:	462b      	mov	r3, r5
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	4543      	cmp	r3, r8
 8006e8e:	d321      	bcc.n	8006ed4 <__multiply+0x98>
 8006e90:	f107 0114 	add.w	r1, r7, #20
 8006e94:	f104 0214 	add.w	r2, r4, #20
 8006e98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006e9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006ea0:	9302      	str	r3, [sp, #8]
 8006ea2:	1b13      	subs	r3, r2, r4
 8006ea4:	3b15      	subs	r3, #21
 8006ea6:	f023 0303 	bic.w	r3, r3, #3
 8006eaa:	3304      	adds	r3, #4
 8006eac:	f104 0715 	add.w	r7, r4, #21
 8006eb0:	42ba      	cmp	r2, r7
 8006eb2:	bf38      	it	cc
 8006eb4:	2304      	movcc	r3, #4
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	9b02      	ldr	r3, [sp, #8]
 8006eba:	9103      	str	r1, [sp, #12]
 8006ebc:	428b      	cmp	r3, r1
 8006ebe:	d80c      	bhi.n	8006eda <__multiply+0x9e>
 8006ec0:	2e00      	cmp	r6, #0
 8006ec2:	dd03      	ble.n	8006ecc <__multiply+0x90>
 8006ec4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d05b      	beq.n	8006f84 <__multiply+0x148>
 8006ecc:	6106      	str	r6, [r0, #16]
 8006ece:	b005      	add	sp, #20
 8006ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed4:	f843 2b04 	str.w	r2, [r3], #4
 8006ed8:	e7d8      	b.n	8006e8c <__multiply+0x50>
 8006eda:	f8b1 a000 	ldrh.w	sl, [r1]
 8006ede:	f1ba 0f00 	cmp.w	sl, #0
 8006ee2:	d024      	beq.n	8006f2e <__multiply+0xf2>
 8006ee4:	f104 0e14 	add.w	lr, r4, #20
 8006ee8:	46a9      	mov	r9, r5
 8006eea:	f04f 0c00 	mov.w	ip, #0
 8006eee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ef2:	f8d9 3000 	ldr.w	r3, [r9]
 8006ef6:	fa1f fb87 	uxth.w	fp, r7
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006f04:	f8d9 7000 	ldr.w	r7, [r9]
 8006f08:	4463      	add	r3, ip
 8006f0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f0e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006f12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f1c:	4572      	cmp	r2, lr
 8006f1e:	f849 3b04 	str.w	r3, [r9], #4
 8006f22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f26:	d8e2      	bhi.n	8006eee <__multiply+0xb2>
 8006f28:	9b01      	ldr	r3, [sp, #4]
 8006f2a:	f845 c003 	str.w	ip, [r5, r3]
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f34:	3104      	adds	r1, #4
 8006f36:	f1b9 0f00 	cmp.w	r9, #0
 8006f3a:	d021      	beq.n	8006f80 <__multiply+0x144>
 8006f3c:	682b      	ldr	r3, [r5, #0]
 8006f3e:	f104 0c14 	add.w	ip, r4, #20
 8006f42:	46ae      	mov	lr, r5
 8006f44:	f04f 0a00 	mov.w	sl, #0
 8006f48:	f8bc b000 	ldrh.w	fp, [ip]
 8006f4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006f50:	fb09 770b 	mla	r7, r9, fp, r7
 8006f54:	4457      	add	r7, sl
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f5c:	f84e 3b04 	str.w	r3, [lr], #4
 8006f60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f68:	f8be 3000 	ldrh.w	r3, [lr]
 8006f6c:	fb09 330a 	mla	r3, r9, sl, r3
 8006f70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006f74:	4562      	cmp	r2, ip
 8006f76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f7a:	d8e5      	bhi.n	8006f48 <__multiply+0x10c>
 8006f7c:	9f01      	ldr	r7, [sp, #4]
 8006f7e:	51eb      	str	r3, [r5, r7]
 8006f80:	3504      	adds	r5, #4
 8006f82:	e799      	b.n	8006eb8 <__multiply+0x7c>
 8006f84:	3e01      	subs	r6, #1
 8006f86:	e79b      	b.n	8006ec0 <__multiply+0x84>
 8006f88:	0800843e 	.word	0x0800843e
 8006f8c:	080084af 	.word	0x080084af

08006f90 <__pow5mult>:
 8006f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f94:	4615      	mov	r5, r2
 8006f96:	f012 0203 	ands.w	r2, r2, #3
 8006f9a:	4607      	mov	r7, r0
 8006f9c:	460e      	mov	r6, r1
 8006f9e:	d007      	beq.n	8006fb0 <__pow5mult+0x20>
 8006fa0:	4c25      	ldr	r4, [pc, #148]	@ (8007038 <__pow5mult+0xa8>)
 8006fa2:	3a01      	subs	r2, #1
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006faa:	f7ff fe55 	bl	8006c58 <__multadd>
 8006fae:	4606      	mov	r6, r0
 8006fb0:	10ad      	asrs	r5, r5, #2
 8006fb2:	d03d      	beq.n	8007030 <__pow5mult+0xa0>
 8006fb4:	69fc      	ldr	r4, [r7, #28]
 8006fb6:	b97c      	cbnz	r4, 8006fd8 <__pow5mult+0x48>
 8006fb8:	2010      	movs	r0, #16
 8006fba:	f7ff fd23 	bl	8006a04 <malloc>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	61f8      	str	r0, [r7, #28]
 8006fc2:	b928      	cbnz	r0, 8006fd0 <__pow5mult+0x40>
 8006fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800703c <__pow5mult+0xac>)
 8006fc6:	481e      	ldr	r0, [pc, #120]	@ (8007040 <__pow5mult+0xb0>)
 8006fc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006fcc:	f7ff f978 	bl	80062c0 <__assert_func>
 8006fd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fd4:	6004      	str	r4, [r0, #0]
 8006fd6:	60c4      	str	r4, [r0, #12]
 8006fd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006fdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fe0:	b94c      	cbnz	r4, 8006ff6 <__pow5mult+0x66>
 8006fe2:	f240 2171 	movw	r1, #625	@ 0x271
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	f7ff ff12 	bl	8006e10 <__i2b>
 8006fec:	2300      	movs	r3, #0
 8006fee:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	6003      	str	r3, [r0, #0]
 8006ff6:	f04f 0900 	mov.w	r9, #0
 8006ffa:	07eb      	lsls	r3, r5, #31
 8006ffc:	d50a      	bpl.n	8007014 <__pow5mult+0x84>
 8006ffe:	4631      	mov	r1, r6
 8007000:	4622      	mov	r2, r4
 8007002:	4638      	mov	r0, r7
 8007004:	f7ff ff1a 	bl	8006e3c <__multiply>
 8007008:	4631      	mov	r1, r6
 800700a:	4680      	mov	r8, r0
 800700c:	4638      	mov	r0, r7
 800700e:	f7ff fe01 	bl	8006c14 <_Bfree>
 8007012:	4646      	mov	r6, r8
 8007014:	106d      	asrs	r5, r5, #1
 8007016:	d00b      	beq.n	8007030 <__pow5mult+0xa0>
 8007018:	6820      	ldr	r0, [r4, #0]
 800701a:	b938      	cbnz	r0, 800702c <__pow5mult+0x9c>
 800701c:	4622      	mov	r2, r4
 800701e:	4621      	mov	r1, r4
 8007020:	4638      	mov	r0, r7
 8007022:	f7ff ff0b 	bl	8006e3c <__multiply>
 8007026:	6020      	str	r0, [r4, #0]
 8007028:	f8c0 9000 	str.w	r9, [r0]
 800702c:	4604      	mov	r4, r0
 800702e:	e7e4      	b.n	8006ffa <__pow5mult+0x6a>
 8007030:	4630      	mov	r0, r6
 8007032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007036:	bf00      	nop
 8007038:	08008508 	.word	0x08008508
 800703c:	08008389 	.word	0x08008389
 8007040:	080084af 	.word	0x080084af

08007044 <__lshift>:
 8007044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007048:	460c      	mov	r4, r1
 800704a:	6849      	ldr	r1, [r1, #4]
 800704c:	6923      	ldr	r3, [r4, #16]
 800704e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007052:	68a3      	ldr	r3, [r4, #8]
 8007054:	4607      	mov	r7, r0
 8007056:	4691      	mov	r9, r2
 8007058:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800705c:	f108 0601 	add.w	r6, r8, #1
 8007060:	42b3      	cmp	r3, r6
 8007062:	db0b      	blt.n	800707c <__lshift+0x38>
 8007064:	4638      	mov	r0, r7
 8007066:	f7ff fd95 	bl	8006b94 <_Balloc>
 800706a:	4605      	mov	r5, r0
 800706c:	b948      	cbnz	r0, 8007082 <__lshift+0x3e>
 800706e:	4602      	mov	r2, r0
 8007070:	4b28      	ldr	r3, [pc, #160]	@ (8007114 <__lshift+0xd0>)
 8007072:	4829      	ldr	r0, [pc, #164]	@ (8007118 <__lshift+0xd4>)
 8007074:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007078:	f7ff f922 	bl	80062c0 <__assert_func>
 800707c:	3101      	adds	r1, #1
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	e7ee      	b.n	8007060 <__lshift+0x1c>
 8007082:	2300      	movs	r3, #0
 8007084:	f100 0114 	add.w	r1, r0, #20
 8007088:	f100 0210 	add.w	r2, r0, #16
 800708c:	4618      	mov	r0, r3
 800708e:	4553      	cmp	r3, sl
 8007090:	db33      	blt.n	80070fa <__lshift+0xb6>
 8007092:	6920      	ldr	r0, [r4, #16]
 8007094:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007098:	f104 0314 	add.w	r3, r4, #20
 800709c:	f019 091f 	ands.w	r9, r9, #31
 80070a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070a8:	d02b      	beq.n	8007102 <__lshift+0xbe>
 80070aa:	f1c9 0e20 	rsb	lr, r9, #32
 80070ae:	468a      	mov	sl, r1
 80070b0:	2200      	movs	r2, #0
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	fa00 f009 	lsl.w	r0, r0, r9
 80070b8:	4310      	orrs	r0, r2
 80070ba:	f84a 0b04 	str.w	r0, [sl], #4
 80070be:	f853 2b04 	ldr.w	r2, [r3], #4
 80070c2:	459c      	cmp	ip, r3
 80070c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80070c8:	d8f3      	bhi.n	80070b2 <__lshift+0x6e>
 80070ca:	ebac 0304 	sub.w	r3, ip, r4
 80070ce:	3b15      	subs	r3, #21
 80070d0:	f023 0303 	bic.w	r3, r3, #3
 80070d4:	3304      	adds	r3, #4
 80070d6:	f104 0015 	add.w	r0, r4, #21
 80070da:	4584      	cmp	ip, r0
 80070dc:	bf38      	it	cc
 80070de:	2304      	movcc	r3, #4
 80070e0:	50ca      	str	r2, [r1, r3]
 80070e2:	b10a      	cbz	r2, 80070e8 <__lshift+0xa4>
 80070e4:	f108 0602 	add.w	r6, r8, #2
 80070e8:	3e01      	subs	r6, #1
 80070ea:	4638      	mov	r0, r7
 80070ec:	612e      	str	r6, [r5, #16]
 80070ee:	4621      	mov	r1, r4
 80070f0:	f7ff fd90 	bl	8006c14 <_Bfree>
 80070f4:	4628      	mov	r0, r5
 80070f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80070fe:	3301      	adds	r3, #1
 8007100:	e7c5      	b.n	800708e <__lshift+0x4a>
 8007102:	3904      	subs	r1, #4
 8007104:	f853 2b04 	ldr.w	r2, [r3], #4
 8007108:	f841 2f04 	str.w	r2, [r1, #4]!
 800710c:	459c      	cmp	ip, r3
 800710e:	d8f9      	bhi.n	8007104 <__lshift+0xc0>
 8007110:	e7ea      	b.n	80070e8 <__lshift+0xa4>
 8007112:	bf00      	nop
 8007114:	0800843e 	.word	0x0800843e
 8007118:	080084af 	.word	0x080084af

0800711c <__mcmp>:
 800711c:	690a      	ldr	r2, [r1, #16]
 800711e:	4603      	mov	r3, r0
 8007120:	6900      	ldr	r0, [r0, #16]
 8007122:	1a80      	subs	r0, r0, r2
 8007124:	b530      	push	{r4, r5, lr}
 8007126:	d10e      	bne.n	8007146 <__mcmp+0x2a>
 8007128:	3314      	adds	r3, #20
 800712a:	3114      	adds	r1, #20
 800712c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007130:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007134:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007138:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800713c:	4295      	cmp	r5, r2
 800713e:	d003      	beq.n	8007148 <__mcmp+0x2c>
 8007140:	d205      	bcs.n	800714e <__mcmp+0x32>
 8007142:	f04f 30ff 	mov.w	r0, #4294967295
 8007146:	bd30      	pop	{r4, r5, pc}
 8007148:	42a3      	cmp	r3, r4
 800714a:	d3f3      	bcc.n	8007134 <__mcmp+0x18>
 800714c:	e7fb      	b.n	8007146 <__mcmp+0x2a>
 800714e:	2001      	movs	r0, #1
 8007150:	e7f9      	b.n	8007146 <__mcmp+0x2a>
	...

08007154 <__mdiff>:
 8007154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007158:	4689      	mov	r9, r1
 800715a:	4606      	mov	r6, r0
 800715c:	4611      	mov	r1, r2
 800715e:	4648      	mov	r0, r9
 8007160:	4614      	mov	r4, r2
 8007162:	f7ff ffdb 	bl	800711c <__mcmp>
 8007166:	1e05      	subs	r5, r0, #0
 8007168:	d112      	bne.n	8007190 <__mdiff+0x3c>
 800716a:	4629      	mov	r1, r5
 800716c:	4630      	mov	r0, r6
 800716e:	f7ff fd11 	bl	8006b94 <_Balloc>
 8007172:	4602      	mov	r2, r0
 8007174:	b928      	cbnz	r0, 8007182 <__mdiff+0x2e>
 8007176:	4b3f      	ldr	r3, [pc, #252]	@ (8007274 <__mdiff+0x120>)
 8007178:	f240 2137 	movw	r1, #567	@ 0x237
 800717c:	483e      	ldr	r0, [pc, #248]	@ (8007278 <__mdiff+0x124>)
 800717e:	f7ff f89f 	bl	80062c0 <__assert_func>
 8007182:	2301      	movs	r3, #1
 8007184:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007188:	4610      	mov	r0, r2
 800718a:	b003      	add	sp, #12
 800718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007190:	bfbc      	itt	lt
 8007192:	464b      	movlt	r3, r9
 8007194:	46a1      	movlt	r9, r4
 8007196:	4630      	mov	r0, r6
 8007198:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800719c:	bfba      	itte	lt
 800719e:	461c      	movlt	r4, r3
 80071a0:	2501      	movlt	r5, #1
 80071a2:	2500      	movge	r5, #0
 80071a4:	f7ff fcf6 	bl	8006b94 <_Balloc>
 80071a8:	4602      	mov	r2, r0
 80071aa:	b918      	cbnz	r0, 80071b4 <__mdiff+0x60>
 80071ac:	4b31      	ldr	r3, [pc, #196]	@ (8007274 <__mdiff+0x120>)
 80071ae:	f240 2145 	movw	r1, #581	@ 0x245
 80071b2:	e7e3      	b.n	800717c <__mdiff+0x28>
 80071b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80071b8:	6926      	ldr	r6, [r4, #16]
 80071ba:	60c5      	str	r5, [r0, #12]
 80071bc:	f109 0310 	add.w	r3, r9, #16
 80071c0:	f109 0514 	add.w	r5, r9, #20
 80071c4:	f104 0e14 	add.w	lr, r4, #20
 80071c8:	f100 0b14 	add.w	fp, r0, #20
 80071cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80071d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80071d4:	9301      	str	r3, [sp, #4]
 80071d6:	46d9      	mov	r9, fp
 80071d8:	f04f 0c00 	mov.w	ip, #0
 80071dc:	9b01      	ldr	r3, [sp, #4]
 80071de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80071e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	fa1f f38a 	uxth.w	r3, sl
 80071ec:	4619      	mov	r1, r3
 80071ee:	b283      	uxth	r3, r0
 80071f0:	1acb      	subs	r3, r1, r3
 80071f2:	0c00      	lsrs	r0, r0, #16
 80071f4:	4463      	add	r3, ip
 80071f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80071fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80071fe:	b29b      	uxth	r3, r3
 8007200:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007204:	4576      	cmp	r6, lr
 8007206:	f849 3b04 	str.w	r3, [r9], #4
 800720a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800720e:	d8e5      	bhi.n	80071dc <__mdiff+0x88>
 8007210:	1b33      	subs	r3, r6, r4
 8007212:	3b15      	subs	r3, #21
 8007214:	f023 0303 	bic.w	r3, r3, #3
 8007218:	3415      	adds	r4, #21
 800721a:	3304      	adds	r3, #4
 800721c:	42a6      	cmp	r6, r4
 800721e:	bf38      	it	cc
 8007220:	2304      	movcc	r3, #4
 8007222:	441d      	add	r5, r3
 8007224:	445b      	add	r3, fp
 8007226:	461e      	mov	r6, r3
 8007228:	462c      	mov	r4, r5
 800722a:	4544      	cmp	r4, r8
 800722c:	d30e      	bcc.n	800724c <__mdiff+0xf8>
 800722e:	f108 0103 	add.w	r1, r8, #3
 8007232:	1b49      	subs	r1, r1, r5
 8007234:	f021 0103 	bic.w	r1, r1, #3
 8007238:	3d03      	subs	r5, #3
 800723a:	45a8      	cmp	r8, r5
 800723c:	bf38      	it	cc
 800723e:	2100      	movcc	r1, #0
 8007240:	440b      	add	r3, r1
 8007242:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007246:	b191      	cbz	r1, 800726e <__mdiff+0x11a>
 8007248:	6117      	str	r7, [r2, #16]
 800724a:	e79d      	b.n	8007188 <__mdiff+0x34>
 800724c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007250:	46e6      	mov	lr, ip
 8007252:	0c08      	lsrs	r0, r1, #16
 8007254:	fa1c fc81 	uxtah	ip, ip, r1
 8007258:	4471      	add	r1, lr
 800725a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800725e:	b289      	uxth	r1, r1
 8007260:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007264:	f846 1b04 	str.w	r1, [r6], #4
 8007268:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800726c:	e7dd      	b.n	800722a <__mdiff+0xd6>
 800726e:	3f01      	subs	r7, #1
 8007270:	e7e7      	b.n	8007242 <__mdiff+0xee>
 8007272:	bf00      	nop
 8007274:	0800843e 	.word	0x0800843e
 8007278:	080084af 	.word	0x080084af

0800727c <__ulp>:
 800727c:	b082      	sub	sp, #8
 800727e:	ed8d 0b00 	vstr	d0, [sp]
 8007282:	9a01      	ldr	r2, [sp, #4]
 8007284:	4b0f      	ldr	r3, [pc, #60]	@ (80072c4 <__ulp+0x48>)
 8007286:	4013      	ands	r3, r2
 8007288:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800728c:	2b00      	cmp	r3, #0
 800728e:	dc08      	bgt.n	80072a2 <__ulp+0x26>
 8007290:	425b      	negs	r3, r3
 8007292:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007296:	ea4f 5223 	mov.w	r2, r3, asr #20
 800729a:	da04      	bge.n	80072a6 <__ulp+0x2a>
 800729c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80072a0:	4113      	asrs	r3, r2
 80072a2:	2200      	movs	r2, #0
 80072a4:	e008      	b.n	80072b8 <__ulp+0x3c>
 80072a6:	f1a2 0314 	sub.w	r3, r2, #20
 80072aa:	2b1e      	cmp	r3, #30
 80072ac:	bfda      	itte	le
 80072ae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80072b2:	40da      	lsrle	r2, r3
 80072b4:	2201      	movgt	r2, #1
 80072b6:	2300      	movs	r3, #0
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	ec41 0b10 	vmov	d0, r0, r1
 80072c0:	b002      	add	sp, #8
 80072c2:	4770      	bx	lr
 80072c4:	7ff00000 	.word	0x7ff00000

080072c8 <__b2d>:
 80072c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072cc:	6906      	ldr	r6, [r0, #16]
 80072ce:	f100 0814 	add.w	r8, r0, #20
 80072d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80072d6:	1f37      	subs	r7, r6, #4
 80072d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80072dc:	4610      	mov	r0, r2
 80072de:	f7ff fd4b 	bl	8006d78 <__hi0bits>
 80072e2:	f1c0 0320 	rsb	r3, r0, #32
 80072e6:	280a      	cmp	r0, #10
 80072e8:	600b      	str	r3, [r1, #0]
 80072ea:	491b      	ldr	r1, [pc, #108]	@ (8007358 <__b2d+0x90>)
 80072ec:	dc15      	bgt.n	800731a <__b2d+0x52>
 80072ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80072f2:	fa22 f30c 	lsr.w	r3, r2, ip
 80072f6:	45b8      	cmp	r8, r7
 80072f8:	ea43 0501 	orr.w	r5, r3, r1
 80072fc:	bf34      	ite	cc
 80072fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007302:	2300      	movcs	r3, #0
 8007304:	3015      	adds	r0, #21
 8007306:	fa02 f000 	lsl.w	r0, r2, r0
 800730a:	fa23 f30c 	lsr.w	r3, r3, ip
 800730e:	4303      	orrs	r3, r0
 8007310:	461c      	mov	r4, r3
 8007312:	ec45 4b10 	vmov	d0, r4, r5
 8007316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800731a:	45b8      	cmp	r8, r7
 800731c:	bf3a      	itte	cc
 800731e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007322:	f1a6 0708 	subcc.w	r7, r6, #8
 8007326:	2300      	movcs	r3, #0
 8007328:	380b      	subs	r0, #11
 800732a:	d012      	beq.n	8007352 <__b2d+0x8a>
 800732c:	f1c0 0120 	rsb	r1, r0, #32
 8007330:	fa23 f401 	lsr.w	r4, r3, r1
 8007334:	4082      	lsls	r2, r0
 8007336:	4322      	orrs	r2, r4
 8007338:	4547      	cmp	r7, r8
 800733a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800733e:	bf8c      	ite	hi
 8007340:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007344:	2200      	movls	r2, #0
 8007346:	4083      	lsls	r3, r0
 8007348:	40ca      	lsrs	r2, r1
 800734a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800734e:	4313      	orrs	r3, r2
 8007350:	e7de      	b.n	8007310 <__b2d+0x48>
 8007352:	ea42 0501 	orr.w	r5, r2, r1
 8007356:	e7db      	b.n	8007310 <__b2d+0x48>
 8007358:	3ff00000 	.word	0x3ff00000

0800735c <__d2b>:
 800735c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007360:	460f      	mov	r7, r1
 8007362:	2101      	movs	r1, #1
 8007364:	ec59 8b10 	vmov	r8, r9, d0
 8007368:	4616      	mov	r6, r2
 800736a:	f7ff fc13 	bl	8006b94 <_Balloc>
 800736e:	4604      	mov	r4, r0
 8007370:	b930      	cbnz	r0, 8007380 <__d2b+0x24>
 8007372:	4602      	mov	r2, r0
 8007374:	4b23      	ldr	r3, [pc, #140]	@ (8007404 <__d2b+0xa8>)
 8007376:	4824      	ldr	r0, [pc, #144]	@ (8007408 <__d2b+0xac>)
 8007378:	f240 310f 	movw	r1, #783	@ 0x30f
 800737c:	f7fe ffa0 	bl	80062c0 <__assert_func>
 8007380:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007384:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007388:	b10d      	cbz	r5, 800738e <__d2b+0x32>
 800738a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800738e:	9301      	str	r3, [sp, #4]
 8007390:	f1b8 0300 	subs.w	r3, r8, #0
 8007394:	d023      	beq.n	80073de <__d2b+0x82>
 8007396:	4668      	mov	r0, sp
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	f7ff fd0c 	bl	8006db6 <__lo0bits>
 800739e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80073a2:	b1d0      	cbz	r0, 80073da <__d2b+0x7e>
 80073a4:	f1c0 0320 	rsb	r3, r0, #32
 80073a8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ac:	430b      	orrs	r3, r1
 80073ae:	40c2      	lsrs	r2, r0
 80073b0:	6163      	str	r3, [r4, #20]
 80073b2:	9201      	str	r2, [sp, #4]
 80073b4:	9b01      	ldr	r3, [sp, #4]
 80073b6:	61a3      	str	r3, [r4, #24]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	bf0c      	ite	eq
 80073bc:	2201      	moveq	r2, #1
 80073be:	2202      	movne	r2, #2
 80073c0:	6122      	str	r2, [r4, #16]
 80073c2:	b1a5      	cbz	r5, 80073ee <__d2b+0x92>
 80073c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80073c8:	4405      	add	r5, r0
 80073ca:	603d      	str	r5, [r7, #0]
 80073cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80073d0:	6030      	str	r0, [r6, #0]
 80073d2:	4620      	mov	r0, r4
 80073d4:	b003      	add	sp, #12
 80073d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073da:	6161      	str	r1, [r4, #20]
 80073dc:	e7ea      	b.n	80073b4 <__d2b+0x58>
 80073de:	a801      	add	r0, sp, #4
 80073e0:	f7ff fce9 	bl	8006db6 <__lo0bits>
 80073e4:	9b01      	ldr	r3, [sp, #4]
 80073e6:	6163      	str	r3, [r4, #20]
 80073e8:	3020      	adds	r0, #32
 80073ea:	2201      	movs	r2, #1
 80073ec:	e7e8      	b.n	80073c0 <__d2b+0x64>
 80073ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80073f6:	6038      	str	r0, [r7, #0]
 80073f8:	6918      	ldr	r0, [r3, #16]
 80073fa:	f7ff fcbd 	bl	8006d78 <__hi0bits>
 80073fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007402:	e7e5      	b.n	80073d0 <__d2b+0x74>
 8007404:	0800843e 	.word	0x0800843e
 8007408:	080084af 	.word	0x080084af

0800740c <__ratio>:
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	b085      	sub	sp, #20
 8007412:	e9cd 1000 	strd	r1, r0, [sp]
 8007416:	a902      	add	r1, sp, #8
 8007418:	f7ff ff56 	bl	80072c8 <__b2d>
 800741c:	9800      	ldr	r0, [sp, #0]
 800741e:	a903      	add	r1, sp, #12
 8007420:	ec55 4b10 	vmov	r4, r5, d0
 8007424:	f7ff ff50 	bl	80072c8 <__b2d>
 8007428:	9b01      	ldr	r3, [sp, #4]
 800742a:	6919      	ldr	r1, [r3, #16]
 800742c:	9b00      	ldr	r3, [sp, #0]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	1ac9      	subs	r1, r1, r3
 8007432:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007436:	1a9b      	subs	r3, r3, r2
 8007438:	ec5b ab10 	vmov	sl, fp, d0
 800743c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007440:	2b00      	cmp	r3, #0
 8007442:	bfce      	itee	gt
 8007444:	462a      	movgt	r2, r5
 8007446:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800744a:	465a      	movle	r2, fp
 800744c:	462f      	mov	r7, r5
 800744e:	46d9      	mov	r9, fp
 8007450:	bfcc      	ite	gt
 8007452:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007456:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800745a:	464b      	mov	r3, r9
 800745c:	4652      	mov	r2, sl
 800745e:	4620      	mov	r0, r4
 8007460:	4639      	mov	r1, r7
 8007462:	f7f9 f9fb 	bl	800085c <__aeabi_ddiv>
 8007466:	ec41 0b10 	vmov	d0, r0, r1
 800746a:	b005      	add	sp, #20
 800746c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007470 <__copybits>:
 8007470:	3901      	subs	r1, #1
 8007472:	b570      	push	{r4, r5, r6, lr}
 8007474:	1149      	asrs	r1, r1, #5
 8007476:	6914      	ldr	r4, [r2, #16]
 8007478:	3101      	adds	r1, #1
 800747a:	f102 0314 	add.w	r3, r2, #20
 800747e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007482:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007486:	1f05      	subs	r5, r0, #4
 8007488:	42a3      	cmp	r3, r4
 800748a:	d30c      	bcc.n	80074a6 <__copybits+0x36>
 800748c:	1aa3      	subs	r3, r4, r2
 800748e:	3b11      	subs	r3, #17
 8007490:	f023 0303 	bic.w	r3, r3, #3
 8007494:	3211      	adds	r2, #17
 8007496:	42a2      	cmp	r2, r4
 8007498:	bf88      	it	hi
 800749a:	2300      	movhi	r3, #0
 800749c:	4418      	add	r0, r3
 800749e:	2300      	movs	r3, #0
 80074a0:	4288      	cmp	r0, r1
 80074a2:	d305      	bcc.n	80074b0 <__copybits+0x40>
 80074a4:	bd70      	pop	{r4, r5, r6, pc}
 80074a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80074aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80074ae:	e7eb      	b.n	8007488 <__copybits+0x18>
 80074b0:	f840 3b04 	str.w	r3, [r0], #4
 80074b4:	e7f4      	b.n	80074a0 <__copybits+0x30>

080074b6 <__any_on>:
 80074b6:	f100 0214 	add.w	r2, r0, #20
 80074ba:	6900      	ldr	r0, [r0, #16]
 80074bc:	114b      	asrs	r3, r1, #5
 80074be:	4298      	cmp	r0, r3
 80074c0:	b510      	push	{r4, lr}
 80074c2:	db11      	blt.n	80074e8 <__any_on+0x32>
 80074c4:	dd0a      	ble.n	80074dc <__any_on+0x26>
 80074c6:	f011 011f 	ands.w	r1, r1, #31
 80074ca:	d007      	beq.n	80074dc <__any_on+0x26>
 80074cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80074d0:	fa24 f001 	lsr.w	r0, r4, r1
 80074d4:	fa00 f101 	lsl.w	r1, r0, r1
 80074d8:	428c      	cmp	r4, r1
 80074da:	d10b      	bne.n	80074f4 <__any_on+0x3e>
 80074dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d803      	bhi.n	80074ec <__any_on+0x36>
 80074e4:	2000      	movs	r0, #0
 80074e6:	bd10      	pop	{r4, pc}
 80074e8:	4603      	mov	r3, r0
 80074ea:	e7f7      	b.n	80074dc <__any_on+0x26>
 80074ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074f0:	2900      	cmp	r1, #0
 80074f2:	d0f5      	beq.n	80074e0 <__any_on+0x2a>
 80074f4:	2001      	movs	r0, #1
 80074f6:	e7f6      	b.n	80074e6 <__any_on+0x30>

080074f8 <__ascii_wctomb>:
 80074f8:	4603      	mov	r3, r0
 80074fa:	4608      	mov	r0, r1
 80074fc:	b141      	cbz	r1, 8007510 <__ascii_wctomb+0x18>
 80074fe:	2aff      	cmp	r2, #255	@ 0xff
 8007500:	d904      	bls.n	800750c <__ascii_wctomb+0x14>
 8007502:	228a      	movs	r2, #138	@ 0x8a
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	f04f 30ff 	mov.w	r0, #4294967295
 800750a:	4770      	bx	lr
 800750c:	700a      	strb	r2, [r1, #0]
 800750e:	2001      	movs	r0, #1
 8007510:	4770      	bx	lr
	...

08007514 <__sflush_r>:
 8007514:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800751c:	0716      	lsls	r6, r2, #28
 800751e:	4605      	mov	r5, r0
 8007520:	460c      	mov	r4, r1
 8007522:	d454      	bmi.n	80075ce <__sflush_r+0xba>
 8007524:	684b      	ldr	r3, [r1, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	dc02      	bgt.n	8007530 <__sflush_r+0x1c>
 800752a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800752c:	2b00      	cmp	r3, #0
 800752e:	dd48      	ble.n	80075c2 <__sflush_r+0xae>
 8007530:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007532:	2e00      	cmp	r6, #0
 8007534:	d045      	beq.n	80075c2 <__sflush_r+0xae>
 8007536:	2300      	movs	r3, #0
 8007538:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800753c:	682f      	ldr	r7, [r5, #0]
 800753e:	6a21      	ldr	r1, [r4, #32]
 8007540:	602b      	str	r3, [r5, #0]
 8007542:	d030      	beq.n	80075a6 <__sflush_r+0x92>
 8007544:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	0759      	lsls	r1, r3, #29
 800754a:	d505      	bpl.n	8007558 <__sflush_r+0x44>
 800754c:	6863      	ldr	r3, [r4, #4]
 800754e:	1ad2      	subs	r2, r2, r3
 8007550:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007552:	b10b      	cbz	r3, 8007558 <__sflush_r+0x44>
 8007554:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007556:	1ad2      	subs	r2, r2, r3
 8007558:	2300      	movs	r3, #0
 800755a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800755c:	6a21      	ldr	r1, [r4, #32]
 800755e:	4628      	mov	r0, r5
 8007560:	47b0      	blx	r6
 8007562:	1c43      	adds	r3, r0, #1
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	d106      	bne.n	8007576 <__sflush_r+0x62>
 8007568:	6829      	ldr	r1, [r5, #0]
 800756a:	291d      	cmp	r1, #29
 800756c:	d82b      	bhi.n	80075c6 <__sflush_r+0xb2>
 800756e:	4a2a      	ldr	r2, [pc, #168]	@ (8007618 <__sflush_r+0x104>)
 8007570:	410a      	asrs	r2, r1
 8007572:	07d6      	lsls	r6, r2, #31
 8007574:	d427      	bmi.n	80075c6 <__sflush_r+0xb2>
 8007576:	2200      	movs	r2, #0
 8007578:	6062      	str	r2, [r4, #4]
 800757a:	04d9      	lsls	r1, r3, #19
 800757c:	6922      	ldr	r2, [r4, #16]
 800757e:	6022      	str	r2, [r4, #0]
 8007580:	d504      	bpl.n	800758c <__sflush_r+0x78>
 8007582:	1c42      	adds	r2, r0, #1
 8007584:	d101      	bne.n	800758a <__sflush_r+0x76>
 8007586:	682b      	ldr	r3, [r5, #0]
 8007588:	b903      	cbnz	r3, 800758c <__sflush_r+0x78>
 800758a:	6560      	str	r0, [r4, #84]	@ 0x54
 800758c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800758e:	602f      	str	r7, [r5, #0]
 8007590:	b1b9      	cbz	r1, 80075c2 <__sflush_r+0xae>
 8007592:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007596:	4299      	cmp	r1, r3
 8007598:	d002      	beq.n	80075a0 <__sflush_r+0x8c>
 800759a:	4628      	mov	r0, r5
 800759c:	f7fe feae 	bl	80062fc <_free_r>
 80075a0:	2300      	movs	r3, #0
 80075a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80075a4:	e00d      	b.n	80075c2 <__sflush_r+0xae>
 80075a6:	2301      	movs	r3, #1
 80075a8:	4628      	mov	r0, r5
 80075aa:	47b0      	blx	r6
 80075ac:	4602      	mov	r2, r0
 80075ae:	1c50      	adds	r0, r2, #1
 80075b0:	d1c9      	bne.n	8007546 <__sflush_r+0x32>
 80075b2:	682b      	ldr	r3, [r5, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0c6      	beq.n	8007546 <__sflush_r+0x32>
 80075b8:	2b1d      	cmp	r3, #29
 80075ba:	d001      	beq.n	80075c0 <__sflush_r+0xac>
 80075bc:	2b16      	cmp	r3, #22
 80075be:	d11e      	bne.n	80075fe <__sflush_r+0xea>
 80075c0:	602f      	str	r7, [r5, #0]
 80075c2:	2000      	movs	r0, #0
 80075c4:	e022      	b.n	800760c <__sflush_r+0xf8>
 80075c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075ca:	b21b      	sxth	r3, r3
 80075cc:	e01b      	b.n	8007606 <__sflush_r+0xf2>
 80075ce:	690f      	ldr	r7, [r1, #16]
 80075d0:	2f00      	cmp	r7, #0
 80075d2:	d0f6      	beq.n	80075c2 <__sflush_r+0xae>
 80075d4:	0793      	lsls	r3, r2, #30
 80075d6:	680e      	ldr	r6, [r1, #0]
 80075d8:	bf08      	it	eq
 80075da:	694b      	ldreq	r3, [r1, #20]
 80075dc:	600f      	str	r7, [r1, #0]
 80075de:	bf18      	it	ne
 80075e0:	2300      	movne	r3, #0
 80075e2:	eba6 0807 	sub.w	r8, r6, r7
 80075e6:	608b      	str	r3, [r1, #8]
 80075e8:	f1b8 0f00 	cmp.w	r8, #0
 80075ec:	dde9      	ble.n	80075c2 <__sflush_r+0xae>
 80075ee:	6a21      	ldr	r1, [r4, #32]
 80075f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80075f2:	4643      	mov	r3, r8
 80075f4:	463a      	mov	r2, r7
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b0      	blx	r6
 80075fa:	2800      	cmp	r0, #0
 80075fc:	dc08      	bgt.n	8007610 <__sflush_r+0xfc>
 80075fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007606:	81a3      	strh	r3, [r4, #12]
 8007608:	f04f 30ff 	mov.w	r0, #4294967295
 800760c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007610:	4407      	add	r7, r0
 8007612:	eba8 0800 	sub.w	r8, r8, r0
 8007616:	e7e7      	b.n	80075e8 <__sflush_r+0xd4>
 8007618:	dfbffffe 	.word	0xdfbffffe

0800761c <_fflush_r>:
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	690b      	ldr	r3, [r1, #16]
 8007620:	4605      	mov	r5, r0
 8007622:	460c      	mov	r4, r1
 8007624:	b913      	cbnz	r3, 800762c <_fflush_r+0x10>
 8007626:	2500      	movs	r5, #0
 8007628:	4628      	mov	r0, r5
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	b118      	cbz	r0, 8007636 <_fflush_r+0x1a>
 800762e:	6a03      	ldr	r3, [r0, #32]
 8007630:	b90b      	cbnz	r3, 8007636 <_fflush_r+0x1a>
 8007632:	f7fe fcb5 	bl	8005fa0 <__sinit>
 8007636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0f3      	beq.n	8007626 <_fflush_r+0xa>
 800763e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007640:	07d0      	lsls	r0, r2, #31
 8007642:	d404      	bmi.n	800764e <_fflush_r+0x32>
 8007644:	0599      	lsls	r1, r3, #22
 8007646:	d402      	bmi.n	800764e <_fflush_r+0x32>
 8007648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800764a:	f7fe fe20 	bl	800628e <__retarget_lock_acquire_recursive>
 800764e:	4628      	mov	r0, r5
 8007650:	4621      	mov	r1, r4
 8007652:	f7ff ff5f 	bl	8007514 <__sflush_r>
 8007656:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007658:	07da      	lsls	r2, r3, #31
 800765a:	4605      	mov	r5, r0
 800765c:	d4e4      	bmi.n	8007628 <_fflush_r+0xc>
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	059b      	lsls	r3, r3, #22
 8007662:	d4e1      	bmi.n	8007628 <_fflush_r+0xc>
 8007664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007666:	f7fe fe13 	bl	8006290 <__retarget_lock_release_recursive>
 800766a:	e7dd      	b.n	8007628 <_fflush_r+0xc>

0800766c <fiprintf>:
 800766c:	b40e      	push	{r1, r2, r3}
 800766e:	b503      	push	{r0, r1, lr}
 8007670:	4601      	mov	r1, r0
 8007672:	ab03      	add	r3, sp, #12
 8007674:	4805      	ldr	r0, [pc, #20]	@ (800768c <fiprintf+0x20>)
 8007676:	f853 2b04 	ldr.w	r2, [r3], #4
 800767a:	6800      	ldr	r0, [r0, #0]
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	f000 f85b 	bl	8007738 <_vfiprintf_r>
 8007682:	b002      	add	sp, #8
 8007684:	f85d eb04 	ldr.w	lr, [sp], #4
 8007688:	b003      	add	sp, #12
 800768a:	4770      	bx	lr
 800768c:	20000184 	.word	0x20000184

08007690 <_sbrk_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4d06      	ldr	r5, [pc, #24]	@ (80076ac <_sbrk_r+0x1c>)
 8007694:	2300      	movs	r3, #0
 8007696:	4604      	mov	r4, r0
 8007698:	4608      	mov	r0, r1
 800769a:	602b      	str	r3, [r5, #0]
 800769c:	f7fa fb76 	bl	8001d8c <_sbrk>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d102      	bne.n	80076aa <_sbrk_r+0x1a>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	b103      	cbz	r3, 80076aa <_sbrk_r+0x1a>
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	20000574 	.word	0x20000574

080076b0 <abort>:
 80076b0:	b508      	push	{r3, lr}
 80076b2:	2006      	movs	r0, #6
 80076b4:	f000 fba2 	bl	8007dfc <raise>
 80076b8:	2001      	movs	r0, #1
 80076ba:	f7fa faef 	bl	8001c9c <_exit>

080076be <_calloc_r>:
 80076be:	b570      	push	{r4, r5, r6, lr}
 80076c0:	fba1 5402 	umull	r5, r4, r1, r2
 80076c4:	b93c      	cbnz	r4, 80076d6 <_calloc_r+0x18>
 80076c6:	4629      	mov	r1, r5
 80076c8:	f7ff f9c6 	bl	8006a58 <_malloc_r>
 80076cc:	4606      	mov	r6, r0
 80076ce:	b928      	cbnz	r0, 80076dc <_calloc_r+0x1e>
 80076d0:	2600      	movs	r6, #0
 80076d2:	4630      	mov	r0, r6
 80076d4:	bd70      	pop	{r4, r5, r6, pc}
 80076d6:	220c      	movs	r2, #12
 80076d8:	6002      	str	r2, [r0, #0]
 80076da:	e7f9      	b.n	80076d0 <_calloc_r+0x12>
 80076dc:	462a      	mov	r2, r5
 80076de:	4621      	mov	r1, r4
 80076e0:	f7fe fcd7 	bl	8006092 <memset>
 80076e4:	e7f5      	b.n	80076d2 <_calloc_r+0x14>

080076e6 <__sfputc_r>:
 80076e6:	6893      	ldr	r3, [r2, #8]
 80076e8:	3b01      	subs	r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	b410      	push	{r4}
 80076ee:	6093      	str	r3, [r2, #8]
 80076f0:	da08      	bge.n	8007704 <__sfputc_r+0x1e>
 80076f2:	6994      	ldr	r4, [r2, #24]
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	db01      	blt.n	80076fc <__sfputc_r+0x16>
 80076f8:	290a      	cmp	r1, #10
 80076fa:	d103      	bne.n	8007704 <__sfputc_r+0x1e>
 80076fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007700:	f000 bac0 	b.w	8007c84 <__swbuf_r>
 8007704:	6813      	ldr	r3, [r2, #0]
 8007706:	1c58      	adds	r0, r3, #1
 8007708:	6010      	str	r0, [r2, #0]
 800770a:	7019      	strb	r1, [r3, #0]
 800770c:	4608      	mov	r0, r1
 800770e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007712:	4770      	bx	lr

08007714 <__sfputs_r>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	4606      	mov	r6, r0
 8007718:	460f      	mov	r7, r1
 800771a:	4614      	mov	r4, r2
 800771c:	18d5      	adds	r5, r2, r3
 800771e:	42ac      	cmp	r4, r5
 8007720:	d101      	bne.n	8007726 <__sfputs_r+0x12>
 8007722:	2000      	movs	r0, #0
 8007724:	e007      	b.n	8007736 <__sfputs_r+0x22>
 8007726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800772a:	463a      	mov	r2, r7
 800772c:	4630      	mov	r0, r6
 800772e:	f7ff ffda 	bl	80076e6 <__sfputc_r>
 8007732:	1c43      	adds	r3, r0, #1
 8007734:	d1f3      	bne.n	800771e <__sfputs_r+0xa>
 8007736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007738 <_vfiprintf_r>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	460d      	mov	r5, r1
 800773e:	b09d      	sub	sp, #116	@ 0x74
 8007740:	4614      	mov	r4, r2
 8007742:	4698      	mov	r8, r3
 8007744:	4606      	mov	r6, r0
 8007746:	b118      	cbz	r0, 8007750 <_vfiprintf_r+0x18>
 8007748:	6a03      	ldr	r3, [r0, #32]
 800774a:	b90b      	cbnz	r3, 8007750 <_vfiprintf_r+0x18>
 800774c:	f7fe fc28 	bl	8005fa0 <__sinit>
 8007750:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007752:	07d9      	lsls	r1, r3, #31
 8007754:	d405      	bmi.n	8007762 <_vfiprintf_r+0x2a>
 8007756:	89ab      	ldrh	r3, [r5, #12]
 8007758:	059a      	lsls	r2, r3, #22
 800775a:	d402      	bmi.n	8007762 <_vfiprintf_r+0x2a>
 800775c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800775e:	f7fe fd96 	bl	800628e <__retarget_lock_acquire_recursive>
 8007762:	89ab      	ldrh	r3, [r5, #12]
 8007764:	071b      	lsls	r3, r3, #28
 8007766:	d501      	bpl.n	800776c <_vfiprintf_r+0x34>
 8007768:	692b      	ldr	r3, [r5, #16]
 800776a:	b99b      	cbnz	r3, 8007794 <_vfiprintf_r+0x5c>
 800776c:	4629      	mov	r1, r5
 800776e:	4630      	mov	r0, r6
 8007770:	f000 fac6 	bl	8007d00 <__swsetup_r>
 8007774:	b170      	cbz	r0, 8007794 <_vfiprintf_r+0x5c>
 8007776:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007778:	07dc      	lsls	r4, r3, #31
 800777a:	d504      	bpl.n	8007786 <_vfiprintf_r+0x4e>
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	b01d      	add	sp, #116	@ 0x74
 8007782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007786:	89ab      	ldrh	r3, [r5, #12]
 8007788:	0598      	lsls	r0, r3, #22
 800778a:	d4f7      	bmi.n	800777c <_vfiprintf_r+0x44>
 800778c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800778e:	f7fe fd7f 	bl	8006290 <__retarget_lock_release_recursive>
 8007792:	e7f3      	b.n	800777c <_vfiprintf_r+0x44>
 8007794:	2300      	movs	r3, #0
 8007796:	9309      	str	r3, [sp, #36]	@ 0x24
 8007798:	2320      	movs	r3, #32
 800779a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800779e:	f8cd 800c 	str.w	r8, [sp, #12]
 80077a2:	2330      	movs	r3, #48	@ 0x30
 80077a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007954 <_vfiprintf_r+0x21c>
 80077a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80077ac:	f04f 0901 	mov.w	r9, #1
 80077b0:	4623      	mov	r3, r4
 80077b2:	469a      	mov	sl, r3
 80077b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077b8:	b10a      	cbz	r2, 80077be <_vfiprintf_r+0x86>
 80077ba:	2a25      	cmp	r2, #37	@ 0x25
 80077bc:	d1f9      	bne.n	80077b2 <_vfiprintf_r+0x7a>
 80077be:	ebba 0b04 	subs.w	fp, sl, r4
 80077c2:	d00b      	beq.n	80077dc <_vfiprintf_r+0xa4>
 80077c4:	465b      	mov	r3, fp
 80077c6:	4622      	mov	r2, r4
 80077c8:	4629      	mov	r1, r5
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7ff ffa2 	bl	8007714 <__sfputs_r>
 80077d0:	3001      	adds	r0, #1
 80077d2:	f000 80a7 	beq.w	8007924 <_vfiprintf_r+0x1ec>
 80077d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077d8:	445a      	add	r2, fp
 80077da:	9209      	str	r2, [sp, #36]	@ 0x24
 80077dc:	f89a 3000 	ldrb.w	r3, [sl]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 809f 	beq.w	8007924 <_vfiprintf_r+0x1ec>
 80077e6:	2300      	movs	r3, #0
 80077e8:	f04f 32ff 	mov.w	r2, #4294967295
 80077ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077f0:	f10a 0a01 	add.w	sl, sl, #1
 80077f4:	9304      	str	r3, [sp, #16]
 80077f6:	9307      	str	r3, [sp, #28]
 80077f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80077fe:	4654      	mov	r4, sl
 8007800:	2205      	movs	r2, #5
 8007802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007806:	4853      	ldr	r0, [pc, #332]	@ (8007954 <_vfiprintf_r+0x21c>)
 8007808:	f7f8 fcf2 	bl	80001f0 <memchr>
 800780c:	9a04      	ldr	r2, [sp, #16]
 800780e:	b9d8      	cbnz	r0, 8007848 <_vfiprintf_r+0x110>
 8007810:	06d1      	lsls	r1, r2, #27
 8007812:	bf44      	itt	mi
 8007814:	2320      	movmi	r3, #32
 8007816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800781a:	0713      	lsls	r3, r2, #28
 800781c:	bf44      	itt	mi
 800781e:	232b      	movmi	r3, #43	@ 0x2b
 8007820:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007824:	f89a 3000 	ldrb.w	r3, [sl]
 8007828:	2b2a      	cmp	r3, #42	@ 0x2a
 800782a:	d015      	beq.n	8007858 <_vfiprintf_r+0x120>
 800782c:	9a07      	ldr	r2, [sp, #28]
 800782e:	4654      	mov	r4, sl
 8007830:	2000      	movs	r0, #0
 8007832:	f04f 0c0a 	mov.w	ip, #10
 8007836:	4621      	mov	r1, r4
 8007838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800783c:	3b30      	subs	r3, #48	@ 0x30
 800783e:	2b09      	cmp	r3, #9
 8007840:	d94b      	bls.n	80078da <_vfiprintf_r+0x1a2>
 8007842:	b1b0      	cbz	r0, 8007872 <_vfiprintf_r+0x13a>
 8007844:	9207      	str	r2, [sp, #28]
 8007846:	e014      	b.n	8007872 <_vfiprintf_r+0x13a>
 8007848:	eba0 0308 	sub.w	r3, r0, r8
 800784c:	fa09 f303 	lsl.w	r3, r9, r3
 8007850:	4313      	orrs	r3, r2
 8007852:	9304      	str	r3, [sp, #16]
 8007854:	46a2      	mov	sl, r4
 8007856:	e7d2      	b.n	80077fe <_vfiprintf_r+0xc6>
 8007858:	9b03      	ldr	r3, [sp, #12]
 800785a:	1d19      	adds	r1, r3, #4
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	9103      	str	r1, [sp, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	bfbb      	ittet	lt
 8007864:	425b      	neglt	r3, r3
 8007866:	f042 0202 	orrlt.w	r2, r2, #2
 800786a:	9307      	strge	r3, [sp, #28]
 800786c:	9307      	strlt	r3, [sp, #28]
 800786e:	bfb8      	it	lt
 8007870:	9204      	strlt	r2, [sp, #16]
 8007872:	7823      	ldrb	r3, [r4, #0]
 8007874:	2b2e      	cmp	r3, #46	@ 0x2e
 8007876:	d10a      	bne.n	800788e <_vfiprintf_r+0x156>
 8007878:	7863      	ldrb	r3, [r4, #1]
 800787a:	2b2a      	cmp	r3, #42	@ 0x2a
 800787c:	d132      	bne.n	80078e4 <_vfiprintf_r+0x1ac>
 800787e:	9b03      	ldr	r3, [sp, #12]
 8007880:	1d1a      	adds	r2, r3, #4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	9203      	str	r2, [sp, #12]
 8007886:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800788a:	3402      	adds	r4, #2
 800788c:	9305      	str	r3, [sp, #20]
 800788e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007964 <_vfiprintf_r+0x22c>
 8007892:	7821      	ldrb	r1, [r4, #0]
 8007894:	2203      	movs	r2, #3
 8007896:	4650      	mov	r0, sl
 8007898:	f7f8 fcaa 	bl	80001f0 <memchr>
 800789c:	b138      	cbz	r0, 80078ae <_vfiprintf_r+0x176>
 800789e:	9b04      	ldr	r3, [sp, #16]
 80078a0:	eba0 000a 	sub.w	r0, r0, sl
 80078a4:	2240      	movs	r2, #64	@ 0x40
 80078a6:	4082      	lsls	r2, r0
 80078a8:	4313      	orrs	r3, r2
 80078aa:	3401      	adds	r4, #1
 80078ac:	9304      	str	r3, [sp, #16]
 80078ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b2:	4829      	ldr	r0, [pc, #164]	@ (8007958 <_vfiprintf_r+0x220>)
 80078b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078b8:	2206      	movs	r2, #6
 80078ba:	f7f8 fc99 	bl	80001f0 <memchr>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d03f      	beq.n	8007942 <_vfiprintf_r+0x20a>
 80078c2:	4b26      	ldr	r3, [pc, #152]	@ (800795c <_vfiprintf_r+0x224>)
 80078c4:	bb1b      	cbnz	r3, 800790e <_vfiprintf_r+0x1d6>
 80078c6:	9b03      	ldr	r3, [sp, #12]
 80078c8:	3307      	adds	r3, #7
 80078ca:	f023 0307 	bic.w	r3, r3, #7
 80078ce:	3308      	adds	r3, #8
 80078d0:	9303      	str	r3, [sp, #12]
 80078d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d4:	443b      	add	r3, r7
 80078d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80078d8:	e76a      	b.n	80077b0 <_vfiprintf_r+0x78>
 80078da:	fb0c 3202 	mla	r2, ip, r2, r3
 80078de:	460c      	mov	r4, r1
 80078e0:	2001      	movs	r0, #1
 80078e2:	e7a8      	b.n	8007836 <_vfiprintf_r+0xfe>
 80078e4:	2300      	movs	r3, #0
 80078e6:	3401      	adds	r4, #1
 80078e8:	9305      	str	r3, [sp, #20]
 80078ea:	4619      	mov	r1, r3
 80078ec:	f04f 0c0a 	mov.w	ip, #10
 80078f0:	4620      	mov	r0, r4
 80078f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078f6:	3a30      	subs	r2, #48	@ 0x30
 80078f8:	2a09      	cmp	r2, #9
 80078fa:	d903      	bls.n	8007904 <_vfiprintf_r+0x1cc>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0c6      	beq.n	800788e <_vfiprintf_r+0x156>
 8007900:	9105      	str	r1, [sp, #20]
 8007902:	e7c4      	b.n	800788e <_vfiprintf_r+0x156>
 8007904:	fb0c 2101 	mla	r1, ip, r1, r2
 8007908:	4604      	mov	r4, r0
 800790a:	2301      	movs	r3, #1
 800790c:	e7f0      	b.n	80078f0 <_vfiprintf_r+0x1b8>
 800790e:	ab03      	add	r3, sp, #12
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	462a      	mov	r2, r5
 8007914:	4b12      	ldr	r3, [pc, #72]	@ (8007960 <_vfiprintf_r+0x228>)
 8007916:	a904      	add	r1, sp, #16
 8007918:	4630      	mov	r0, r6
 800791a:	f3af 8000 	nop.w
 800791e:	4607      	mov	r7, r0
 8007920:	1c78      	adds	r0, r7, #1
 8007922:	d1d6      	bne.n	80078d2 <_vfiprintf_r+0x19a>
 8007924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007926:	07d9      	lsls	r1, r3, #31
 8007928:	d405      	bmi.n	8007936 <_vfiprintf_r+0x1fe>
 800792a:	89ab      	ldrh	r3, [r5, #12]
 800792c:	059a      	lsls	r2, r3, #22
 800792e:	d402      	bmi.n	8007936 <_vfiprintf_r+0x1fe>
 8007930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007932:	f7fe fcad 	bl	8006290 <__retarget_lock_release_recursive>
 8007936:	89ab      	ldrh	r3, [r5, #12]
 8007938:	065b      	lsls	r3, r3, #25
 800793a:	f53f af1f 	bmi.w	800777c <_vfiprintf_r+0x44>
 800793e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007940:	e71e      	b.n	8007780 <_vfiprintf_r+0x48>
 8007942:	ab03      	add	r3, sp, #12
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	462a      	mov	r2, r5
 8007948:	4b05      	ldr	r3, [pc, #20]	@ (8007960 <_vfiprintf_r+0x228>)
 800794a:	a904      	add	r1, sp, #16
 800794c:	4630      	mov	r0, r6
 800794e:	f000 f879 	bl	8007a44 <_printf_i>
 8007952:	e7e4      	b.n	800791e <_vfiprintf_r+0x1e6>
 8007954:	08008608 	.word	0x08008608
 8007958:	08008612 	.word	0x08008612
 800795c:	00000000 	.word	0x00000000
 8007960:	08007715 	.word	0x08007715
 8007964:	0800860e 	.word	0x0800860e

08007968 <_printf_common>:
 8007968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	4616      	mov	r6, r2
 800796e:	4698      	mov	r8, r3
 8007970:	688a      	ldr	r2, [r1, #8]
 8007972:	690b      	ldr	r3, [r1, #16]
 8007974:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007978:	4293      	cmp	r3, r2
 800797a:	bfb8      	it	lt
 800797c:	4613      	movlt	r3, r2
 800797e:	6033      	str	r3, [r6, #0]
 8007980:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007984:	4607      	mov	r7, r0
 8007986:	460c      	mov	r4, r1
 8007988:	b10a      	cbz	r2, 800798e <_printf_common+0x26>
 800798a:	3301      	adds	r3, #1
 800798c:	6033      	str	r3, [r6, #0]
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	0699      	lsls	r1, r3, #26
 8007992:	bf42      	ittt	mi
 8007994:	6833      	ldrmi	r3, [r6, #0]
 8007996:	3302      	addmi	r3, #2
 8007998:	6033      	strmi	r3, [r6, #0]
 800799a:	6825      	ldr	r5, [r4, #0]
 800799c:	f015 0506 	ands.w	r5, r5, #6
 80079a0:	d106      	bne.n	80079b0 <_printf_common+0x48>
 80079a2:	f104 0a19 	add.w	sl, r4, #25
 80079a6:	68e3      	ldr	r3, [r4, #12]
 80079a8:	6832      	ldr	r2, [r6, #0]
 80079aa:	1a9b      	subs	r3, r3, r2
 80079ac:	42ab      	cmp	r3, r5
 80079ae:	dc26      	bgt.n	80079fe <_printf_common+0x96>
 80079b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079b4:	6822      	ldr	r2, [r4, #0]
 80079b6:	3b00      	subs	r3, #0
 80079b8:	bf18      	it	ne
 80079ba:	2301      	movne	r3, #1
 80079bc:	0692      	lsls	r2, r2, #26
 80079be:	d42b      	bmi.n	8007a18 <_printf_common+0xb0>
 80079c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079c4:	4641      	mov	r1, r8
 80079c6:	4638      	mov	r0, r7
 80079c8:	47c8      	blx	r9
 80079ca:	3001      	adds	r0, #1
 80079cc:	d01e      	beq.n	8007a0c <_printf_common+0xa4>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	6922      	ldr	r2, [r4, #16]
 80079d2:	f003 0306 	and.w	r3, r3, #6
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	bf02      	ittt	eq
 80079da:	68e5      	ldreq	r5, [r4, #12]
 80079dc:	6833      	ldreq	r3, [r6, #0]
 80079de:	1aed      	subeq	r5, r5, r3
 80079e0:	68a3      	ldr	r3, [r4, #8]
 80079e2:	bf0c      	ite	eq
 80079e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079e8:	2500      	movne	r5, #0
 80079ea:	4293      	cmp	r3, r2
 80079ec:	bfc4      	itt	gt
 80079ee:	1a9b      	subgt	r3, r3, r2
 80079f0:	18ed      	addgt	r5, r5, r3
 80079f2:	2600      	movs	r6, #0
 80079f4:	341a      	adds	r4, #26
 80079f6:	42b5      	cmp	r5, r6
 80079f8:	d11a      	bne.n	8007a30 <_printf_common+0xc8>
 80079fa:	2000      	movs	r0, #0
 80079fc:	e008      	b.n	8007a10 <_printf_common+0xa8>
 80079fe:	2301      	movs	r3, #1
 8007a00:	4652      	mov	r2, sl
 8007a02:	4641      	mov	r1, r8
 8007a04:	4638      	mov	r0, r7
 8007a06:	47c8      	blx	r9
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d103      	bne.n	8007a14 <_printf_common+0xac>
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a14:	3501      	adds	r5, #1
 8007a16:	e7c6      	b.n	80079a6 <_printf_common+0x3e>
 8007a18:	18e1      	adds	r1, r4, r3
 8007a1a:	1c5a      	adds	r2, r3, #1
 8007a1c:	2030      	movs	r0, #48	@ 0x30
 8007a1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a22:	4422      	add	r2, r4
 8007a24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a2c:	3302      	adds	r3, #2
 8007a2e:	e7c7      	b.n	80079c0 <_printf_common+0x58>
 8007a30:	2301      	movs	r3, #1
 8007a32:	4622      	mov	r2, r4
 8007a34:	4641      	mov	r1, r8
 8007a36:	4638      	mov	r0, r7
 8007a38:	47c8      	blx	r9
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	d0e6      	beq.n	8007a0c <_printf_common+0xa4>
 8007a3e:	3601      	adds	r6, #1
 8007a40:	e7d9      	b.n	80079f6 <_printf_common+0x8e>
	...

08007a44 <_printf_i>:
 8007a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a48:	7e0f      	ldrb	r7, [r1, #24]
 8007a4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a4c:	2f78      	cmp	r7, #120	@ 0x78
 8007a4e:	4691      	mov	r9, r2
 8007a50:	4680      	mov	r8, r0
 8007a52:	460c      	mov	r4, r1
 8007a54:	469a      	mov	sl, r3
 8007a56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a5a:	d807      	bhi.n	8007a6c <_printf_i+0x28>
 8007a5c:	2f62      	cmp	r7, #98	@ 0x62
 8007a5e:	d80a      	bhi.n	8007a76 <_printf_i+0x32>
 8007a60:	2f00      	cmp	r7, #0
 8007a62:	f000 80d2 	beq.w	8007c0a <_printf_i+0x1c6>
 8007a66:	2f58      	cmp	r7, #88	@ 0x58
 8007a68:	f000 80b9 	beq.w	8007bde <_printf_i+0x19a>
 8007a6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a74:	e03a      	b.n	8007aec <_printf_i+0xa8>
 8007a76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a7a:	2b15      	cmp	r3, #21
 8007a7c:	d8f6      	bhi.n	8007a6c <_printf_i+0x28>
 8007a7e:	a101      	add	r1, pc, #4	@ (adr r1, 8007a84 <_printf_i+0x40>)
 8007a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a84:	08007add 	.word	0x08007add
 8007a88:	08007af1 	.word	0x08007af1
 8007a8c:	08007a6d 	.word	0x08007a6d
 8007a90:	08007a6d 	.word	0x08007a6d
 8007a94:	08007a6d 	.word	0x08007a6d
 8007a98:	08007a6d 	.word	0x08007a6d
 8007a9c:	08007af1 	.word	0x08007af1
 8007aa0:	08007a6d 	.word	0x08007a6d
 8007aa4:	08007a6d 	.word	0x08007a6d
 8007aa8:	08007a6d 	.word	0x08007a6d
 8007aac:	08007a6d 	.word	0x08007a6d
 8007ab0:	08007bf1 	.word	0x08007bf1
 8007ab4:	08007b1b 	.word	0x08007b1b
 8007ab8:	08007bab 	.word	0x08007bab
 8007abc:	08007a6d 	.word	0x08007a6d
 8007ac0:	08007a6d 	.word	0x08007a6d
 8007ac4:	08007c13 	.word	0x08007c13
 8007ac8:	08007a6d 	.word	0x08007a6d
 8007acc:	08007b1b 	.word	0x08007b1b
 8007ad0:	08007a6d 	.word	0x08007a6d
 8007ad4:	08007a6d 	.word	0x08007a6d
 8007ad8:	08007bb3 	.word	0x08007bb3
 8007adc:	6833      	ldr	r3, [r6, #0]
 8007ade:	1d1a      	adds	r2, r3, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6032      	str	r2, [r6, #0]
 8007ae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ae8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007aec:	2301      	movs	r3, #1
 8007aee:	e09d      	b.n	8007c2c <_printf_i+0x1e8>
 8007af0:	6833      	ldr	r3, [r6, #0]
 8007af2:	6820      	ldr	r0, [r4, #0]
 8007af4:	1d19      	adds	r1, r3, #4
 8007af6:	6031      	str	r1, [r6, #0]
 8007af8:	0606      	lsls	r6, r0, #24
 8007afa:	d501      	bpl.n	8007b00 <_printf_i+0xbc>
 8007afc:	681d      	ldr	r5, [r3, #0]
 8007afe:	e003      	b.n	8007b08 <_printf_i+0xc4>
 8007b00:	0645      	lsls	r5, r0, #25
 8007b02:	d5fb      	bpl.n	8007afc <_printf_i+0xb8>
 8007b04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b08:	2d00      	cmp	r5, #0
 8007b0a:	da03      	bge.n	8007b14 <_printf_i+0xd0>
 8007b0c:	232d      	movs	r3, #45	@ 0x2d
 8007b0e:	426d      	negs	r5, r5
 8007b10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b14:	4859      	ldr	r0, [pc, #356]	@ (8007c7c <_printf_i+0x238>)
 8007b16:	230a      	movs	r3, #10
 8007b18:	e011      	b.n	8007b3e <_printf_i+0xfa>
 8007b1a:	6821      	ldr	r1, [r4, #0]
 8007b1c:	6833      	ldr	r3, [r6, #0]
 8007b1e:	0608      	lsls	r0, r1, #24
 8007b20:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b24:	d402      	bmi.n	8007b2c <_printf_i+0xe8>
 8007b26:	0649      	lsls	r1, r1, #25
 8007b28:	bf48      	it	mi
 8007b2a:	b2ad      	uxthmi	r5, r5
 8007b2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b2e:	4853      	ldr	r0, [pc, #332]	@ (8007c7c <_printf_i+0x238>)
 8007b30:	6033      	str	r3, [r6, #0]
 8007b32:	bf14      	ite	ne
 8007b34:	230a      	movne	r3, #10
 8007b36:	2308      	moveq	r3, #8
 8007b38:	2100      	movs	r1, #0
 8007b3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b3e:	6866      	ldr	r6, [r4, #4]
 8007b40:	60a6      	str	r6, [r4, #8]
 8007b42:	2e00      	cmp	r6, #0
 8007b44:	bfa2      	ittt	ge
 8007b46:	6821      	ldrge	r1, [r4, #0]
 8007b48:	f021 0104 	bicge.w	r1, r1, #4
 8007b4c:	6021      	strge	r1, [r4, #0]
 8007b4e:	b90d      	cbnz	r5, 8007b54 <_printf_i+0x110>
 8007b50:	2e00      	cmp	r6, #0
 8007b52:	d04b      	beq.n	8007bec <_printf_i+0x1a8>
 8007b54:	4616      	mov	r6, r2
 8007b56:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b5a:	fb03 5711 	mls	r7, r3, r1, r5
 8007b5e:	5dc7      	ldrb	r7, [r0, r7]
 8007b60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b64:	462f      	mov	r7, r5
 8007b66:	42bb      	cmp	r3, r7
 8007b68:	460d      	mov	r5, r1
 8007b6a:	d9f4      	bls.n	8007b56 <_printf_i+0x112>
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d10b      	bne.n	8007b88 <_printf_i+0x144>
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	07df      	lsls	r7, r3, #31
 8007b74:	d508      	bpl.n	8007b88 <_printf_i+0x144>
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	6861      	ldr	r1, [r4, #4]
 8007b7a:	4299      	cmp	r1, r3
 8007b7c:	bfde      	ittt	le
 8007b7e:	2330      	movle	r3, #48	@ 0x30
 8007b80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b88:	1b92      	subs	r2, r2, r6
 8007b8a:	6122      	str	r2, [r4, #16]
 8007b8c:	f8cd a000 	str.w	sl, [sp]
 8007b90:	464b      	mov	r3, r9
 8007b92:	aa03      	add	r2, sp, #12
 8007b94:	4621      	mov	r1, r4
 8007b96:	4640      	mov	r0, r8
 8007b98:	f7ff fee6 	bl	8007968 <_printf_common>
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d14a      	bne.n	8007c36 <_printf_i+0x1f2>
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba4:	b004      	add	sp, #16
 8007ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	f043 0320 	orr.w	r3, r3, #32
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	4833      	ldr	r0, [pc, #204]	@ (8007c80 <_printf_i+0x23c>)
 8007bb4:	2778      	movs	r7, #120	@ 0x78
 8007bb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	6831      	ldr	r1, [r6, #0]
 8007bbe:	061f      	lsls	r7, r3, #24
 8007bc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007bc4:	d402      	bmi.n	8007bcc <_printf_i+0x188>
 8007bc6:	065f      	lsls	r7, r3, #25
 8007bc8:	bf48      	it	mi
 8007bca:	b2ad      	uxthmi	r5, r5
 8007bcc:	6031      	str	r1, [r6, #0]
 8007bce:	07d9      	lsls	r1, r3, #31
 8007bd0:	bf44      	itt	mi
 8007bd2:	f043 0320 	orrmi.w	r3, r3, #32
 8007bd6:	6023      	strmi	r3, [r4, #0]
 8007bd8:	b11d      	cbz	r5, 8007be2 <_printf_i+0x19e>
 8007bda:	2310      	movs	r3, #16
 8007bdc:	e7ac      	b.n	8007b38 <_printf_i+0xf4>
 8007bde:	4827      	ldr	r0, [pc, #156]	@ (8007c7c <_printf_i+0x238>)
 8007be0:	e7e9      	b.n	8007bb6 <_printf_i+0x172>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	f023 0320 	bic.w	r3, r3, #32
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	e7f6      	b.n	8007bda <_printf_i+0x196>
 8007bec:	4616      	mov	r6, r2
 8007bee:	e7bd      	b.n	8007b6c <_printf_i+0x128>
 8007bf0:	6833      	ldr	r3, [r6, #0]
 8007bf2:	6825      	ldr	r5, [r4, #0]
 8007bf4:	6961      	ldr	r1, [r4, #20]
 8007bf6:	1d18      	adds	r0, r3, #4
 8007bf8:	6030      	str	r0, [r6, #0]
 8007bfa:	062e      	lsls	r6, r5, #24
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	d501      	bpl.n	8007c04 <_printf_i+0x1c0>
 8007c00:	6019      	str	r1, [r3, #0]
 8007c02:	e002      	b.n	8007c0a <_printf_i+0x1c6>
 8007c04:	0668      	lsls	r0, r5, #25
 8007c06:	d5fb      	bpl.n	8007c00 <_printf_i+0x1bc>
 8007c08:	8019      	strh	r1, [r3, #0]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	6123      	str	r3, [r4, #16]
 8007c0e:	4616      	mov	r6, r2
 8007c10:	e7bc      	b.n	8007b8c <_printf_i+0x148>
 8007c12:	6833      	ldr	r3, [r6, #0]
 8007c14:	1d1a      	adds	r2, r3, #4
 8007c16:	6032      	str	r2, [r6, #0]
 8007c18:	681e      	ldr	r6, [r3, #0]
 8007c1a:	6862      	ldr	r2, [r4, #4]
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7f8 fae6 	bl	80001f0 <memchr>
 8007c24:	b108      	cbz	r0, 8007c2a <_printf_i+0x1e6>
 8007c26:	1b80      	subs	r0, r0, r6
 8007c28:	6060      	str	r0, [r4, #4]
 8007c2a:	6863      	ldr	r3, [r4, #4]
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c34:	e7aa      	b.n	8007b8c <_printf_i+0x148>
 8007c36:	6923      	ldr	r3, [r4, #16]
 8007c38:	4632      	mov	r2, r6
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	47d0      	blx	sl
 8007c40:	3001      	adds	r0, #1
 8007c42:	d0ad      	beq.n	8007ba0 <_printf_i+0x15c>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	079b      	lsls	r3, r3, #30
 8007c48:	d413      	bmi.n	8007c72 <_printf_i+0x22e>
 8007c4a:	68e0      	ldr	r0, [r4, #12]
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	4298      	cmp	r0, r3
 8007c50:	bfb8      	it	lt
 8007c52:	4618      	movlt	r0, r3
 8007c54:	e7a6      	b.n	8007ba4 <_printf_i+0x160>
 8007c56:	2301      	movs	r3, #1
 8007c58:	4632      	mov	r2, r6
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	47d0      	blx	sl
 8007c60:	3001      	adds	r0, #1
 8007c62:	d09d      	beq.n	8007ba0 <_printf_i+0x15c>
 8007c64:	3501      	adds	r5, #1
 8007c66:	68e3      	ldr	r3, [r4, #12]
 8007c68:	9903      	ldr	r1, [sp, #12]
 8007c6a:	1a5b      	subs	r3, r3, r1
 8007c6c:	42ab      	cmp	r3, r5
 8007c6e:	dcf2      	bgt.n	8007c56 <_printf_i+0x212>
 8007c70:	e7eb      	b.n	8007c4a <_printf_i+0x206>
 8007c72:	2500      	movs	r5, #0
 8007c74:	f104 0619 	add.w	r6, r4, #25
 8007c78:	e7f5      	b.n	8007c66 <_printf_i+0x222>
 8007c7a:	bf00      	nop
 8007c7c:	08008619 	.word	0x08008619
 8007c80:	0800862a 	.word	0x0800862a

08007c84 <__swbuf_r>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	460e      	mov	r6, r1
 8007c88:	4614      	mov	r4, r2
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	b118      	cbz	r0, 8007c96 <__swbuf_r+0x12>
 8007c8e:	6a03      	ldr	r3, [r0, #32]
 8007c90:	b90b      	cbnz	r3, 8007c96 <__swbuf_r+0x12>
 8007c92:	f7fe f985 	bl	8005fa0 <__sinit>
 8007c96:	69a3      	ldr	r3, [r4, #24]
 8007c98:	60a3      	str	r3, [r4, #8]
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	071a      	lsls	r2, r3, #28
 8007c9e:	d501      	bpl.n	8007ca4 <__swbuf_r+0x20>
 8007ca0:	6923      	ldr	r3, [r4, #16]
 8007ca2:	b943      	cbnz	r3, 8007cb6 <__swbuf_r+0x32>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 f82a 	bl	8007d00 <__swsetup_r>
 8007cac:	b118      	cbz	r0, 8007cb6 <__swbuf_r+0x32>
 8007cae:	f04f 37ff 	mov.w	r7, #4294967295
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	6922      	ldr	r2, [r4, #16]
 8007cba:	1a98      	subs	r0, r3, r2
 8007cbc:	6963      	ldr	r3, [r4, #20]
 8007cbe:	b2f6      	uxtb	r6, r6
 8007cc0:	4283      	cmp	r3, r0
 8007cc2:	4637      	mov	r7, r6
 8007cc4:	dc05      	bgt.n	8007cd2 <__swbuf_r+0x4e>
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4628      	mov	r0, r5
 8007cca:	f7ff fca7 	bl	800761c <_fflush_r>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d1ed      	bne.n	8007cae <__swbuf_r+0x2a>
 8007cd2:	68a3      	ldr	r3, [r4, #8]
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	60a3      	str	r3, [r4, #8]
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	6022      	str	r2, [r4, #0]
 8007cde:	701e      	strb	r6, [r3, #0]
 8007ce0:	6962      	ldr	r2, [r4, #20]
 8007ce2:	1c43      	adds	r3, r0, #1
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d004      	beq.n	8007cf2 <__swbuf_r+0x6e>
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	07db      	lsls	r3, r3, #31
 8007cec:	d5e1      	bpl.n	8007cb2 <__swbuf_r+0x2e>
 8007cee:	2e0a      	cmp	r6, #10
 8007cf0:	d1df      	bne.n	8007cb2 <__swbuf_r+0x2e>
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	f7ff fc91 	bl	800761c <_fflush_r>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d0d9      	beq.n	8007cb2 <__swbuf_r+0x2e>
 8007cfe:	e7d6      	b.n	8007cae <__swbuf_r+0x2a>

08007d00 <__swsetup_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4b29      	ldr	r3, [pc, #164]	@ (8007da8 <__swsetup_r+0xa8>)
 8007d04:	4605      	mov	r5, r0
 8007d06:	6818      	ldr	r0, [r3, #0]
 8007d08:	460c      	mov	r4, r1
 8007d0a:	b118      	cbz	r0, 8007d14 <__swsetup_r+0x14>
 8007d0c:	6a03      	ldr	r3, [r0, #32]
 8007d0e:	b90b      	cbnz	r3, 8007d14 <__swsetup_r+0x14>
 8007d10:	f7fe f946 	bl	8005fa0 <__sinit>
 8007d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d18:	0719      	lsls	r1, r3, #28
 8007d1a:	d422      	bmi.n	8007d62 <__swsetup_r+0x62>
 8007d1c:	06da      	lsls	r2, r3, #27
 8007d1e:	d407      	bmi.n	8007d30 <__swsetup_r+0x30>
 8007d20:	2209      	movs	r2, #9
 8007d22:	602a      	str	r2, [r5, #0]
 8007d24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d28:	81a3      	strh	r3, [r4, #12]
 8007d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2e:	e033      	b.n	8007d98 <__swsetup_r+0x98>
 8007d30:	0758      	lsls	r0, r3, #29
 8007d32:	d512      	bpl.n	8007d5a <__swsetup_r+0x5a>
 8007d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d36:	b141      	cbz	r1, 8007d4a <__swsetup_r+0x4a>
 8007d38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d3c:	4299      	cmp	r1, r3
 8007d3e:	d002      	beq.n	8007d46 <__swsetup_r+0x46>
 8007d40:	4628      	mov	r0, r5
 8007d42:	f7fe fadb 	bl	80062fc <_free_r>
 8007d46:	2300      	movs	r3, #0
 8007d48:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	2300      	movs	r3, #0
 8007d54:	6063      	str	r3, [r4, #4]
 8007d56:	6923      	ldr	r3, [r4, #16]
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	f043 0308 	orr.w	r3, r3, #8
 8007d60:	81a3      	strh	r3, [r4, #12]
 8007d62:	6923      	ldr	r3, [r4, #16]
 8007d64:	b94b      	cbnz	r3, 8007d7a <__swsetup_r+0x7a>
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d70:	d003      	beq.n	8007d7a <__swsetup_r+0x7a>
 8007d72:	4621      	mov	r1, r4
 8007d74:	4628      	mov	r0, r5
 8007d76:	f000 f883 	bl	8007e80 <__smakebuf_r>
 8007d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d7e:	f013 0201 	ands.w	r2, r3, #1
 8007d82:	d00a      	beq.n	8007d9a <__swsetup_r+0x9a>
 8007d84:	2200      	movs	r2, #0
 8007d86:	60a2      	str	r2, [r4, #8]
 8007d88:	6962      	ldr	r2, [r4, #20]
 8007d8a:	4252      	negs	r2, r2
 8007d8c:	61a2      	str	r2, [r4, #24]
 8007d8e:	6922      	ldr	r2, [r4, #16]
 8007d90:	b942      	cbnz	r2, 8007da4 <__swsetup_r+0xa4>
 8007d92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d96:	d1c5      	bne.n	8007d24 <__swsetup_r+0x24>
 8007d98:	bd38      	pop	{r3, r4, r5, pc}
 8007d9a:	0799      	lsls	r1, r3, #30
 8007d9c:	bf58      	it	pl
 8007d9e:	6962      	ldrpl	r2, [r4, #20]
 8007da0:	60a2      	str	r2, [r4, #8]
 8007da2:	e7f4      	b.n	8007d8e <__swsetup_r+0x8e>
 8007da4:	2000      	movs	r0, #0
 8007da6:	e7f7      	b.n	8007d98 <__swsetup_r+0x98>
 8007da8:	20000184 	.word	0x20000184

08007dac <_raise_r>:
 8007dac:	291f      	cmp	r1, #31
 8007dae:	b538      	push	{r3, r4, r5, lr}
 8007db0:	4605      	mov	r5, r0
 8007db2:	460c      	mov	r4, r1
 8007db4:	d904      	bls.n	8007dc0 <_raise_r+0x14>
 8007db6:	2316      	movs	r3, #22
 8007db8:	6003      	str	r3, [r0, #0]
 8007dba:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007dc2:	b112      	cbz	r2, 8007dca <_raise_r+0x1e>
 8007dc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007dc8:	b94b      	cbnz	r3, 8007dde <_raise_r+0x32>
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f000 f830 	bl	8007e30 <_getpid_r>
 8007dd0:	4622      	mov	r2, r4
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dda:	f000 b817 	b.w	8007e0c <_kill_r>
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d00a      	beq.n	8007df8 <_raise_r+0x4c>
 8007de2:	1c59      	adds	r1, r3, #1
 8007de4:	d103      	bne.n	8007dee <_raise_r+0x42>
 8007de6:	2316      	movs	r3, #22
 8007de8:	6003      	str	r3, [r0, #0]
 8007dea:	2001      	movs	r0, #1
 8007dec:	e7e7      	b.n	8007dbe <_raise_r+0x12>
 8007dee:	2100      	movs	r1, #0
 8007df0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007df4:	4620      	mov	r0, r4
 8007df6:	4798      	blx	r3
 8007df8:	2000      	movs	r0, #0
 8007dfa:	e7e0      	b.n	8007dbe <_raise_r+0x12>

08007dfc <raise>:
 8007dfc:	4b02      	ldr	r3, [pc, #8]	@ (8007e08 <raise+0xc>)
 8007dfe:	4601      	mov	r1, r0
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	f7ff bfd3 	b.w	8007dac <_raise_r>
 8007e06:	bf00      	nop
 8007e08:	20000184 	.word	0x20000184

08007e0c <_kill_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d07      	ldr	r5, [pc, #28]	@ (8007e2c <_kill_r+0x20>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	4611      	mov	r1, r2
 8007e18:	602b      	str	r3, [r5, #0]
 8007e1a:	f7f9 ff2f 	bl	8001c7c <_kill>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	d102      	bne.n	8007e28 <_kill_r+0x1c>
 8007e22:	682b      	ldr	r3, [r5, #0]
 8007e24:	b103      	cbz	r3, 8007e28 <_kill_r+0x1c>
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	bd38      	pop	{r3, r4, r5, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000574 	.word	0x20000574

08007e30 <_getpid_r>:
 8007e30:	f7f9 bf1c 	b.w	8001c6c <_getpid>

08007e34 <__swhatbuf_r>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	460c      	mov	r4, r1
 8007e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e3c:	2900      	cmp	r1, #0
 8007e3e:	b096      	sub	sp, #88	@ 0x58
 8007e40:	4615      	mov	r5, r2
 8007e42:	461e      	mov	r6, r3
 8007e44:	da0d      	bge.n	8007e62 <__swhatbuf_r+0x2e>
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e4c:	f04f 0100 	mov.w	r1, #0
 8007e50:	bf14      	ite	ne
 8007e52:	2340      	movne	r3, #64	@ 0x40
 8007e54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e58:	2000      	movs	r0, #0
 8007e5a:	6031      	str	r1, [r6, #0]
 8007e5c:	602b      	str	r3, [r5, #0]
 8007e5e:	b016      	add	sp, #88	@ 0x58
 8007e60:	bd70      	pop	{r4, r5, r6, pc}
 8007e62:	466a      	mov	r2, sp
 8007e64:	f000 f848 	bl	8007ef8 <_fstat_r>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	dbec      	blt.n	8007e46 <__swhatbuf_r+0x12>
 8007e6c:	9901      	ldr	r1, [sp, #4]
 8007e6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e76:	4259      	negs	r1, r3
 8007e78:	4159      	adcs	r1, r3
 8007e7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e7e:	e7eb      	b.n	8007e58 <__swhatbuf_r+0x24>

08007e80 <__smakebuf_r>:
 8007e80:	898b      	ldrh	r3, [r1, #12]
 8007e82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e84:	079d      	lsls	r5, r3, #30
 8007e86:	4606      	mov	r6, r0
 8007e88:	460c      	mov	r4, r1
 8007e8a:	d507      	bpl.n	8007e9c <__smakebuf_r+0x1c>
 8007e8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	6123      	str	r3, [r4, #16]
 8007e94:	2301      	movs	r3, #1
 8007e96:	6163      	str	r3, [r4, #20]
 8007e98:	b003      	add	sp, #12
 8007e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e9c:	ab01      	add	r3, sp, #4
 8007e9e:	466a      	mov	r2, sp
 8007ea0:	f7ff ffc8 	bl	8007e34 <__swhatbuf_r>
 8007ea4:	9f00      	ldr	r7, [sp, #0]
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	4639      	mov	r1, r7
 8007eaa:	4630      	mov	r0, r6
 8007eac:	f7fe fdd4 	bl	8006a58 <_malloc_r>
 8007eb0:	b948      	cbnz	r0, 8007ec6 <__smakebuf_r+0x46>
 8007eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eb6:	059a      	lsls	r2, r3, #22
 8007eb8:	d4ee      	bmi.n	8007e98 <__smakebuf_r+0x18>
 8007eba:	f023 0303 	bic.w	r3, r3, #3
 8007ebe:	f043 0302 	orr.w	r3, r3, #2
 8007ec2:	81a3      	strh	r3, [r4, #12]
 8007ec4:	e7e2      	b.n	8007e8c <__smakebuf_r+0xc>
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	6020      	str	r0, [r4, #0]
 8007eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ece:	81a3      	strh	r3, [r4, #12]
 8007ed0:	9b01      	ldr	r3, [sp, #4]
 8007ed2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ed6:	b15b      	cbz	r3, 8007ef0 <__smakebuf_r+0x70>
 8007ed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007edc:	4630      	mov	r0, r6
 8007ede:	f000 f81d 	bl	8007f1c <_isatty_r>
 8007ee2:	b128      	cbz	r0, 8007ef0 <__smakebuf_r+0x70>
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	f023 0303 	bic.w	r3, r3, #3
 8007eea:	f043 0301 	orr.w	r3, r3, #1
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	89a3      	ldrh	r3, [r4, #12]
 8007ef2:	431d      	orrs	r5, r3
 8007ef4:	81a5      	strh	r5, [r4, #12]
 8007ef6:	e7cf      	b.n	8007e98 <__smakebuf_r+0x18>

08007ef8 <_fstat_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4d07      	ldr	r5, [pc, #28]	@ (8007f18 <_fstat_r+0x20>)
 8007efc:	2300      	movs	r3, #0
 8007efe:	4604      	mov	r4, r0
 8007f00:	4608      	mov	r0, r1
 8007f02:	4611      	mov	r1, r2
 8007f04:	602b      	str	r3, [r5, #0]
 8007f06:	f7f9 ff19 	bl	8001d3c <_fstat>
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	d102      	bne.n	8007f14 <_fstat_r+0x1c>
 8007f0e:	682b      	ldr	r3, [r5, #0]
 8007f10:	b103      	cbz	r3, 8007f14 <_fstat_r+0x1c>
 8007f12:	6023      	str	r3, [r4, #0]
 8007f14:	bd38      	pop	{r3, r4, r5, pc}
 8007f16:	bf00      	nop
 8007f18:	20000574 	.word	0x20000574

08007f1c <_isatty_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4d06      	ldr	r5, [pc, #24]	@ (8007f38 <_isatty_r+0x1c>)
 8007f20:	2300      	movs	r3, #0
 8007f22:	4604      	mov	r4, r0
 8007f24:	4608      	mov	r0, r1
 8007f26:	602b      	str	r3, [r5, #0]
 8007f28:	f7f9 ff18 	bl	8001d5c <_isatty>
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	d102      	bne.n	8007f36 <_isatty_r+0x1a>
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	b103      	cbz	r3, 8007f36 <_isatty_r+0x1a>
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	20000574 	.word	0x20000574

08007f3c <fmod>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	ed2d 8b02 	vpush	{d8}
 8007f42:	ec57 6b10 	vmov	r6, r7, d0
 8007f46:	ec55 4b11 	vmov	r4, r5, d1
 8007f4a:	f000 f825 	bl	8007f98 <__ieee754_fmod>
 8007f4e:	4622      	mov	r2, r4
 8007f50:	462b      	mov	r3, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	4639      	mov	r1, r7
 8007f56:	eeb0 8a40 	vmov.f32	s16, s0
 8007f5a:	eef0 8a60 	vmov.f32	s17, s1
 8007f5e:	f7f8 fded 	bl	8000b3c <__aeabi_dcmpun>
 8007f62:	b990      	cbnz	r0, 8007f8a <fmod+0x4e>
 8007f64:	2200      	movs	r2, #0
 8007f66:	2300      	movs	r3, #0
 8007f68:	4620      	mov	r0, r4
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	f7f8 fdb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f70:	b158      	cbz	r0, 8007f8a <fmod+0x4e>
 8007f72:	f7fe f961 	bl	8006238 <__errno>
 8007f76:	2321      	movs	r3, #33	@ 0x21
 8007f78:	6003      	str	r3, [r0, #0]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4610      	mov	r0, r2
 8007f80:	4619      	mov	r1, r3
 8007f82:	f7f8 fc6b 	bl	800085c <__aeabi_ddiv>
 8007f86:	ec41 0b18 	vmov	d8, r0, r1
 8007f8a:	eeb0 0a48 	vmov.f32	s0, s16
 8007f8e:	eef0 0a68 	vmov.f32	s1, s17
 8007f92:	ecbd 8b02 	vpop	{d8}
 8007f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f98 <__ieee754_fmod>:
 8007f98:	ec53 2b11 	vmov	r2, r3, d1
 8007f9c:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8007fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa4:	ea52 040c 	orrs.w	r4, r2, ip
 8007fa8:	ec51 0b10 	vmov	r0, r1, d0
 8007fac:	461e      	mov	r6, r3
 8007fae:	4617      	mov	r7, r2
 8007fb0:	4696      	mov	lr, r2
 8007fb2:	d00c      	beq.n	8007fce <__ieee754_fmod+0x36>
 8007fb4:	4c77      	ldr	r4, [pc, #476]	@ (8008194 <__ieee754_fmod+0x1fc>)
 8007fb6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8007fba:	45a0      	cmp	r8, r4
 8007fbc:	4689      	mov	r9, r1
 8007fbe:	d806      	bhi.n	8007fce <__ieee754_fmod+0x36>
 8007fc0:	4254      	negs	r4, r2
 8007fc2:	4d75      	ldr	r5, [pc, #468]	@ (8008198 <__ieee754_fmod+0x200>)
 8007fc4:	4314      	orrs	r4, r2
 8007fc6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8007fca:	42ac      	cmp	r4, r5
 8007fcc:	d909      	bls.n	8007fe2 <__ieee754_fmod+0x4a>
 8007fce:	f7f8 fb1b 	bl	8000608 <__aeabi_dmul>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	f7f8 fc41 	bl	800085c <__aeabi_ddiv>
 8007fda:	ec41 0b10 	vmov	d0, r0, r1
 8007fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe2:	45e0      	cmp	r8, ip
 8007fe4:	4682      	mov	sl, r0
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8007fec:	dc09      	bgt.n	8008002 <__ieee754_fmod+0x6a>
 8007fee:	dbf4      	blt.n	8007fda <__ieee754_fmod+0x42>
 8007ff0:	4282      	cmp	r2, r0
 8007ff2:	d8f2      	bhi.n	8007fda <__ieee754_fmod+0x42>
 8007ff4:	d105      	bne.n	8008002 <__ieee754_fmod+0x6a>
 8007ff6:	4b69      	ldr	r3, [pc, #420]	@ (800819c <__ieee754_fmod+0x204>)
 8007ff8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8007ffc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008000:	e7eb      	b.n	8007fda <__ieee754_fmod+0x42>
 8008002:	4a65      	ldr	r2, [pc, #404]	@ (8008198 <__ieee754_fmod+0x200>)
 8008004:	ea19 0f02 	tst.w	r9, r2
 8008008:	d148      	bne.n	800809c <__ieee754_fmod+0x104>
 800800a:	f1b8 0f00 	cmp.w	r8, #0
 800800e:	d13d      	bne.n	800808c <__ieee754_fmod+0xf4>
 8008010:	4963      	ldr	r1, [pc, #396]	@ (80081a0 <__ieee754_fmod+0x208>)
 8008012:	4653      	mov	r3, sl
 8008014:	2b00      	cmp	r3, #0
 8008016:	dc36      	bgt.n	8008086 <__ieee754_fmod+0xee>
 8008018:	4216      	tst	r6, r2
 800801a:	d14f      	bne.n	80080bc <__ieee754_fmod+0x124>
 800801c:	f1bc 0f00 	cmp.w	ip, #0
 8008020:	d144      	bne.n	80080ac <__ieee754_fmod+0x114>
 8008022:	4a5f      	ldr	r2, [pc, #380]	@ (80081a0 <__ieee754_fmod+0x208>)
 8008024:	463b      	mov	r3, r7
 8008026:	2b00      	cmp	r3, #0
 8008028:	dc3d      	bgt.n	80080a6 <__ieee754_fmod+0x10e>
 800802a:	485e      	ldr	r0, [pc, #376]	@ (80081a4 <__ieee754_fmod+0x20c>)
 800802c:	4281      	cmp	r1, r0
 800802e:	db4a      	blt.n	80080c6 <__ieee754_fmod+0x12e>
 8008030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008034:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008038:	485a      	ldr	r0, [pc, #360]	@ (80081a4 <__ieee754_fmod+0x20c>)
 800803a:	4282      	cmp	r2, r0
 800803c:	db57      	blt.n	80080ee <__ieee754_fmod+0x156>
 800803e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8008042:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8008046:	1a89      	subs	r1, r1, r2
 8008048:	1b98      	subs	r0, r3, r6
 800804a:	eba4 070e 	sub.w	r7, r4, lr
 800804e:	2900      	cmp	r1, #0
 8008050:	d162      	bne.n	8008118 <__ieee754_fmod+0x180>
 8008052:	4574      	cmp	r4, lr
 8008054:	bf38      	it	cc
 8008056:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800805a:	2800      	cmp	r0, #0
 800805c:	bfa4      	itt	ge
 800805e:	463c      	movge	r4, r7
 8008060:	4603      	movge	r3, r0
 8008062:	ea53 0104 	orrs.w	r1, r3, r4
 8008066:	d0c6      	beq.n	8007ff6 <__ieee754_fmod+0x5e>
 8008068:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800806c:	db69      	blt.n	8008142 <__ieee754_fmod+0x1aa>
 800806e:	494d      	ldr	r1, [pc, #308]	@ (80081a4 <__ieee754_fmod+0x20c>)
 8008070:	428a      	cmp	r2, r1
 8008072:	db6c      	blt.n	800814e <__ieee754_fmod+0x1b6>
 8008074:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008078:	432b      	orrs	r3, r5
 800807a:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800807e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008082:	4620      	mov	r0, r4
 8008084:	e7a9      	b.n	8007fda <__ieee754_fmod+0x42>
 8008086:	3901      	subs	r1, #1
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	e7c3      	b.n	8008014 <__ieee754_fmod+0x7c>
 800808c:	4945      	ldr	r1, [pc, #276]	@ (80081a4 <__ieee754_fmod+0x20c>)
 800808e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8008092:	2b00      	cmp	r3, #0
 8008094:	ddc0      	ble.n	8008018 <__ieee754_fmod+0x80>
 8008096:	3901      	subs	r1, #1
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	e7fa      	b.n	8008092 <__ieee754_fmod+0xfa>
 800809c:	ea4f 5128 	mov.w	r1, r8, asr #20
 80080a0:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80080a4:	e7b8      	b.n	8008018 <__ieee754_fmod+0x80>
 80080a6:	3a01      	subs	r2, #1
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	e7bc      	b.n	8008026 <__ieee754_fmod+0x8e>
 80080ac:	4a3d      	ldr	r2, [pc, #244]	@ (80081a4 <__ieee754_fmod+0x20c>)
 80080ae:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	ddb9      	ble.n	800802a <__ieee754_fmod+0x92>
 80080b6:	3a01      	subs	r2, #1
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	e7fa      	b.n	80080b2 <__ieee754_fmod+0x11a>
 80080bc:	ea4f 522c 	mov.w	r2, ip, asr #20
 80080c0:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80080c4:	e7b1      	b.n	800802a <__ieee754_fmod+0x92>
 80080c6:	1a40      	subs	r0, r0, r1
 80080c8:	281f      	cmp	r0, #31
 80080ca:	dc0a      	bgt.n	80080e2 <__ieee754_fmod+0x14a>
 80080cc:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 80080d0:	fa08 f800 	lsl.w	r8, r8, r0
 80080d4:	fa2a f303 	lsr.w	r3, sl, r3
 80080d8:	ea43 0308 	orr.w	r3, r3, r8
 80080dc:	fa0a f400 	lsl.w	r4, sl, r0
 80080e0:	e7aa      	b.n	8008038 <__ieee754_fmod+0xa0>
 80080e2:	4b31      	ldr	r3, [pc, #196]	@ (80081a8 <__ieee754_fmod+0x210>)
 80080e4:	1a5b      	subs	r3, r3, r1
 80080e6:	fa0a f303 	lsl.w	r3, sl, r3
 80080ea:	2400      	movs	r4, #0
 80080ec:	e7a4      	b.n	8008038 <__ieee754_fmod+0xa0>
 80080ee:	1a80      	subs	r0, r0, r2
 80080f0:	281f      	cmp	r0, #31
 80080f2:	dc0a      	bgt.n	800810a <__ieee754_fmod+0x172>
 80080f4:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 80080f8:	fa0c fc00 	lsl.w	ip, ip, r0
 80080fc:	fa27 f606 	lsr.w	r6, r7, r6
 8008100:	ea46 060c 	orr.w	r6, r6, ip
 8008104:	fa07 fe00 	lsl.w	lr, r7, r0
 8008108:	e79d      	b.n	8008046 <__ieee754_fmod+0xae>
 800810a:	4e27      	ldr	r6, [pc, #156]	@ (80081a8 <__ieee754_fmod+0x210>)
 800810c:	1ab6      	subs	r6, r6, r2
 800810e:	fa07 f606 	lsl.w	r6, r7, r6
 8008112:	f04f 0e00 	mov.w	lr, #0
 8008116:	e796      	b.n	8008046 <__ieee754_fmod+0xae>
 8008118:	4574      	cmp	r4, lr
 800811a:	bf38      	it	cc
 800811c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8008120:	2800      	cmp	r0, #0
 8008122:	da05      	bge.n	8008130 <__ieee754_fmod+0x198>
 8008124:	0fe0      	lsrs	r0, r4, #31
 8008126:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800812a:	0064      	lsls	r4, r4, #1
 800812c:	3901      	subs	r1, #1
 800812e:	e78b      	b.n	8008048 <__ieee754_fmod+0xb0>
 8008130:	ea50 0307 	orrs.w	r3, r0, r7
 8008134:	f43f af5f 	beq.w	8007ff6 <__ieee754_fmod+0x5e>
 8008138:	0ffb      	lsrs	r3, r7, #31
 800813a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800813e:	007c      	lsls	r4, r7, #1
 8008140:	e7f4      	b.n	800812c <__ieee754_fmod+0x194>
 8008142:	0fe1      	lsrs	r1, r4, #31
 8008144:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008148:	0064      	lsls	r4, r4, #1
 800814a:	3a01      	subs	r2, #1
 800814c:	e78c      	b.n	8008068 <__ieee754_fmod+0xd0>
 800814e:	1a89      	subs	r1, r1, r2
 8008150:	2914      	cmp	r1, #20
 8008152:	dc0a      	bgt.n	800816a <__ieee754_fmod+0x1d2>
 8008154:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8008158:	fa03 f202 	lsl.w	r2, r3, r2
 800815c:	40cc      	lsrs	r4, r1
 800815e:	4322      	orrs	r2, r4
 8008160:	410b      	asrs	r3, r1
 8008162:	ea43 0105 	orr.w	r1, r3, r5
 8008166:	4610      	mov	r0, r2
 8008168:	e737      	b.n	8007fda <__ieee754_fmod+0x42>
 800816a:	291f      	cmp	r1, #31
 800816c:	dc07      	bgt.n	800817e <__ieee754_fmod+0x1e6>
 800816e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8008172:	40cc      	lsrs	r4, r1
 8008174:	fa03 f202 	lsl.w	r2, r3, r2
 8008178:	4322      	orrs	r2, r4
 800817a:	462b      	mov	r3, r5
 800817c:	e7f1      	b.n	8008162 <__ieee754_fmod+0x1ca>
 800817e:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8008182:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8008186:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800818a:	32e2      	adds	r2, #226	@ 0xe2
 800818c:	fa43 f202 	asr.w	r2, r3, r2
 8008190:	e7f3      	b.n	800817a <__ieee754_fmod+0x1e2>
 8008192:	bf00      	nop
 8008194:	7fefffff 	.word	0x7fefffff
 8008198:	7ff00000 	.word	0x7ff00000
 800819c:	08008640 	.word	0x08008640
 80081a0:	fffffbed 	.word	0xfffffbed
 80081a4:	fffffc02 	.word	0xfffffc02
 80081a8:	fffffbe2 	.word	0xfffffbe2

080081ac <_init>:
 80081ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ae:	bf00      	nop
 80081b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b2:	bc08      	pop	{r3}
 80081b4:	469e      	mov	lr, r3
 80081b6:	4770      	bx	lr

080081b8 <_fini>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	bf00      	nop
 80081bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081be:	bc08      	pop	{r3}
 80081c0:	469e      	mov	lr, r3
 80081c2:	4770      	bx	lr
